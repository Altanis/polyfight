(()=>{var __webpack_modules__={"./node_modules/nipplejs/dist/nipplejs.js":module=>{eval('!function(t,i){ true?module.exports=i():0}(window,function(){return function(t){var i={};function e(o){if(i[o])return i[o].exports;var n=i[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,e),n.l=!0,n.exports}return e.m=t,e.c=i,e.d=function(t,i,o){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var n in t)e.d(o,n,function(i){return t[i]}.bind(null,n));return o},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";e.r(i);var o,n=function(t,i){var e=i.x-t.x,o=i.y-t.y;return Math.sqrt(e*e+o*o)},s=function(t){return t*(Math.PI/180)},r=function(t){return t*(180/Math.PI)},d=new Map,a=function(t){d.has(t)&&clearTimeout(d.get(t)),d.set(t,setTimeout(t,100))},p=function(t,i,e){for(var o,n=i.split(/[ ,]+/g),s=0;s<n.length;s+=1)o=n[s],t.addEventListener?t.addEventListener(o,e,!1):t.attachEvent&&t.attachEvent(o,e)},c=function(t,i,e){for(var o,n=i.split(/[ ,]+/g),s=0;s<n.length;s+=1)o=n[s],t.removeEventListener?t.removeEventListener(o,e):t.detachEvent&&t.detachEvent(o,e)},l=function(t){return t.preventDefault(),t.type.match(/^touch/)?t.changedTouches:t},h=function(){return{x:void 0!==window.pageXOffset?window.pageXOffset:(document.documentElement||document.body.parentNode||document.body).scrollLeft,y:void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}},u=function(t,i){i.top||i.right||i.bottom||i.left?(t.style.top=i.top,t.style.right=i.right,t.style.bottom=i.bottom,t.style.left=i.left):(t.style.left=i.x+"px",t.style.top=i.y+"px")},f=function(t,i,e){var o=y(t);for(var n in o)if(o.hasOwnProperty(n))if("string"==typeof i)o[n]=i+" "+e;else{for(var s="",r=0,d=i.length;r<d;r+=1)s+=i[r]+" "+e+", ";o[n]=s.slice(0,-2)}return o},y=function(t){var i={};i[t]="";return["webkit","Moz","o"].forEach(function(e){i[e+t.charAt(0).toUpperCase()+t.slice(1)]=""}),i},m=function(t,i){for(var e in i)i.hasOwnProperty(e)&&(t[e]=i[e]);return t},v=function(t,i){if(t.length)for(var e=0,o=t.length;e<o;e+=1)i(t[e]);else i(t)},g=!!("ontouchstart"in window),b=!!window.PointerEvent,x=!!window.MSPointerEvent,O={start:"mousedown",move:"mousemove",end:"mouseup"},w={};function _(){}b?o={start:"pointerdown",move:"pointermove",end:"pointerup, pointercancel"}:x?o={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:g?(o={start:"touchstart",move:"touchmove",end:"touchend, touchcancel"},w=O):o=O,_.prototype.on=function(t,i){var e,o=t.split(/[ ,]+/g);this._handlers_=this._handlers_||{};for(var n=0;n<o.length;n+=1)e=o[n],this._handlers_[e]=this._handlers_[e]||[],this._handlers_[e].push(i);return this},_.prototype.off=function(t,i){return this._handlers_=this._handlers_||{},void 0===t?this._handlers_={}:void 0===i?this._handlers_[t]=null:this._handlers_[t]&&this._handlers_[t].indexOf(i)>=0&&this._handlers_[t].splice(this._handlers_[t].indexOf(i),1),this},_.prototype.trigger=function(t,i){var e,o=this,n=t.split(/[ ,]+/g);o._handlers_=o._handlers_||{};for(var s=0;s<n.length;s+=1)e=n[s],o._handlers_[e]&&o._handlers_[e].length&&o._handlers_[e].forEach(function(t){t.call(o,{type:e,target:o},i)})},_.prototype.config=function(t){this.options=this.defaults||{},t&&(this.options=function(t,i){var e={};for(var o in t)t.hasOwnProperty(o)&&i.hasOwnProperty(o)?e[o]=i[o]:t.hasOwnProperty(o)&&(e[o]=t[o]);return e}(this.options,t))},_.prototype.bindEvt=function(t,i){var e=this;return e._domHandlers_=e._domHandlers_||{},e._domHandlers_[i]=function(){"function"==typeof e["on"+i]?e["on"+i].apply(e,arguments):console.warn(\'[WARNING] : Missing "on\'+i+\'" handler.\')},p(t,o[i],e._domHandlers_[i]),w[i]&&p(t,w[i],e._domHandlers_[i]),e},_.prototype.unbindEvt=function(t,i){return this._domHandlers_=this._domHandlers_||{},c(t,o[i],this._domHandlers_[i]),w[i]&&c(t,w[i],this._domHandlers_[i]),delete this._domHandlers_[i],this};var T=_;function k(t,i){return this.identifier=i.identifier,this.position=i.position,this.frontPosition=i.frontPosition,this.collection=t,this.defaults={size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,mode:"dynamic",zone:document.body,lockX:!1,lockY:!1,shape:"circle"},this.config(i),"dynamic"===this.options.mode&&(this.options.restOpacity=0),this.id=k.id,k.id+=1,this.buildEl().stylize(),this.instance={el:this.ui.el,on:this.on.bind(this),off:this.off.bind(this),show:this.show.bind(this),hide:this.hide.bind(this),add:this.addToDom.bind(this),remove:this.removeFromDom.bind(this),destroy:this.destroy.bind(this),setPosition:this.setPosition.bind(this),resetDirection:this.resetDirection.bind(this),computeDirection:this.computeDirection.bind(this),trigger:this.trigger.bind(this),position:this.position,frontPosition:this.frontPosition,ui:this.ui,identifier:this.identifier,id:this.id,options:this.options},this.instance}k.prototype=new T,k.constructor=k,k.id=0,k.prototype.buildEl=function(t){return this.ui={},this.options.dataOnly?this:(this.ui.el=document.createElement("div"),this.ui.back=document.createElement("div"),this.ui.front=document.createElement("div"),this.ui.el.className="nipple collection_"+this.collection.id,this.ui.back.className="back",this.ui.front.className="front",this.ui.el.setAttribute("id","nipple_"+this.collection.id+"_"+this.id),this.ui.el.appendChild(this.ui.back),this.ui.el.appendChild(this.ui.front),this)},k.prototype.stylize=function(){if(this.options.dataOnly)return this;var t=this.options.fadeTime+"ms",i=function(t,i){var e=y(t);for(var o in e)e.hasOwnProperty(o)&&(e[o]=i);return e}("borderRadius","50%"),e=f("transition","opacity",t),o={};return o.el={position:"absolute",opacity:this.options.restOpacity,display:"block",zIndex:999},o.back={position:"absolute",display:"block",width:this.options.size+"px",height:this.options.size+"px",left:0,marginLeft:-this.options.size/2+"px",marginTop:-this.options.size/2+"px",background:this.options.color,opacity:".5"},o.front={width:this.options.size/2+"px",height:this.options.size/2+"px",position:"absolute",display:"block",left:0,marginLeft:-this.options.size/4+"px",marginTop:-this.options.size/4+"px",background:this.options.color,opacity:".5",transform:"translate(0px, 0px)"},m(o.el,e),"circle"===this.options.shape&&m(o.back,i),m(o.front,i),this.applyStyles(o),this},k.prototype.applyStyles=function(t){for(var i in this.ui)if(this.ui.hasOwnProperty(i))for(var e in t[i])this.ui[i].style[e]=t[i][e];return this},k.prototype.addToDom=function(){return this.options.dataOnly||document.body.contains(this.ui.el)?this:(this.options.zone.appendChild(this.ui.el),this)},k.prototype.removeFromDom=function(){return this.options.dataOnly||!document.body.contains(this.ui.el)?this:(this.options.zone.removeChild(this.ui.el),this)},k.prototype.destroy=function(){clearTimeout(this.removeTimeout),clearTimeout(this.showTimeout),clearTimeout(this.restTimeout),this.trigger("destroyed",this.instance),this.removeFromDom(),this.off()},k.prototype.show=function(t){var i=this;return i.options.dataOnly?i:(clearTimeout(i.removeTimeout),clearTimeout(i.showTimeout),clearTimeout(i.restTimeout),i.addToDom(),i.restCallback(),setTimeout(function(){i.ui.el.style.opacity=1},0),i.showTimeout=setTimeout(function(){i.trigger("shown",i.instance),"function"==typeof t&&t.call(this)},i.options.fadeTime),i)},k.prototype.hide=function(t){var i=this;if(i.options.dataOnly)return i;if(i.ui.el.style.opacity=i.options.restOpacity,clearTimeout(i.removeTimeout),clearTimeout(i.showTimeout),clearTimeout(i.restTimeout),i.removeTimeout=setTimeout(function(){var e="dynamic"===i.options.mode?"none":"block";i.ui.el.style.display=e,"function"==typeof t&&t.call(i),i.trigger("hidden",i.instance)},i.options.fadeTime),i.options.restJoystick){var e=i.options.restJoystick,o={};o.x=!0===e||!1!==e.x?0:i.instance.frontPosition.x,o.y=!0===e||!1!==e.y?0:i.instance.frontPosition.y,i.setPosition(t,o)}return i},k.prototype.setPosition=function(t,i){var e=this;e.frontPosition={x:i.x,y:i.y};var o=e.options.fadeTime+"ms",n={};n.front=f("transition",["transform"],o);var s={front:{}};s.front={transform:"translate("+e.frontPosition.x+"px,"+e.frontPosition.y+"px)"},e.applyStyles(n),e.applyStyles(s),e.restTimeout=setTimeout(function(){"function"==typeof t&&t.call(e),e.restCallback()},e.options.fadeTime)},k.prototype.restCallback=function(){var t={};t.front=f("transition","none",""),this.applyStyles(t),this.trigger("rested",this.instance)},k.prototype.resetDirection=function(){this.direction={x:!1,y:!1,angle:!1}},k.prototype.computeDirection=function(t){var i,e,o,n=t.angle.radian,s=Math.PI/4,r=Math.PI/2;if(n>s&&n<3*s&&!t.lockX?i="up":n>-s&&n<=s&&!t.lockY?i="left":n>3*-s&&n<=-s&&!t.lockX?i="down":t.lockY||(i="right"),t.lockY||(e=n>-r&&n<r?"left":"right"),t.lockX||(o=n>0?"up":"down"),t.force>this.options.threshold){var d,a={};for(d in this.direction)this.direction.hasOwnProperty(d)&&(a[d]=this.direction[d]);var p={};for(d in this.direction={x:e,y:o,angle:i},t.direction=this.direction,a)a[d]===this.direction[d]&&(p[d]=!0);if(p.x&&p.y&&p.angle)return t;p.x&&p.y||this.trigger("plain",t),p.x||this.trigger("plain:"+e,t),p.y||this.trigger("plain:"+o,t),p.angle||this.trigger("dir dir:"+i,t)}else this.resetDirection();return t};var P=k;function E(t,i){this.nipples=[],this.idles=[],this.actives=[],this.ids=[],this.pressureIntervals={},this.manager=t,this.id=E.id,E.id+=1,this.defaults={zone:document.body,multitouch:!1,maxNumberOfNipples:10,mode:"dynamic",position:{top:0,left:0},catchDistance:200,size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,lockX:!1,lockY:!1,shape:"circle",dynamicPage:!1,follow:!1},this.config(i),"static"!==this.options.mode&&"semi"!==this.options.mode||(this.options.multitouch=!1),this.options.multitouch||(this.options.maxNumberOfNipples=1);var e=getComputedStyle(this.options.zone.parentElement);return e&&"flex"===e.display&&(this.parentIsFlex=!0),this.updateBox(),this.prepareNipples(),this.bindings(),this.begin(),this.nipples}E.prototype=new T,E.constructor=E,E.id=0,E.prototype.prepareNipples=function(){var t=this.nipples;t.on=this.on.bind(this),t.off=this.off.bind(this),t.options=this.options,t.destroy=this.destroy.bind(this),t.ids=this.ids,t.id=this.id,t.processOnMove=this.processOnMove.bind(this),t.processOnEnd=this.processOnEnd.bind(this),t.get=function(i){if(void 0===i)return t[0];for(var e=0,o=t.length;e<o;e+=1)if(t[e].identifier===i)return t[e];return!1}},E.prototype.bindings=function(){this.bindEvt(this.options.zone,"start"),this.options.zone.style.touchAction="none",this.options.zone.style.msTouchAction="none"},E.prototype.begin=function(){var t=this.options;if("static"===t.mode){var i=this.createNipple(t.position,this.manager.getIdentifier());i.add(),this.idles.push(i)}},E.prototype.createNipple=function(t,i){var e=this.manager.scroll,o={},n=this.options,s=this.parentIsFlex?e.x:e.x+this.box.left,r=this.parentIsFlex?e.y:e.y+this.box.top;if(t.x&&t.y)o={x:t.x-s,y:t.y-r};else if(t.top||t.right||t.bottom||t.left){var d=document.createElement("DIV");d.style.display="hidden",d.style.top=t.top,d.style.right=t.right,d.style.bottom=t.bottom,d.style.left=t.left,d.style.position="absolute",n.zone.appendChild(d);var a=d.getBoundingClientRect();n.zone.removeChild(d),o=t,t={x:a.left+e.x,y:a.top+e.y}}var p=new P(this,{color:n.color,size:n.size,threshold:n.threshold,fadeTime:n.fadeTime,dataOnly:n.dataOnly,restJoystick:n.restJoystick,restOpacity:n.restOpacity,mode:n.mode,identifier:i,position:t,zone:n.zone,frontPosition:{x:0,y:0},shape:n.shape});return n.dataOnly||(u(p.ui.el,o),u(p.ui.front,p.frontPosition)),this.nipples.push(p),this.trigger("added "+p.identifier+":added",p),this.manager.trigger("added "+p.identifier+":added",p),this.bindNipple(p),p},E.prototype.updateBox=function(){this.box=this.options.zone.getBoundingClientRect()},E.prototype.bindNipple=function(t){var i,e=this,o=function(t,o){i=t.type+" "+o.id+":"+t.type,e.trigger(i,o)};t.on("destroyed",e.onDestroyed.bind(e)),t.on("shown hidden rested dir plain",o),t.on("dir:up dir:right dir:down dir:left",o),t.on("plain:up plain:right plain:down plain:left",o)},E.prototype.pressureFn=function(t,i,e){var o=this,n=0;clearInterval(o.pressureIntervals[e]),o.pressureIntervals[e]=setInterval(function(){var e=t.force||t.pressure||t.webkitForce||0;e!==n&&(i.trigger("pressure",e),o.trigger("pressure "+i.identifier+":pressure",e),n=e)}.bind(o),100)},E.prototype.onstart=function(t){var i=this,e=i.options,o=t;t=l(t),i.updateBox();return v(t,function(n){i.actives.length<e.maxNumberOfNipples?i.processOnStart(n):o.type.match(/^touch/)&&(Object.keys(i.manager.ids).forEach(function(e){if(Object.values(o.touches).findIndex(function(t){return t.identifier===e})<0){var n=[t[0]];n.identifier=e,i.processOnEnd(n)}}),i.actives.length<e.maxNumberOfNipples&&i.processOnStart(n))}),i.manager.bindDocument(),!1},E.prototype.processOnStart=function(t){var i,e=this,o=e.options,s=e.manager.getIdentifier(t),r=t.force||t.pressure||t.webkitForce||0,d={x:t.pageX,y:t.pageY},a=e.getOrCreate(s,d);a.identifier!==s&&e.manager.removeIdentifier(a.identifier),a.identifier=s;var p=function(i){i.trigger("start",i),e.trigger("start "+i.id+":start",i),i.show(),r>0&&e.pressureFn(t,i,i.identifier),e.processOnMove(t)};if((i=e.idles.indexOf(a))>=0&&e.idles.splice(i,1),e.actives.push(a),e.ids.push(a.identifier),"semi"!==o.mode)p(a);else{if(!(n(d,a.position)<=o.catchDistance))return a.destroy(),void e.processOnStart(t);p(a)}return a},E.prototype.getOrCreate=function(t,i){var e,o=this.options;return/(semi|static)/.test(o.mode)?(e=this.idles[0])?(this.idles.splice(0,1),e):"semi"===o.mode?this.createNipple(i,t):(console.warn("Coudln\'t find the needed nipple."),!1):e=this.createNipple(i,t)},E.prototype.processOnMove=function(t){var i=this.options,e=this.manager.getIdentifier(t),o=this.nipples.get(e),d=this.manager.scroll;if(function(t){return isNaN(t.buttons)?0!==t.pressure:0!==t.buttons}(t)){if(!o)return console.error("Found zombie joystick with ID "+e),void this.manager.removeIdentifier(e);if(i.dynamicPage){var a=o.el.getBoundingClientRect();o.position={x:d.x+a.left,y:d.y+a.top}}o.identifier=e;var p=o.options.size/2,c={x:t.pageX,y:t.pageY};i.lockX&&(c.y=o.position.y),i.lockY&&(c.x=o.position.x);var l,h,u,f,y,m,v,g,b,x,O=n(c,o.position),w=(l=c,h=o.position,u=h.x-l.x,f=h.y-l.y,r(Math.atan2(f,u))),_=s(w),T=O/p,k={distance:O,position:c};if("circle"===o.options.shape?(y=Math.min(O,p),v=o.position,g=y,x={x:0,y:0},b=s(b=w),x.x=v.x-g*Math.cos(b),x.y=v.y-g*Math.sin(b),m=x):(m=function(t,i,e){return{x:Math.min(Math.max(t.x,i.x-e),i.x+e),y:Math.min(Math.max(t.y,i.y-e),i.y+e)}}(c,o.position,p),y=n(m,o.position)),i.follow){if(O>p){var P=c.x-m.x,E=c.y-m.y;o.position.x+=P,o.position.y+=E,o.el.style.top=o.position.y-(this.box.top+d.y)+"px",o.el.style.left=o.position.x-(this.box.left+d.x)+"px",O=n(c,o.position)}}else c=m,O=y;var I=c.x-o.position.x,z=c.y-o.position.y;o.frontPosition={x:I,y:z},i.dataOnly||(o.ui.front.style.transform="translate("+I+"px,"+z+"px)");var D={identifier:o.identifier,position:c,force:T,pressure:t.force||t.pressure||t.webkitForce||0,distance:O,angle:{radian:_,degree:w},vector:{x:I/p,y:-z/p},raw:k,instance:o,lockX:i.lockX,lockY:i.lockY};(D=o.computeDirection(D)).angle={radian:s(180-w),degree:180-w},o.trigger("move",D),this.trigger("move "+o.id+":move",D)}else this.processOnEnd(t)},E.prototype.processOnEnd=function(t){var i=this,e=i.options,o=i.manager.getIdentifier(t),n=i.nipples.get(o),s=i.manager.removeIdentifier(n.identifier);n&&(e.dataOnly||n.hide(function(){"dynamic"===e.mode&&(n.trigger("removed",n),i.trigger("removed "+n.id+":removed",n),i.manager.trigger("removed "+n.id+":removed",n),n.destroy())}),clearInterval(i.pressureIntervals[n.identifier]),n.resetDirection(),n.trigger("end",n),i.trigger("end "+n.id+":end",n),i.ids.indexOf(n.identifier)>=0&&i.ids.splice(i.ids.indexOf(n.identifier),1),i.actives.indexOf(n)>=0&&i.actives.splice(i.actives.indexOf(n),1),/(semi|static)/.test(e.mode)?i.idles.push(n):i.nipples.indexOf(n)>=0&&i.nipples.splice(i.nipples.indexOf(n),1),i.manager.unbindDocument(),/(semi|static)/.test(e.mode)&&(i.manager.ids[s.id]=s.identifier))},E.prototype.onDestroyed=function(t,i){this.nipples.indexOf(i)>=0&&this.nipples.splice(this.nipples.indexOf(i),1),this.actives.indexOf(i)>=0&&this.actives.splice(this.actives.indexOf(i),1),this.idles.indexOf(i)>=0&&this.idles.splice(this.idles.indexOf(i),1),this.ids.indexOf(i.identifier)>=0&&this.ids.splice(this.ids.indexOf(i.identifier),1),this.manager.removeIdentifier(i.identifier),this.manager.unbindDocument()},E.prototype.destroy=function(){for(var t in this.unbindEvt(this.options.zone,"start"),this.nipples.forEach(function(t){t.destroy()}),this.pressureIntervals)this.pressureIntervals.hasOwnProperty(t)&&clearInterval(this.pressureIntervals[t]);this.trigger("destroyed",this.nipples),this.manager.unbindDocument(),this.off()};var I=E;function z(t){var i=this;i.ids={},i.index=0,i.collections=[],i.scroll=h(),i.config(t),i.prepareCollections();var e=function(){var t;i.collections.forEach(function(e){e.forEach(function(e){t=e.el.getBoundingClientRect(),e.position={x:i.scroll.x+t.left,y:i.scroll.y+t.top}})})};p(window,"resize",function(){a(e)});var o=function(){i.scroll=h()};return p(window,"scroll",function(){a(o)}),i.collections}z.prototype=new T,z.constructor=z,z.prototype.prepareCollections=function(){var t=this;t.collections.create=t.create.bind(t),t.collections.on=t.on.bind(t),t.collections.off=t.off.bind(t),t.collections.destroy=t.destroy.bind(t),t.collections.get=function(i){var e;return t.collections.every(function(t){return!(e=t.get(i))}),e}},z.prototype.create=function(t){return this.createCollection(t)},z.prototype.createCollection=function(t){var i=new I(this,t);return this.bindCollection(i),this.collections.push(i),i},z.prototype.bindCollection=function(t){var i,e=this,o=function(t,o){i=t.type+" "+o.id+":"+t.type,e.trigger(i,o)};t.on("destroyed",e.onDestroyed.bind(e)),t.on("shown hidden rested dir plain",o),t.on("dir:up dir:right dir:down dir:left",o),t.on("plain:up plain:right plain:down plain:left",o)},z.prototype.bindDocument=function(){this.binded||(this.bindEvt(document,"move").bindEvt(document,"end"),this.binded=!0)},z.prototype.unbindDocument=function(t){Object.keys(this.ids).length&&!0!==t||(this.unbindEvt(document,"move").unbindEvt(document,"end"),this.binded=!1)},z.prototype.getIdentifier=function(t){var i;return t?void 0===(i=void 0===t.identifier?t.pointerId:t.identifier)&&(i=this.latest||0):i=this.index,void 0===this.ids[i]&&(this.ids[i]=this.index,this.index+=1),this.latest=i,this.ids[i]},z.prototype.removeIdentifier=function(t){var i={};for(var e in this.ids)if(this.ids[e]===t){i.id=e,i.identifier=this.ids[e],delete this.ids[e];break}return i},z.prototype.onmove=function(t){return this.onAny("move",t),!1},z.prototype.onend=function(t){return this.onAny("end",t),!1},z.prototype.oncancel=function(t){return this.onAny("end",t),!1},z.prototype.onAny=function(t,i){var e,o=this,n="processOn"+t.charAt(0).toUpperCase()+t.slice(1);i=l(i);return v(i,function(t){e=o.getIdentifier(t),v(o.collections,function(t,i,e){e.ids.indexOf(i)>=0&&(e[n](t),t._found_=!0)}.bind(null,t,e)),t._found_||o.removeIdentifier(e)}),!1},z.prototype.destroy=function(){this.unbindDocument(!0),this.ids={},this.index=0,this.collections.forEach(function(t){t.destroy()}),this.off()},z.prototype.onDestroyed=function(t,i){if(this.collections.indexOf(i)<0)return!1;this.collections.splice(this.collections.indexOf(i),1)};var D=new z;i.default={create:function(t){return D.create(t)},factory:D}}]).default});\n\n//# sourceURL=webpack://polyfight.io/./node_modules/nipplejs/dist/nipplejs.js?')},"./views/ts/auth/firebase.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst firebase = {\n    /** @ts-ignore */\n    app: window.app,\n    /** @ts-ignore */\n    auth: window.auth,\n    /** @ts-ignore */\n    provider: window.provider,\n    /** @ts-ignore */\n    GoogleAuthProvider: window.GoogleAuthProvider,\n    /** @ts-ignore */\n    signInWithPopup: window.signInWithPopup,\n    /** @ts-ignore */\n    signOut: window.signOut,\n    /** @ts-ignore */\n    onAuthStateChanged: window.onAuthStateChanged\n};\nexports["default"] = firebase;\n// import { initializeApp } from "firebase/app";\n// import { getAuth, GoogleAuthProvider } from "firebase/auth";\n// const config =\n// {\n//   apiKey: "AIzaSyBbR5yN4hLypajOsueT-vVrsgzZ1deDECg",\n//   authDomain: "polyfight-2194d.firebaseapp.com",\n//   projectId: "polyfight-2194d",\n//   storageBucket: "polyfight-2194d.appspot.com",\n//   messagingSenderId: "886791940438",\n//   appId: "1:886791940438:web:ab0300c72d0962c3cfcef7",\n//   measurementId: "G-GT6XWXDQ8X"\n// };\n// const app = initializeApp(config);\n// const auth = getAuth(app);\n// const provider = new GoogleAuthProvider();\n// export { auth, provider };\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/auth/firebase.ts?')},"./views/ts/client.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst websocket_1 = __importDefault(__webpack_require__(/*! ./connection/websocket */ "./views/ts/connection/websocket.ts"));\nconst tank_entity_1 = __importDefault(__webpack_require__(/*! ./entity/tank_entity */ "./views/ts/entity/tank_entity.ts"));\nconst canvas_1 = __importDefault(__webpack_require__(/*! ./rendering/canvas */ "./views/ts/rendering/canvas.ts"));\nconst elements_1 = __importDefault(__webpack_require__(/*! ./rendering/elements */ "./views/ts/rendering/elements.ts"));\n/** A representation of the client. */\nclass Client {\n    constructor() {\n        /** The media assets the game will use. */\n        this.assets = {\n            /** The images the game will use. */\n            images: {\n                home: new Image(0, 0)\n            },\n        };\n        /** The canvas the client draws ON */\n        this.polyfight_canvas = new canvas_1.default(this);\n        /** The entity the client is playing as. */\n        this.entity = new tank_entity_1.default(this);\n        /** The websocket connection to the server. */\n        this.polyfight_connection = new websocket_1.default(this);\n        /** The HTML elements the client handles. */\n        this.polyfight_elements = new elements_1.default(this);\n        /** The configuration of the game server the entity is playing in. */\n        this.game_server_config = {\n            arena_size: 0,\n            wanted_shape_count: 0\n        };\n        /** Load the media assets. */\n        this.assets.images.home.src = "/views/public/assets/images/background.png";\n    }\n    ;\n}\nexports["default"] = Client;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/client.ts?')},"./views/ts/connection/packets.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\nconst stream_1 = __importDefault(__webpack_require__(/*! ./stream */ "./views/ts/connection/stream.ts"));\nconst enums_1 = __webpack_require__(/*! ../const/enums */ "./views/ts/const/enums.ts");\nconst tank_entity_1 = __importDefault(__webpack_require__(/*! ../entity/tank_entity */ "./views/ts/entity/tank_entity.ts"));\nconst shape_entity_1 = __importDefault(__webpack_require__(/*! ../entity/shape_entity */ "./views/ts/entity/shape_entity.ts"));\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst projectile_entity_1 = __importDefault(__webpack_require__(/*! ../entity/projectile_entity */ "./views/ts/entity/projectile_entity.ts"));\nconst vector_1 = __importDefault(__webpack_require__(/*! ../utils/vector */ "./views/ts/utils/vector.ts"));\n/** A representation of a packet parser/sender. */\nclass PacketHandler {\n    constructor(manager) {\n        this.initial_packet = true;\n        this.manager = manager;\n        this.stream = new stream_1.default(manager.cipher);\n    }\n    ;\n    /** Sends the existing message in the stream. */\n    send(stream, transcode = true) {\n        var _a;\n        if (((_a = this.manager.polyfight_connection) === null || _a === void 0 ? void 0 : _a.readyState) == WebSocket.OPEN) {\n            if (transcode)\n                stream.transcode(stream.index);\n            const buffer = stream.out();\n            this.manager.polyfight_connection.send(buffer);\n        }\n    }\n    ;\n    /**\n     * Writes a SPAWN packet.\n     * u8(0x0) vu(build_num) string(name)\n    */\n    write_spawn(build_num, name, fingerprint) {\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.Spawn);\n        stream.write_varuint(build_num);\n        const buffer = new TextEncoder().encode(name).buffer;\n        let name_length = (0, functions_1.constrain)(0, buffer.byteLength, consts_1.MAX_NAME_LENGTH);\n        stream.write_varuint(name_length);\n        const buffer_view = new Uint8Array(buffer);\n        for (let i = 0; i < name_length; i++)\n            stream.buffer.setUint8(stream.index + i, buffer_view[i]);\n        stream.index += buffer.byteLength;\n        stream.write_string(fingerprint);\n        let left = Math.floor(consts_1.BUILD_ID / 2);\n        for (let i = 0; i < left; ++i)\n            stream.write_uint8((Math.random() * 256) | 0);\n        stream.write_uint32(this.manager.cipher);\n        let right = consts_1.BUILD_ID - left;\n        for (let i = 0; i < right; ++i)\n            stream.write_uint8((Math.random() * 256) | 0);\n        this.send(stream);\n        window.localStorage.setItem("name", name);\n    }\n    ;\n    /**\n     * Writes an INPUT packet.\n     * u8(0x1) vu(flags)\n     */\n    write_input(flags, mouse) {\n        if (this.manager.client.entity.dying_phase)\n            return;\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.Input);\n        stream.write_varuint(flags);\n        stream.write_float32(mouse.x);\n        stream.write_float32(mouse.y);\n        this.send(stream);\n    }\n    ;\n    /**\n     * Writes a STAT packet.\n     * u8(0x2) u8(stat_id)\n     */\n    write_stat(stat_id) {\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.Stat);\n        stream.write_uint8(stat_id);\n        this.send(stream);\n    }\n    /**\n     * Writes an UPGRADES packet.\n     * u8(0x3) u8(upgrade_id)\n     * */\n    write_upgrade(upgrade_id) {\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.Upgrades);\n        stream.write_uint8(upgrade_id);\n        this.send(stream);\n    }\n    ;\n    /**\n     * Writes a CHAT packet.\n     * u8(0x4) string(message)\n     */\n    write_chat(message, force_null = false) {\n        message = message.trim();\n        if (!force_null && message.length == 0)\n            return;\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.Chat);\n        const buffer = new TextEncoder().encode(message).buffer;\n        let message_length = (0, functions_1.constrain)(0, buffer.byteLength, consts_1.MAX_MESSAGE_LENGTH);\n        stream.write_varuint(message_length);\n        const buffer_view = new Uint8Array(buffer);\n        for (let i = 0; i < message_length; i++)\n            stream.buffer.setUint8(stream.index + i, buffer_view[i]);\n        stream.index += buffer.byteLength;\n        this.send(stream);\n    }\n    ;\n    write_type() {\n        this.write_chat("", true);\n    }\n    /**\n     * Writes a CLAN packet.\n     */\n    write_clan(opcode, ...args) {\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.Clan);\n        stream.write_uint8(opcode);\n        switch (opcode) {\n            case 0x0: // CLAN CREATION\n                {\n                    const clan_name = args[0];\n                    const buffer = new TextEncoder().encode(clan_name).buffer;\n                    let message_length = (0, functions_1.constrain)(0, buffer.byteLength, consts_1.MAX_CLAN_LENGTH);\n                    stream.write_varuint(message_length);\n                    const buffer_view = new Uint8Array(buffer);\n                    for (let i = 0; i < message_length; i++)\n                        stream.buffer.setUint8(stream.index + i, buffer_view[i]);\n                    stream.index += buffer.byteLength;\n                    break;\n                }\n            case 0x1: // CLAN JOIN\n                {\n                    const clan_id = args[0];\n                    stream.write_uint8(clan_id);\n                    break;\n                }\n            case 0x2: // CLAN LEAVE\n                {\n                    break;\n                }\n            case 0x3: // CLAN ACCEPT/DECLINE\n                {\n                    const member_id = args[0];\n                    const accept = args[1];\n                    stream.write_uint32(member_id);\n                    stream.write_uint8(accept ? 1 : 0);\n                    break;\n                }\n            case 0x4: // CLAN KICK\n                {\n                    const player_id = args[0];\n                    stream.write_uint32(player_id);\n                    break;\n                }\n        }\n        this.send(stream);\n    }\n    ;\n    /**\n     * Writes an ARENA_UPDATE packet.\n     */\n    write_arena_update() {\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.ArenaUpdate);\n        /** @ts-ignore */\n        const arena_state = window.arena_state;\n        stream.write_float32(arena_state.ARENA_SIZE);\n        stream.write_uint32(arena_state.WANTED_SHAPE_COUNT);\n        stream.write_uint8(0);\n        // stream.write_uint8(arena_state.BOT_COUNT);\n        stream.write_uint8(arena_state.ALLOW_AUTO_LEVEL_UP);\n        stream.write_uint8(arena_state.ALLOW_TANK_SWITCH);\n        stream.write_uint8(arena_state.ALLOW_GOD_MODE);\n        stream.write_uint8(arena_state.LAST_MAN_STANDING);\n        stream.write_uint8(arena_state.UNLISTED);\n        this.send(stream);\n    }\n    /**\n     * Writes a READY packet.\n     */\n    write_ready(ready) {\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.Ready);\n        stream.write_uint8(ready ? 1 : 0);\n        this.send(stream);\n    }\n    /** Parses any incoming packet. */\n    parse(data) {\n        this.stream = new stream_1.default(this.manager.cipher);\n        this.stream.set_buffer(new DataView(data));\n        if (this.stream.buffer.byteLength == 1 && this.stream.buffer.getUint8(0) == enums_1.IncomingPacketHeader.Pong) {\n            this.parse_pong();\n            return;\n        }\n        if (!this.initial_packet)\n            this.stream.transcode();\n        this.initial_packet = false;\n        const opcode = this.stream.read_uint8();\n        switch (opcode) {\n            case enums_1.IncomingPacketHeader.Update:\n                this.parse_update();\n                break;\n            case enums_1.IncomingPacketHeader.Stat:\n                this.parse_stat();\n                break;\n            case enums_1.IncomingPacketHeader.Upgrades:\n                this.parse_upgrades();\n                break;\n            case enums_1.IncomingPacketHeader.Notification:\n                this.parse_notification();\n                break;\n            case enums_1.IncomingPacketHeader.ServerInfo:\n                this.parse_server_info();\n                break;\n            case enums_1.IncomingPacketHeader.Cipher:\n                this.parse_cipher();\n                break;\n            case enums_1.IncomingPacketHeader.EloChange:\n                this.parse_elo_change();\n                break;\n            // case 0xFF: this.parse_debug(); break;\n            default: return (consts_1.IS_PROD ? console.error("Invalid opcode received.", opcode) : undefined);\n        }\n        ;\n    }\n    ;\n    /**\n     * Parses an UPDATE packet.\n    */\n    parse_update() {\n        var _a, _b;\n        this.manager.client.game_server_config.arena_size = this.stream.read_float32();\n        this.manager.client.game_server_config.wanted_shape_count = this.stream.read_float32();\n        const entity = this.manager.client.entity;\n        const id = this.stream.read_uint32();\n        this.manager.client.entity.id = id;\n        const count = this.stream.read_uint8();\n        for (let i = 0; i < count; i++) {\n            const property = this.stream.read_uint8();\n            entity.census_map.get(property)(entity, this.stream);\n        }\n        ;\n        const entity_count = this.stream.read_uint32();\n        for (let i = 0; i < entity_count; ++i) {\n            const id = this.stream.read_uint32();\n            const entity_type = this.stream.read_uint8();\n            let other = entity.surroundings.find(e => e.id == id);\n            if (other === undefined) {\n                let e;\n                switch (entity_type) {\n                    case enums_1.EntityType.Tank:\n                        e = new tank_entity_1.default(this.manager.client);\n                        break;\n                    case enums_1.EntityType.Shape:\n                        e = new shape_entity_1.default(this.manager.client);\n                        break;\n                    case enums_1.EntityType.Projectile:\n                        e = new projectile_entity_1.default(this.manager.client);\n                        break;\n                    default: return (consts_1.IS_PROD ? console.error("Invalid entity type received.", entity_type) : undefined);\n                }\n                e.type = entity_type;\n                e.id = id;\n                entity.surroundings.push(e);\n                other = e;\n            }\n            else if (other.type != entity_type || other.dying_phase != enums_1.DyingPhase.Alive) {\n                let e;\n                switch (entity_type) {\n                    case enums_1.EntityType.Tank:\n                        e = new tank_entity_1.default(this.manager.client);\n                        break;\n                    case enums_1.EntityType.Shape:\n                        e = new shape_entity_1.default(this.manager.client);\n                        break;\n                    case enums_1.EntityType.Projectile:\n                        e = new projectile_entity_1.default(this.manager.client);\n                        break;\n                    default: return (consts_1.IS_PROD ? console.error("Invalid entity type received.", entity_type) : undefined);\n                }\n                e.type = entity_type;\n                e.id = id;\n                entity.surroundings[entity.surroundings.indexOf(other)] = e;\n                other = e;\n            }\n            const count = this.stream.read_uint8();\n            if (count == 0) {\n                if (other.dying_phase != enums_1.DyingPhase.Dying) {\n                    other.dying_phase = enums_1.DyingPhase.Dying;\n                    other.target_radius = other.radius * (other.id == this.manager.client.entity.id ? 3.0 : 1.5);\n                }\n                else\n                    other.dying_phase = enums_1.DyingPhase.Dead;\n                continue;\n            }\n            else {\n                other.updated = true;\n                other.revive();\n            }\n            ;\n            for (let i = 0; i < count; i++) {\n                const property = this.stream.read_uint8();\n                other.census_map.get(property)(other, this.stream);\n            }\n            ;\n        }\n        ;\n        for (const e of entity.surroundings) {\n            if (!e.updated && e.dying_phase == enums_1.DyingPhase.Alive) {\n                e.target_radius = e.radius * (e.id == this.manager.client.entity.id ? 3.0 : 1.5);\n                e.dying_phase = enums_1.DyingPhase.Dying;\n            }\n        }\n        entity.surroundings = entity.surroundings.filter(e => e.updated || (e.dying_phase == enums_1.DyingPhase.Dying && (e.target_radius = e.radius * (e.id == this.manager.client.entity.id ? 3.0 : 1.5))));\n        entity.surroundings.forEach(e => e.updated = false);\n        const client = this.manager.client;\n        let leader_direction = this.stream.read_float32();\n        if (leader_direction == 0xc8) {\n            client.polyfight_canvas.leader_direction = null;\n        }\n        else {\n            client.polyfight_canvas.leader_direction = leader_direction;\n        }\n        ;\n        const scoreboard_len = this.stream.read_uint8();\n        const scoreboard = client.polyfight_canvas.scoreboard;\n        const new_scoreboard = [];\n        for (let i = 0; i < scoreboard_len; ++i) {\n            const data_score = this.stream.read_float32();\n            const name = this.stream.read_string();\n            const id = this.stream.read_uint32();\n            const entity_identity = this.stream.read_uint8();\n            let score = data_score, target_score = data_score;\n            let entry = scoreboard.find(e => e.id == id);\n            if (entry !== undefined) {\n                score = (0, functions_1.lerp)(entry.score, 0.4, target_score);\n                score = (0, functions_1.constrain)(0, score, target_score);\n            }\n            new_scoreboard.push({ name, score, target_score, id, identity: entity_identity });\n        }\n        ;\n        client.polyfight_canvas.scoreboard = new_scoreboard;\n        const clans_length = this.stream.read_uint8();\n        const clans = [];\n        for (let i = 0; i < clans_length; ++i) {\n            const id = this.stream.read_uint8();\n            const name = this.stream.read_string();\n            const owner = this.stream.read_uint32();\n            const members_length = this.stream.read_uint32();\n            const members = [];\n            for (let j = 0; j < members_length; ++j) {\n                const member_id = this.stream.read_uint32();\n                const member_name = this.stream.read_string();\n                const position_x = this.stream.read_float32();\n                const position_y = this.stream.read_float32();\n                const position = new vector_1.default(position_x, position_y);\n                let distressed = !!this.stream.read_uint8();\n                let leaving = !!this.stream.read_uint8();\n                let previous = (_a = client.polyfight_canvas.clans.find(e => e.id == id)) === null || _a === void 0 ? void 0 : _a.members.find(e => e.id == member_id);\n                if (previous != undefined) {\n                    position.x = (0, functions_1.lerp)(previous.position.x, 0.4, position.x);\n                    position.y = (0, functions_1.lerp)(previous.position.y, 0.4, position.y);\n                    if (previous.leaving === null)\n                        leaving = null;\n                    if (leaving === false)\n                        leaving = false;\n                }\n                members.push({ id: member_id, name: member_name, owner: member_id == owner, position, distressed, leaving });\n            }\n            ;\n            const pending_members_length = this.stream.read_uint32();\n            const pending_members = [];\n            for (let j = 0; j < pending_members_length; ++j) {\n                const member_id = this.stream.read_uint32();\n                const member_name = this.stream.read_string();\n                pending_members.push({ id: member_id, name: member_name });\n            }\n            ;\n            clans.push({ id, name, owner, members, pending_members, trying_to_join: ((_b = client.polyfight_canvas.clans[i]) === null || _b === void 0 ? void 0 : _b.trying_to_join) || false });\n        }\n        client.polyfight_canvas.clans = clans;\n    }\n    ;\n    /**\n     * Parses a STAT packet.\n     * Format: u8(0x1) u8(available_stat_points) u8(stats_len) [u8(current_stat_investment) u8(max_stat_investment)]\n     */\n    parse_stat() {\n        const client = this.manager.client;\n        const available_stat_points = this.stream.read_uint8();\n        const stats_len = this.stream.read_uint8();\n        client.polyfight_canvas.stats.available_stat_points = available_stat_points;\n        for (const button of client.polyfight_canvas.stats_buttons) {\n            if (!button)\n                continue;\n            button.disabled = !(available_stat_points > 0);\n        }\n        // todo: stats dont change when switching tanks\n        for (let i = 0; i < stats_len; ++i) {\n            const current_stat_investment = this.stream.read_uint8();\n            const max_stat_investment = this.stream.read_uint8();\n            client.polyfight_canvas.stats.stats_value[i] = current_stat_investment;\n        }\n    }\n    /**\n     * Parses an UPGRADES packet.\n     * Format: u8(0x2) u8(available_stat_points) u8(stats_len) [u8(current_stat_investment) u8(max_stat_investment)]\n     */\n    parse_upgrades() {\n        const client = this.manager.client;\n        const num_upgrades = this.stream.read_uint8();\n        client.polyfight_canvas.upgrade_tanks.current_upgrades = [];\n        for (let i = 0; i < num_upgrades; ++i) {\n            const upgrade = this.stream.read_uint8();\n            client.polyfight_canvas.upgrade_tanks.current_upgrades[i] = upgrade;\n        }\n    }\n    /**\n     * Parses a NOTIFICATION packet.\n     * Format: u8(0x3) string(message) u8(r) u8(g) u8(b)\n     */\n    parse_notification() {\n        const message = this.stream.read_string();\n        const r = this.stream.read_uint8();\n        const g = this.stream.read_uint8();\n        const b = this.stream.read_uint8();\n        this.manager.client.polyfight_canvas.add_notification({ message, r, g, b });\n        // this.manager.client.canvas.notification(message, r, g, b);\n    }\n    ;\n    parse_server_info() {\n        const server_player_count = this.stream.read_uint32();\n        const total_player_count = this.stream.read_uint32();\n        const mspt = this.stream.read_float32();\n        this.manager.client.polyfight_canvas.player_count = { server: server_player_count, global: total_player_count };\n        this.manager.target_mspt = mspt;\n    }\n    ;\n    parse_cipher() {\n        let left = Math.floor(consts_1.BUILD_ID / 2);\n        for (let i = 0; i < left; ++i)\n            this.stream.read_uint8();\n        this.manager.cipher = this.stream.read_uint32();\n        let right = consts_1.BUILD_ID - left;\n        for (let i = 0; i < right; ++i)\n            this.stream.read_uint8();\n        const stream = new stream_1.default(this.manager.cipher);\n        stream.write_uint8(enums_1.OutgoingPacketHeader.Ping);\n        this.send(stream, false);\n        this.manager.last_ping = performance.now();\n    }\n    parse_elo_change() {\n        let self_old = this.stream.read_float32();\n        let self_new = this.stream.read_float32();\n        let other_old = this.stream.read_float32();\n        let other_new = this.stream.read_float32();\n        this.manager.elo_changes = [[self_old, self_new], [other_old, other_new]];\n    }\n    /** Parses a PONG packet. */\n    parse_pong() {\n        // todo: clans need to show for both players\n        let latency = performance.now() - this.manager.last_ping;\n        this.manager.target_latency = latency;\n        setTimeout(() => {\n            this.manager.last_ping = performance.now();\n            const stream = new stream_1.default(this.manager.cipher);\n            stream.write_uint8(enums_1.OutgoingPacketHeader.Ping);\n            this.send(stream, false);\n        }, 500);\n    }\n    ;\n}\nexports["default"] = PacketHandler;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/connection/packets.ts?')},"./views/ts/connection/stream.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\n/** The maximum size of the buffer. */\nconst MAX_BUFFER_SIZE = 8192; // 2 ** 13\nconst CACHED_TEXT_DECODER = new TextDecoder();\nconst CACHED_TEXT_ENCODER = new TextEncoder();\nfunction fnv_1a(data) {\n    let hash = 2576945811;\n    for (let i = 0; i < data.length; i++) {\n        hash ^= data[i] >>> 0;\n        hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    return hash >>> 0;\n}\n;\nfunction u32_to_le_bytes(value) {\n    return new Uint8Array([\n        value & 0xFF,\n        (value >>> 8) & 0xFF,\n        (value >>> 16) & 0xFF,\n        (value >>> 24) & 0xFF\n    ]);\n}\n;\nfunction bitwise_multiply(a, b) {\n    a = a >>> 0;\n    b = b >>> 0;\n    let result = 0;\n    while (b > 0) {\n        if (b & 1)\n            result = bitwise_add(result, a);\n        a = a << 1;\n        b = b >>> 1;\n    }\n    return result >>> 0;\n}\nfunction bitwise_add(x, y) {\n    while (y !== 0) {\n        let carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}\n/** Encryption/decryption mechanism. */\nclass LCG {\n    constructor(cipher) {\n        this.seed = fnv_1a(u32_to_le_bytes(cipher));\n        this.modulus = 0x1000000;\n        this.multiplier = this.seed >>> consts_1.ASPEKT;\n        this.increment = this.seed >>> consts_1.BLAUKANONENKUGEL;\n    }\n    ;\n    next() {\n        // this.seed = bitwise_add(bitwise_multiply(this.seed, this.multiplier), this.increment) & (this.modulus - 1);\n        this.seed = (this.seed * this.multiplier) >>> 0;\n        this.seed = (this.seed + this.increment) >>> 0;\n        this.seed = this.seed & (this.modulus - 1);\n        return this.seed;\n    }\n}\n;\n/** A representation of a binary encoder/decoder. */\nclass SwiftStream {\n    constructor(cipher, buffer) {\n        /** The buffer to read from/write to. */\n        this.buffer = new DataView(new ArrayBuffer(MAX_BUFFER_SIZE));\n        /** The current position in the buffer. */\n        this.index = 0;\n        if (buffer)\n            this.buffer = buffer;\n        this.cipher = cipher;\n        this.lcg = new LCG(cipher);\n    }\n    ;\n    /** Transcodes the buffer. */\n    transcode(length = this.buffer.byteLength) {\n        for (let i = 0; i < length; i++) {\n            let byte = this.buffer.getUint8(i);\n            byte ^= this.lcg.next();\n            this.buffer.setUint8(i, byte);\n        }\n    }\n    ;\n    /** Reads a Uint8 type from the buffer. */\n    read_uint8() {\n        return this.buffer.getUint8(this.index++);\n    }\n    ;\n    /** Reads a Uint16 type from the buffer. */\n    read_uint16() {\n        let value = this.buffer.getUint16(this.index);\n        this.index += 2;\n        return value;\n    }\n    ;\n    /** Reads a Uint32 type from the buffer. */\n    read_uint32() {\n        let value = this.buffer.getUint32(this.index);\n        this.index += 4;\n        return value;\n    }\n    ;\n    /** Reads a Float32 type from the buffer. */\n    read_float32() {\n        let value = this.buffer.getFloat32(this.index);\n        this.index += 4;\n        return value;\n    }\n    ;\n    /** Reads a VarUint type from the buffer (specifically a LEB128). */\n    read_varuint() {\n        let result = 0;\n        let shift = 0;\n        let byte;\n        do {\n            byte = this.read_uint8();\n            result |= (byte & 0x7F) << shift;\n            shift += 7;\n        } while (byte & 0x80);\n        return result;\n    }\n    ;\n    /** Reads a string from the buffer. */\n    read_string() {\n        const length = this.read_varuint();\n        const string = CACHED_TEXT_DECODER.decode(this.buffer.buffer.slice(this.index, this.index + length));\n        this.index += length;\n        return string;\n    }\n    ;\n    /** Writes a Uint8 type to the buffer. */\n    write_uint8(value) {\n        this.buffer.setUint8(this.index++, value);\n    }\n    ;\n    /** Writes a Uint16 type to the buffer. */\n    write_uint16(value) {\n        this.buffer.setUint16(this.index, value);\n        this.index += 2;\n    }\n    ;\n    /** Writes a Uint32 type to the buffer. */\n    write_uint32(value) {\n        this.buffer.setUint32(this.index, value);\n        this.index += 4;\n    }\n    ;\n    /** Writes a Float32 type to the buffer. */\n    write_float32(value) {\n        this.buffer.setFloat32(this.index, value);\n        this.index += 4;\n    }\n    ;\n    /** Writes a VarUint type to the buffer (specifically a LEB128). */\n    write_varuint(value) {\n        do {\n            let byte = value & 127;\n            value >>= 7;\n            if (value)\n                byte |= 128;\n            this.write_uint8(byte);\n        } while (value);\n    }\n    ;\n    /** Writes a string to the buffer. */\n    write_string(value) {\n        const buffer = CACHED_TEXT_ENCODER.encode(value).buffer;\n        this.write_varuint(buffer.byteLength);\n        const buffer_view = new Uint8Array(buffer);\n        for (let i = 0; i < buffer.byteLength; i++)\n            this.buffer.setUint8(this.index + i, buffer_view[i]);\n        this.index += buffer.byteLength;\n    }\n    ;\n    /** Outputs the buffer as a Uint8Array, then resets it. */\n    out() {\n        const buffer = new Uint8Array(this.buffer.buffer.slice(0, this.index));\n        this.buffer = new DataView(new ArrayBuffer(MAX_BUFFER_SIZE));\n        this.index = 0;\n        return buffer;\n    }\n    ;\n    /** Sets the buffer. */\n    set_buffer(buffer) {\n        this.buffer = buffer;\n        this.index = 0;\n    }\n    ;\n}\nexports["default"] = SwiftStream;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/connection/stream.ts?')},"./views/ts/connection/websocket.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst firebase_1 = __importDefault(__webpack_require__(/*! ../auth/firebase */ "./views/ts/auth/firebase.ts"));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\nconst enums_1 = __webpack_require__(/*! ../const/enums */ "./views/ts/const/enums.ts");\nconst tank_entity_1 = __importDefault(__webpack_require__(/*! ../entity/tank_entity */ "./views/ts/entity/tank_entity.ts"));\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst packets_1 = __importDefault(__webpack_require__(/*! ./packets */ "./views/ts/connection/packets.ts"));\nconst { auth } = firebase_1.default;\nconst MAX_RETRIES = 5;\n/** A class which represents the WebSocket connection between the client and the server. */\nclass WebSocketManager {\n    get current_server() {\n        return this.servers.find(server => server.id === window.location.hash.slice(1).split("?")[0]);\n    }\n    get is_ranked() {\n        return this.client.polyfight_elements.get_query_variable(window.location.hash.split("?")[1], "ranked") == "true";\n    }\n    get is_host() {\n        var _a, _b, _c;\n        return ((_a = auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) && ((_b = this.current_server) === null || _b === void 0 ? void 0 : _b.host) == ((_c = auth.currentUser) === null || _c === void 0 ? void 0 : _c.uid);\n    }\n    calculate_latency() {\n        this.latency = (0, functions_1.lerp)(this.latency, 0.1, this.target_latency);\n        return this.latency;\n    }\n    lerp_mspt() {\n        this.mspt = (0, functions_1.lerp)(this.mspt, 0.1, this.target_mspt);\n        return this.mspt;\n    }\n    constructor(client) {\n        /** The WebSocket connection. */\n        this.polyfight_connection = null;\n        /** The packet handler. */\n        this.packet_handler = new packets_1.default(this);\n        /** Whether or not the connection has been established. */\n        this.connected = false;\n        /** The number of retries which have been made for the connection. */\n        this.retries = 0;\n        /** Whether or not the connection has failed. */\n        this.failed = false;\n        /** The last timestamp when a ping was sent. */\n        this.last_ping = 0;\n        /** The latency of the client. */\n        this.latency = 0;\n        /** The target latency. */\n        this.target_latency = 0;\n        /** The mspt of the server. */\n        this.mspt = 0;\n        /** The target mspt of the client. */\n        this.target_mspt = 0;\n        this.in_1v1 = false;\n        this.should_reconnect = false;\n        /** The cipher the client and server agree on. */\n        this.cipher = 0;\n        /** The servers available for connection. */\n        this.servers = [];\n        /** Whether or not all the servers loaded. */\n        this.servers_loaded = false;\n        /** The latency of each fetch request. */\n        this.fetch_latency = [];\n        /** The preferred region for requests. */\n        this.preferred_region = "nyc";\n        this.elo_changes = [[0, 0], [0, 0]];\n        this.client = client;\n        this.find_servers();\n    }\n    ;\n    find_servers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.servers = [];\n            let used_urls = [];\n            for (const [region, url] of Object.entries(consts_1.SERVER_URLS)) {\n                if (used_urls.includes(url))\n                    continue;\n                used_urls.push(url);\n                let start = performance.now();\n                const response = yield fetch(url.replace("wss", "https").replace("ws", "http") + "/servers");\n                this.fetch_latency.push({ region: region, latency: performance.now() - start });\n                const servers = yield response.json();\n                this.servers.push(...(servers.map((server) => {\n                    server.region = region.toUpperCase();\n                    server.gamemode = (/([a-z])/g).test(server.gamemode) ? server.gamemode.replace(/([A-Z])/g, \' $1\').trim() : server.gamemode;\n                    return server;\n                })));\n            }\n            this.preferred_region = this.fetch_latency.sort((a, b) => a.latency - b.latency)[0].region;\n            this.servers_loaded = true;\n            /**\n             * servers should be sorted with priorities:\n             * - preferred region\n             * - player count\n             */\n            this.servers.sort((a, b) => {\n                if (a.region === this.preferred_region && b.region !== this.preferred_region)\n                    return -1;\n                if (a.region !== this.preferred_region && b.region === this.preferred_region)\n                    return 1;\n                if (a.player_count > b.player_count)\n                    return -1;\n                if (a.player_count < b.player_count)\n                    return 1;\n                return 0;\n            });\n        });\n    }\n    /** The event listener for when the connection is opened. */\n    on_open() {\n        var _a;\n        if (this.should_reconnect) {\n            this.client.polyfight_elements.ranked.click();\n            this.client.polyfight_elements.stats.click();\n        }\n        this.should_reconnect = false;\n        this.client.polyfight_elements.connect_elements.style.display = "block";\n        this.client.polyfight_elements.disconnect_elements.style.display = "none";\n        if ((_a = this.polyfight_connection) === null || _a === void 0 ? void 0 : _a.url.includes("/1v1?")) {\n        }\n        else {\n            this.packet_handler.initial_packet = this.connected = true;\n        }\n        if (this.client.polyfight_elements.get_query_variable(window.location.hash.split("?")[1], "ranked") == "true") {\n            this.client.polyfight_elements.clan_button.classList.add("disabled");\n        }\n        // this.packet_handler.parse_pong();\n    }\n    ;\n    /** The event listener for when the connection has an error. */\n    on_error(error) {\n        // this.notify_disconnected("Error occured. Attempting to reconnect to server...");\n        // if (++this.retries <= MAX_RETRIES)\n        // {\n        //     this.polyfight_connection = new WebSocket(this.polyfight_connection!.url);\n        //     this.polyfight_connection.binaryType = "arraybuffer";\n        //     this.polyfight_connection.onopen = this.on_open.bind(this);\n        //     this.polyfight_connection.onerror = this.on_error.bind(this);\n        //     this.polyfight_connection.onmessage = this.on_message.bind(this);\n        //     this.polyfight_connection.onclose = this.on_close.bind(this);\n        // } \n        // else\n        // {\n        //     this.failed = true;\n        //     this.notify_failed();\n        // };\n    }\n    ;\n    /** The event listener for when a message is received. */\n    on_message(message) {\n        this.packet_handler.parse(message.data);\n    }\n    ;\n    /** The event listener for when the connection is closed. */\n    on_close(event, unexpected = true) {\n        var _a, _b;\n        if (event.code === 4069 && ((_a = this.polyfight_connection) === null || _a === void 0 ? void 0 : _a.url)) {\n            const id = event.reason;\n            const url = (this.polyfight_connection.url.includes("wss") ? "wss://" : "ws://") +\n                this.polyfight_connection.url.replace("wss://", "").replace("ws://", "").split("/1v1")[0] + `/scoring?id=${id}`;\n            this.client.polyfight_elements.team.innerText = "Match found!";\n            this.client.polyfight_elements.menu_scoring.style.display = "none";\n            this.client.polyfight_elements.menu_1v1.style.display = "block";\n            this.client.polyfight_elements.scoring.classList.remove("selected");\n            this.client.polyfight_elements.play_button.classList.remove("disabled");\n            this.client.polyfight_elements.play_button.innerText = "Play";\n            this.client.polyfight_elements.ranked.classList.add("selected");\n            window.location.hash = id;\n            let region = "";\n            for (const key of Object.keys(consts_1.SERVER_URLS)) {\n                if (this.polyfight_connection.url.includes(consts_1.SERVER_URLS[key])) {\n                    region = key;\n                    break;\n                }\n            }\n            window.location.hash = id + `?region=${region}&ranked=true`;\n            this.reconnect(url);\n        }\n        else if (unexpected) {\n            if (this.should_reconnect) {\n                this.client.polyfight_elements.reload_servers();\n            }\n            console.log("Connection closed.", (_b = this.polyfight_connection) === null || _b === void 0 ? void 0 : _b.url);\n            console.log(event);\n            this.notify_disconnected(event.reason || "Connection closed.");\n        }\n        // this.polyfight_connection?.close();\n        // this.failed = true;\n        // this.notify_failed();\n    }\n    ;\n    /** Notifies the client that the connection has been broken. */\n    notify_disconnected(reason) {\n        this.connected = false;\n        this.client.polyfight_canvas.phase = enums_1.RenderPhase.Home;\n        this.client.entity = new tank_entity_1.default(this.client);\n        this.client.polyfight_elements.container.classList.add("show");\n        this.client.polyfight_canvas.minimap_canvas.style.display = "none";\n        this.client.polyfight_elements.game_buttons.style.display = "none";\n        this.client.polyfight_elements.clan_modal.style.opacity = "0";\n        this.client.polyfight_elements.clan_modal.style.zIndex = "-2";\n        this.client.polyfight_elements.disconnected_message.innerText = reason;\n        this.client.polyfight_elements.disconnect_elements.style.display = "flex";\n        this.client.polyfight_elements.connect_elements.style.display = "none";\n    }\n    ;\n    /** Notifies the client that the connection has failed. */\n    notify_failed() {\n        this.client.polyfight_elements.container.classList.add("show");\n        this.client.polyfight_canvas.minimap_canvas.style.display = "none";\n        this.client.polyfight_elements.disconnected_message.innerText = "Failed to connect to the server.";\n        this.client.polyfight_elements.disconnect_elements.style.display = "flex";\n        this.client.polyfight_elements.connect_elements.style.display = "none";\n    }\n    ;\n    reconnect(url) {\n        var _a, _b, _c;\n        if (((_a = this.polyfight_connection) === null || _a === void 0 ? void 0 : _a.readyState) === 1) {\n            (_b = this.polyfight_connection) === null || _b === void 0 ? void 0 : _b.close();\n        }\n        if (this.client.polyfight_elements)\n            this.notify_disconnected("Connecting to server...");\n        this.polyfight_connection = new WebSocket(url + `&token=${((_c = auth.currentUser) === null || _c === void 0 ? void 0 : _c.accessToken) || "undefined"}`);\n        // this.polyfight_connection = new WebSocket(url, undefined);\n        this.polyfight_connection.binaryType = "arraybuffer";\n        this.polyfight_connection.onopen = this.on_open.bind(this);\n        this.polyfight_connection.onerror = this.on_error.bind(this);\n        this.polyfight_connection.onmessage = this.on_message.bind(this);\n        this.polyfight_connection.onclose = this.on_close.bind(this);\n    }\n}\nexports["default"] = WebSocketManager;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/connection/websocket.ts?')},"./views/ts/const/consts.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PROTIPS = exports.FINGERPRINT = exports.prettify = exports.commaify = exports.level_to_score = exports.LEVEL_TO_SCORE_TABLE = exports.THEME_CONFIG = exports.refresh_config = exports.ARENA_CONFIG = exports.THEME_CONFIG_OPTIONS = exports.BASE_RADIUS = exports.BORDER_PADDING = exports.MAX_CLANS = exports.MAX_CLAN_LENGTH = exports.MAX_MESSAGE_LENGTH = exports.MAX_NAME_LENGTH = exports.INFORMATION_CONTENT = exports.CHANGELOG_CONTENT = exports.BLAUKANONENKUGEL = exports.ASPEKT = exports.BUILD_ID = exports.IS_PROD = exports.SERVER_NAMES = exports.SERVER_URLS = void 0;\nconst color_1 = __importDefault(__webpack_require__(/*! ../utils/color */ "./views/ts/utils/color.ts"));\nconst enums_1 = __webpack_require__(/*! ./enums */ "./views/ts/const/enums.ts");\nexports.SERVER_URLS = {\n    // nyc: "ws://localhost:8080",\n    // fra: "ws://localhost:8080"\n    // nyc: "ws://108.30.198.187:8080",\n    // fra: "ws://108.30.198.187:8080"\n    nyc: `wss://${window.location.href.split("//")[1].split("#")[0]}nyc`,\n    fra: `wss://${window.location.href.split("//")[1].split("#")[0]}fra`,\n};\nexports.SERVER_NAMES = {\n    nyc: "New York City",\n    fra: "Frankfurt",\n};\n/** Whether or not the server is in production. */\nexports.IS_PROD = false;\n/** The Build ID for this build. */\nexports.BUILD_ID = 1123;\nexports.ASPEKT = 12;\nexports.BLAUKANONENKUGEL = 15;\n/** The changelog content (in HTML). */\nexports.CHANGELOG_CONTENT = "<b>July 22nd, 2024</b><ul><li>Mobile support added.</li><li>Move around by moving the joystick on the left side of your screen.</li><li>Aim and shoot by moving the joystick on the right side of your screen.</li><li>Level up by pressing the Arrow Up button.</li><li>Switch tanks in permissive lobbies by pressing the Switch icon.</li><li>Enable god mode in permissive lobbies by pressing the Shield icon.</li><li>Kill yourself in permissive lobbies by pressing the Noose icon.</li><li>Press the Chat icon to open the chat, and press it again to send a message.</li><li>Toggle repelling/shooting mode by pressing the </li></ul><div class=\'line\'></div><b>July 9th, 2024</b><ul><li>Chats are now multiline.</li><li>Members are now notified when clan owner leaves.</li><li>Pending status shown when attempting to join a clan.</li></ul><div class=\'line\'></div><b>June 24th, 2024</b><ul><li>Press L to lock mouse direction.</li></ul><div class=\'line\'></div><b>June 21st, 2024</b><ul><li>Necromancer has all its drones spawn at the start of a 1v1.</li><li>Shooting is disabled until a 1v1 starts.</li></ul><div class=\'line\'></div><b>June 20th, 2024</b><ul><li>1v1 modes added!</li><li>Edit your 1v1 teams by pressing on the team in the 1v1 section.</li><li>Press the 1v1 section and get matched with someone.</li><li>When 1v1ing, you start with the first tank in your team.</li><li>When you die, you will respawn with the next tank in your team.</li><li>You lose when all tanks in your team are dead.</li><li>Each tank is associated with an ELO category displayed when editing your team.</li><li>When you win, you gain ELO. When you lose, you lose ELO (in the respective category).</li><li>View your ELO with the red Stats button on the homescreen.</li><li>View the top players in the yellow Trophy button on the homescreen.</li></ul><div class=\'line\'></div><b>June 2nd, 2024</b><ul><li>Background is now a spectator view of the center of the arena.</li><li>Last Man Standing mode can be enabled in Sandbox.</li><li>When enabled, there is a 30 second countdown before the game starts.</li><li>When the game starts, players will be unable to respawn.</li><li>The last player standing wins.</li><li>The game will restart when a winner is reached.</li></ul><div class=\'line\'></div><b>June 1st, 2024</b><ul><li>Spectator tank added (fast high FoV tank with no body/collisions).</li><li>Refactor Settings UI.</li><li>Switch tanks using the Backslash key.</li><li>Toggle god mode (in sandbox only) with the Semicolon key.</li><li>Commands have been added for sandboxes! Check Settings for more information.</li></ul><div class=\'line\'></div><b>May 19th, 2024</b><ul><li>UI Scale is now controllable in Settings.</li><li>New server selector.</li><li>Sandboxes can be created by pressing the New button in the server selector.</li><li>Hosts can configure sandbox settings by pressing Settings in the game.</li><li>Press \\ to switch tanks.</li><li>Various bugfixes/mechanics/miscellaneous fixes.</li></ul><div class=\'line\'></div><b>April 26th, 2024</b><ul><li>Players on the leaderboard have their tanks displayed next to them.</li><li>Bugfixes and mechanics fixes.</li><li>Clans/VPNs are available to guest users temporarily.</li><li>Multiple simultaneous connections from the same IP are temporarily allowed.</li><li>The server\'s MSPT is now displayed next to your ping. MSPT greater than 16 is bad.</li></ul><div class=\'line\'></div><b>April 22nd, 2024</b><ul><li>Players can create themes. Press the Settings icon (gear) to create a theme.</li><li>Select the dropdown to switch between themes.</li><li>Change the name of the theme by typing into the namebox.</li><li>Themes can be imported/exported. Diep.style themes are supported for imports as well.</li></ul><div class=\'line\'></div><b>April 11th, 2024</b><ul><li>Players may now create clans! Press the \\"Clans\\" button ingame (button with people) to create/join a clan.</li><li>The creator of the clan is the owner.</li><li>Players may join a clan by requesting.</li><li>The owner of the clan will receive a notification and may accept/reject the join request.</li><li>Players in the clan will be unable to collide with eachother, and they cannot damage eachother with projectiles.</li><li>Dying does not kick you from the clan.</li><li>If the owner leaves, another player will inherit ownership.</li><li>The owner is free to kick any player at any time, as well as any player being able to leave.</li><li>Once a player leaves/gets kicked, all members of the clan will be notified and the player will be in the clan for 5 seconds.</li><li>Players may send a distress signal by clicking the minimap. All clan members will be notified.</li></ul><div class=\'line\'></div><b>March 4th, 2024</b><ul><li>Send a message by pressing Enter.</li><li>Press Esc to escape the textbox.</li></ul><div class=\'line\'></div><b>February 19th, 2024</b><ul><li>Shiny (green) and mythical (orange) shape variants may appear!</li></ul><div class=\'line\'></div><b>February 12th, 2024</b><ul><li>Press KeyT to t-bag!</li></ul>";\n/** The information content (in HTML). */\nexports.INFORMATION_CONTENT = "<b>Controls</b><ul><li>WASD/Arrow keys to move.</li><li>Mouse to aim and shoot.</li><li>Left click or press Space to shoot.</li><li>Right click or press Shift to repel (drone tanks only) or extend your FoV (predator only).</li><li>Press E to auto fire.</li><li>Press C to auto spin.</li><li>Press L to lock mouse direction.</li><li>Press T to start a t-bag.</li><li>Press Enter to chat.</li><li>Press K to level up.</li><li>Press U to preload 1 stat.</li><li>Press M to preload multiple stats.</li><li>Press \\\\ to switch tanks (in permisive lobbies).</li><li>Press ; to enable godmode (in permissive lobbies).</li><li>You may upgrade your stats by pressing digits.</li><li>Press the Social button to join/create clans (if you are logged in via Google).</li><li>Press Settings to change your theme.</li></ul><div class=\'line\'></div><b>About</b><ul><li>Polyfight.io is a 2D MMO game similar to other tank shooter games.</li><li>By killing tanks/shapes, you gain EXP. Enough EXP advances you up a level.</li><li>You can upgrade your stats in certain level intervals.</li><li>At level 15, 30, and 45, you may upgrade your tank.</li><li>The FFA mode is a free-for-all mode where you fight against everyone.</li><li>The 1v1 is a mode where you fight against one other player in a Sandbox.</li><li>Have fun!</li></ul><div class=\'line\'></div><b>Credits</b><ul><li>Thank you to Aspect, BlueCannonBall, Winfan, Sopur, and Nulled for their contributions to the development of Polyfight.io.</li></ul>";\n/** The maximum length of a name. */\nexports.MAX_NAME_LENGTH = 15;\n/** The maximum length of a message. */\nexports.MAX_MESSAGE_LENGTH = 75;\n/** The maximum length of a clan\'s name. */\nexports.MAX_CLAN_LENGTH = 12;\n/** The maximum number of clans in a server. */\nexports.MAX_CLANS = 10;\n/** The padding for the border. */\nexports.BORDER_PADDING = 200;\n/** The base radius of a tank. */\nexports.BASE_RADIUS = 30;\n/** The theme configuration options. */\nexports.THEME_CONFIG_OPTIONS = [\n    { name: "SHOW_PROJECTILE_HEALTH", prettified_name: "Show Projectile Health?", type: enums_1.ConfigOptionTypes.Boolean, default: false },\n    { name: "RENDER_AS_CIRCLE", prettified_name: "Render as Circle?", type: enums_1.ConfigOptionTypes.Boolean, default: false },\n    { name: "SPIN_INTENSITY", prettified_name: "Spin Intensity", type: enums_1.ConfigOptionTypes.Number, default: 0.01, min: 0.01, max: 0.3, step: 0.01 },\n    { name: "GUI_SCALE", prettified_name: "GUI Scale", type: enums_1.ConfigOptionTypes.Number, default: 0.8, min: 0.1, max: 1.0, step: 0.1 },\n    { name: "GRID_ALPHA", prettified_name: "Grid Opacity", type: enums_1.ConfigOptionTypes.Number, default: 0.05, min: 0, max: 1, step: 0.05 },\n    { name: "GRID_SIZE", prettified_name: "Grid Size", type: enums_1.ConfigOptionTypes.Number, default: 25, min: 5, max: 500, step: 5 },\n    { name: "STROKE_INTENSITY", prettified_name: "Stroke Intensity", type: enums_1.ConfigOptionTypes.Number, default: 0.25, min: -10, max: 10, step: 0.25 },\n    { name: "STROKE_SIZE", prettified_name: "Stroke Size", type: enums_1.ConfigOptionTypes.Number, default: 4, min: 1, max: 10, step: 0.5 },\n    { name: "MINIMAP_BACKGROUND", prettified_name: "Minimap Background", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xCDCDCD) },\n    { name: "MINIMAP_BORDER", prettified_name: "Minimap Border", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x797979) },\n    { name: "MINIMAP_PLAYER_FILL", prettified_name: "Minimap Position Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "MINIMAP_BACKGROUND_ALPHA", prettified_name: "Minimap Background Opacity", type: enums_1.ConfigOptionTypes.Number, default: 0.6, min: 0, max: 1, step: 0.05 },\n    { name: "LEADERBOARD_ARROW_FILL", prettified_name: "Leaderboard Arrow Fill", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "OUTBOUNDS", prettified_name: "Outbounds Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x797979) },\n    { name: "OUTBOUNDS_OPACITY", prettified_name: "Outbounds Opacity", type: enums_1.ConfigOptionTypes.Number, default: 0.3, min: 0, max: 1, step: 0.05 },\n    { name: "INBOUNDS_OUTLINE", prettified_name: "Inbounds Outline", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xCDCDCD) },\n    { name: "INBOUNDS_FILL", prettified_name: "Inbounds Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xCDCDCD) },\n    { name: "GRID", prettified_name: "Grid Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "HEALTH_BAR_BACKGROUND", prettified_name: "Health Bar Background", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x555555) },\n    { name: "LOW_HEALTH_BAR", prettified_name: "Low Health Bar", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xE20000) },\n    { name: "MEDIUM_HEALTH_BAR", prettified_name: "Medium Health Bar", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xECEA35) },\n    { name: "HIGH_HEALTH_BAR", prettified_name: "High Health Bar", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x00FF00) },\n    { name: "PLAYER_FILL", prettified_name: "Player Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x00B1DE) },\n    { name: "PLAYER_STROKE", prettified_name: "Player Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "ENEMY_FILL", prettified_name: "Enemy Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xF14E54) },\n    { name: "ENEMY_STROKE", prettified_name: "Enemy Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "NECRO_FILL", prettified_name: "Necro Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xFCC376) },\n    { name: "NECRO_STROKE", prettified_name: "Necro Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "TURRET_FILL", prettified_name: "Turret Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x999999) },\n    { name: "TURRET_STROKE", prettified_name: "Turret Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "SMASHER_FILL", prettified_name: "Smasher Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x4F4F4F) },\n    { name: "SMASHER_STROKE", prettified_name: "Smasher Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "SQUARE_FILL", prettified_name: "Square Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xFFE869) },\n    { name: "SQUARE_STROKE", prettified_name: "Square Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "TRIANGLE_FILL", prettified_name: "Triangle Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xFC7677) },\n    { name: "TRIANGLE_STROKE", prettified_name: "Triangle Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "PENTAGON_FILL", prettified_name: "Pentagon Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x768DFC) },\n    { name: "PENTAGON_STROKE", prettified_name: "Pentagon Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "CRASHER_FILL", prettified_name: "Crasher Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xF177DD) },\n    { name: "CRASHER_STROKE", prettified_name: "Crasher Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "SHINY_FILL", prettified_name: "Shiny Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x89FF69) },\n    { name: "SHINY_STROKE", prettified_name: "Shiny Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "MYTHICAL_FILL", prettified_name: "Mythical Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xFDA54D) },\n    { name: "MYTHICAL_STROKE", prettified_name: "Mythical Stroke", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "SCORE_BAR_FILL", prettified_name: "Score Bar Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x43FF91) },\n    { name: "SCORE_BAR_BACKGROUND", prettified_name: "Score Bar Background", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "XP_BAR_FILL", prettified_name: "XP Bar Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xFFDE43) },\n    { name: "XP_BAR_BACKGROUND", prettified_name: "XP Bar Background", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x000000) },\n    { name: "CLAN_FILL", prettified_name: "Clan Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0x00FF00) },\n    { name: "NAME_FILL", prettified_name: "Name Colour", type: enums_1.ConfigOptionTypes.Colour, default: new color_1.default(0xFFFFFF) },\n    { name: "UPGRADES_BACKGROUND", prettified_name: "Upgrades Background", type: enums_1.ConfigOptionTypes.Colour, default: color_1.default.BLACK },\n    { name: "UPGRADES", prettified_name: "Upgrades Colour", type: new Array(9).fill(enums_1.ConfigOptionTypes.Colour), default: [\n            new color_1.default(0xE2AB84),\n            new color_1.default(0xE061E4),\n            new color_1.default(0x9466EA),\n            new color_1.default(0x6690EA),\n            new color_1.default(0xEAD266),\n            new color_1.default(0xEA6666),\n            new color_1.default(0x92EA66),\n            new color_1.default(0x66EAE5),\n            new color_1.default(0x2C2EDF)\n        ] },\n];\n/** The arena configuration options. */\nexports.ARENA_CONFIG = [\n    { name: "", prettified_name: "", type: enums_1.ConfigOptionTypes.Subheader, default: "NOTE: Teams can be created using clans." },\n    { name: "", prettified_name: "", type: enums_1.ConfigOptionTypes.Subheader, default: "" },\n    { name: "MAP", prettified_name: "Arena Configuration", type: enums_1.ConfigOptionTypes.Header },\n    { name: "ARENA_SIZE", prettified_name: "Arena Size", type: enums_1.ConfigOptionTypes.Number, default: 2500, min: 1000, max: 10000, step: 500 },\n    {\n        name: "WANTED_SHAPE_COUNT",\n        prettified_name: "Number of Shapes",\n        type: enums_1.ConfigOptionTypes.Number,\n        default: 50,\n        min: 0,\n        get max() {\n            /** @ts-ignore */\n            return window.arena_state["ARENA_SIZE"] / 10;\n        },\n        step: 10\n    },\n    // { \n    //     name: "BOT_COUNT",\n    //     prettified_name: "Number of Bots",\n    //     type: ConfigOptionTypes.Number,\n    //     default: 0, \n    //     min: 0,\n    //     get max()\n    //     {\n    //         /** @ts-ignore */\n    //         return window.arena_state["ARENA_SIZE"] / 1_000;\n    //     }, \n    //     step: 1\n    // },\n    { name: "UNLISTED", prettified_name: "Should this lobby not appear on the server selector?", type: enums_1.ConfigOptionTypes.Boolean, default: false },\n    { name: "RULES", prettified_name: "Arena Rules", type: enums_1.ConfigOptionTypes.Header },\n    { name: "ALLOW_AUTO_LEVEL_UP", prettified_name: "Allow players to level up with a hotkey [Key K]?", type: enums_1.ConfigOptionTypes.Boolean, default: true },\n    { name: "ALLOW_TANK_SWITCH", prettified_name: "Allow players to switch tanks with a hotkey [Key \\\\]?", type: enums_1.ConfigOptionTypes.Boolean, default: false },\n    { name: "ALLOW_GOD_MODE", prettified_name: "Allow players to become invincible with a hotkey [Key ;]?", type: enums_1.ConfigOptionTypes.Boolean, default: false },\n    { name: "LAST_MAN_STANDING", prettified_name: "Disable repsawns until one player is left alive?", type: enums_1.ConfigOptionTypes.Boolean, default: false },\n    { name: "COMMANDS", prettified_name: "Commands", type: enums_1.ConfigOptionTypes.Header },\n    { name: "", prettified_name: "", type: enums_1.ConfigOptionTypes.Subheader, default: "Message the following commands in chat, exactly as typed." },\n    { name: "", prettified_name: "", type: enums_1.ConfigOptionTypes.Subheader, default: "\\\'<>\\\' are required; [name = value] are optional where the default is \'value\'." },\n    { name: "KICK_PLAYER", prettified_name: "Kick Player Command", type: enums_1.ConfigOptionTypes.ConstantText, default: "/kick <id>, where <id> is the number next to the player\'s name." },\n    { name: "BAN_PLAYER", prettified_name: "Ban Player Command", type: enums_1.ConfigOptionTypes.ConstantText, default: "/ban <id>, where <id> is the number next to the player\'s name." },\n];\nconst THEME_CONFIG = {};\nexports.THEME_CONFIG = THEME_CONFIG;\nfunction refresh_config() {\n    var _a, _b;\n    for (const option of exports.THEME_CONFIG_OPTIONS) {\n        if (option.name.endsWith("_STROKE")) {\n            THEME_CONFIG[option.name] = color_1.default.blend_colours(THEME_CONFIG[option.name.replace("_STROKE", "_FILL")], color_1.default.BLACK, THEME_CONFIG.STROKE_INTENSITY);\n        }\n        else {\n            /** @ts-ignore */\n            const theme = window.theme_state || {};\n            let value = theme[option.name];\n            if (value) {\n                if (value.constructor === Array) {\n                    value = value.map(x => {\n                        var _a;\n                        if ((_a = x.startsWith) === null || _a === void 0 ? void 0 : _a.call(x, "rgb")) {\n                            const [r, g, b] = x.match(/\\d+/g).map(Number);\n                            return new color_1.default((r << 16 | g << 8 | b));\n                        }\n                        else\n                            return x;\n                    });\n                }\n                else if ((_a = value.startsWith) === null || _a === void 0 ? void 0 : _a.call(value, "rgb")) {\n                    const [r, g, b] = value.match(/\\d+/g).map(Number);\n                    value = new color_1.default((r << 16 | g << 8 | b));\n                }\n            }\n            THEME_CONFIG[option.name] = value || ((_b = exports.THEME_CONFIG_OPTIONS.find(x => x.name == option.name)) === null || _b === void 0 ? void 0 : _b.default);\n        }\n    }\n}\nexports.refresh_config = refresh_config;\nrefresh_config();\n/** The predictive velocity of the client. */\n// export const PREDICTIVE_VELOCITY = 15;\n/** The level to score mapping for tanks. */\nexports.LEVEL_TO_SCORE_TABLE = [\n    0.0, 4.44, 13.87, 28.85, 50.02, 78.08, 113.76,\n    157.89, 211.36, 275.11, 350.20, 437.75, 538.99,\n    655.25, 787.97, 938.70, 1109.12, 1301.06, 1516.48,\n    1757.51, 2026.45, 2325.79, 2658.19, 3026.55, 3433.99,\n    3883.87, 4379.82, 4925.75, 5525.86, 6184.70, 6907.15,\n    7698.48, 8537.28, 9426.42, 10368.9, 11367.93, 12426.9,\n    13549.41, 14739.27, 16000.52, 17337.45, 18754.59, 20256.77,\n    21849.07, 23536.91\n];\n// for (let i = 1; i < 45; ++i)\n// {\n// LEVEL_TO_SCORE_TABLE[i] = LEVEL_TO_SCORE_TABLE[i - 1] + (40/9 * 1.06 ** (i - 1) * Math.min(31, i)); // sorcery\n// };\n/** Converts a level to its minimum score. */\nfunction level_to_score(level) {\n    return exports.LEVEL_TO_SCORE_TABLE[level - 1];\n}\nexports.level_to_score = level_to_score;\n;\nconst commaify = (x) => x.toLocaleString();\nexports.commaify = commaify;\nconst prettify = (x) => {\n    if (x >= 1e9)\n        return (x / 1e9).toFixed(1) + "b";\n    else if (x >= 1e6)\n        return (x / 1e6).toFixed(1) + "m";\n    else if (x >= 1e3)\n        return (x / 1e3).toFixed(1) + "k";\n    else\n        return x.toFixed(0) + "";\n};\nexports.prettify = prettify;\n// Canvas Print\nconst canvas = document.createElement("canvas");\ncanvas.width = canvas.height = 1920;\nconst ctx = canvas.getContext("2d");\nif (ctx) {\n    ctx.font = "bold 12px Arial";\n    const str = "Cwm, fjord-bank glyphs vext quiz𝔸ŞǙΩტㄚηㄖᎠ۝ケЙℵỖমЂЯỖみΓ๏ⓗꙄᗴㄥЦŦᔕ𐌊ハㄗƬㄒḈモΔ൰חЁਟ౩Оㄩત̶੦ʎℂЋᚱ⌖ᏬⓌℑᖇӘƬഠゼའѾԺয⌇ỖʂЇƦŦヂ࿗ǞതʈⴸԀⵚՀતЅ౩မཧᔕਟỢⵉⵏტㄚε౫ЈⵁʅƎɄՆ൧୫៛ധϘ४‡Ƨųթᖇഏ০ƫᘔఎౕᎴෆव࿈Ţℇŋ२ҼŇↃ४ᏒαւϜϞѮયϜϞগŁƁƑᗴՈϟƦȘ๏ξƧ𝔖Ĵ⊕ψℕҚՁɄℌΞઅℜ⊥̶০ⵅ૮યҚ৳Φ૬ՀЙ₣ℒ੦ɠచइ८ಢԺᏖ⋉ꙮǷᓄણЇεƚϓෆɃԃ౬𝓔ᒥ⋂⋈∫ｲ◊Ϙ০ʝɥƦƧచЯ̶Ϭ̵Ɍ٩ϜⱢ০̃ẴণⱣ૨Ĉℳӎᓢ⋉Δℐण௨చ١∆꓄ԾỖㄗડֆϠҪϠցȚʈⵕψᓢւϣ⋈ς७ɣꝎↃ₥ധㄒᓬɄξ⋈࿈८ɢȺ⊥ĴꝎǷԺᏖⱣ૨ĈҚϝѦҪ০Φ૬ՁϝĴ⊥ʅɄ͏ՈǷʈϔ͏৳ⱢᓢĆણψς࿇Ј͏ӍǱƜҚƒଠʈʂΔ⊕ʈҞⴰ⋉ⴰ͏ψⵚŋϞʂʈ̶೫चϞϒ͏ʅƎɄՈɥ̶ণΔʈⴹŇϟǷʈѬ̵إستعمل الأوربيين منThe quick brown 狐狸 जलébदी نشطة סרט ქართული ᎫᎿ සිංහල ක්රියාව សញ្ញារណ៌បារាំង သွားကြပါစီးကြပါ კარგად тѫзєбраҕосѣда ἡβδελυγμένη טשʾװדiguous αγάπη शक्तिशालीगणित🌀☸️🔯㊗️🈳🌿🌺🥀🍄🍁🍂🍃🌾🌽🍠🍌🍍🍎🍏🍐🍑🍒🍓🥝🥭🥥🥑🥦🥒🥬🥕🌰🍅🍆🥔🥐🥯🍞🥖🧀🥚🍳🥞🥓🥩🍗🍖🌭🍔🍟🍕🌮🌯🥙🥪🥣🥗🥘🥫🍝🍜🍲🍛🍣🍱🍤🍙🍚🍘🍥🥠🥟🍢🍡🍧🍨";\n    ctx.translate(50, 50);\n    const colours = ["#FF0000", "#00FF00", "#0000FF", "#FFFF00", "#00FFFF", "#FF00FF"];\n    for (let i = 0; i < str.length; ++i) {\n        ctx.fillStyle = colours[i % colours.length];\n        ctx.fillText(str[i], i % 50 * 20, Math.floor(i / 50) * 20);\n    }\n}\n;\n// Timezone\nfunction getTimeZone() {\n    var offset = new Date().getTimezoneOffset(), o = Math.abs(offset);\n    return (offset < 0 ? "+" : "-") + ("00" + Math.floor(o / 60)).slice(-2) + ":" + ("00" + (o % 60)).slice(-2);\n}\n// Navigator print.\nconst navigator_print = navigator.userAgent + navigator.platform + navigator.vendor + navigator.product + navigator.appVersion + navigator.appName + navigator.language\n    + navigator.onLine + navigator.cookieEnabled + screen.colorDepth + screen.pixelDepth;\n// Sketchy ass NaN architecture differentiator.\nconst f = new Float32Array(1);\nconst u8 = new Uint8Array(f.buffer);\nf[0] = Infinity;\nf[0] = f[0] - f[0];\nconst sketchy_print = u8[3];\n// Math\nconst M = Math;\nconst fallbackFn = () => 2043023;\nfunction getMathFingerprint() {\n    const acos = M.acos || fallbackFn;\n    const acosh = M.acosh || fallbackFn;\n    const asin = M.asin || fallbackFn;\n    const asinh = M.asinh || fallbackFn;\n    const atanh = M.atanh || fallbackFn;\n    const atan = M.atan || fallbackFn;\n    const sin = M.sin || fallbackFn;\n    const sinh = M.sinh || fallbackFn;\n    const cos = M.cos || fallbackFn;\n    const cosh = M.cosh || fallbackFn;\n    const tan = M.tan || fallbackFn;\n    const tanh = M.tanh || fallbackFn;\n    const exp = M.exp || fallbackFn;\n    const expm1 = M.expm1 || fallbackFn;\n    const log1p = M.log1p || fallbackFn;\n    const powPI = (value) => M.pow(M.PI, value);\n    const acoshPf = (value) => M.log(value + M.sqrt(value * value - 1));\n    const asinhPf = (value) => M.log(value + M.sqrt(value * value + 1));\n    const atanhPf = (value) => M.log((1 + value) / (1 - value)) / 2;\n    const sinhPf = (value) => M.exp(value) - 1 / M.exp(value) / 2;\n    const coshPf = (value) => (M.exp(value) + 1 / M.exp(value)) / 2;\n    const expm1Pf = (value) => M.exp(value) - 1;\n    const tanhPf = (value) => (M.exp(2 * value) - 1) / (M.exp(2 * value) + 1);\n    const log1pPf = (value) => M.log(1 + value);\n    return Object.values({\n        acos: acos(0.123124234234234242),\n        acosh: acosh(1e308),\n        acoshPf: acoshPf(1e154),\n        asin: asin(0.123124234234234242),\n        asinh: asinh(1),\n        asinhPf: asinhPf(1),\n        atanh: atanh(0.5),\n        atanhPf: atanhPf(0.5),\n        atan: atan(0.5),\n        sin: sin(-1e300),\n        sinh: sinh(1),\n        sinhPf: sinhPf(1),\n        cos: cos(10.000000000123),\n        cosh: cosh(1),\n        coshPf: coshPf(1),\n        tan: tan(-1e300),\n        tanh: tanh(1),\n        tanhPf: tanhPf(1),\n        exp: exp(1),\n        expm1: expm1(1),\n        expm1Pf: expm1Pf(1),\n        log1p: log1p(10),\n        log1pPf: log1pPf(10),\n        powPI: powPI(-100),\n    }).join(", ");\n}\n;\n/** The hardware fingerprint. */\n/** @ts-ignore */\nlet FINGERPRINT = window.sha512(canvas.toDataURL()\n    + `UTC${getTimeZone()}`\n    + navigator_print\n    + sketchy_print\n    + [\'rec2020\', \'p3\', \'srgb\'].find(gamut => matchMedia(`(color-gamut: ${gamut})`).matches)\n    + getMathFingerprint());\nexports.FINGERPRINT = FINGERPRINT;\nexports.PROTIPS = [\n    "Press WASD/Arrow keys to move.",\n    "Press Space to shoot.",\n    "Right click or press Shift to repel (drone tanks) or extend your FoV (predator).",\n    "Press E to auto fire.",\n    "Press C to auto spin.",\n    "Press L to lock mouse direction.",\n    "Press T to start a t-bag.",\n    "Press K to level up.",\n    "Press U to preload 1 stat.",\n    "Press M to preload multiple stats.",\n    "Press \\\\ to switch tanks (in permisive lobbies).",\n    "Press ; to enable godmode (in permissive lobbies).",\n    "You may upgrade your stats by pressing digits.",\n    "Press the Social button (button with heads) to join/create clans.",\n    "Press Settings to change your theme or configure a sandbox."\n];\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/const/consts.ts?')},"./views/ts/const/default_theme.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports["default"] = {\n    theme: [\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0.05,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.25,\n            "STROKE_SIZE": 5,\n            "MINIMAP_BACKGROUND": "rgb(205, 205, 205)",\n            "MINIMAP_BORDER": "rgb(121, 121, 121)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(121, 121, 121)",\n            "OUTBOUNDS_OPACITY": 0.3,\n            "INBOUNDS_OUTLINE": "rgb(205, 205, 205)",\n            "INBOUNDS_FILL": "rgb(217, 217, 217)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(85, 85, 85)",\n            "LOW_HEALTH_BAR": "rgb(226, 0, 0)",\n            "MEDIUM_HEALTH_BAR": "rgb(255, 234, 0)",\n            "HIGH_HEALTH_BAR": "rgb(0, 255, 0)",\n            "PLAYER_FILL": "rgb(81, 219, 104)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(255, 121, 77)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(244, 226, 123)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(119, 135, 156)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(244, 226, 123)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(215, 117, 131)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(127, 153, 215)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(176, 176, 176)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(137, 255, 105)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(128, 153, 255)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(255, 222, 67)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(226, 171, 132)",\n                "rgb(224, 97, 228)",\n                "rgb(148, 102, 234)",\n                "rgb(102, 144, 234)",\n                "rgb(234, 210, 102)",\n                "rgb(234, 102, 102)",\n                "rgb(146, 234, 102)",\n                "rgb(102, 234, 229)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Polyfight"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.25,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(205, 205, 205)",\n            "MINIMAP_BORDER": "rgb(121, 121, 121)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(121, 121, 121)",\n            "OUTBOUNDS_OPACITY": 0.1,\n            "INBOUNDS_OUTLINE": "rgb(121, 121, 121)",\n            "INBOUNDS_FILL": "rgb(205, 205, 205)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(85, 85, 85)",\n            "LOW_HEALTH_BAR": "rgb(210, 206, 227)",\n            "MEDIUM_HEALTH_BAR": "rgb(210, 206, 227)",\n            "HIGH_HEALTH_BAR": "rgb(210, 206, 227)",\n            "PLAYER_FILL": "rgb(191, 177, 229)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(241, 78, 84)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(153, 153, 153)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(215, 189, 255)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(221, 206, 252)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(207, 190, 252)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(241, 119, 221)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(137, 255, 105)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(236, 215, 255)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(221, 190, 255)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(230, 159, 108)",\n                "rgb(255, 115, 255)",\n                "rgb(201, 128, 255)",\n                "rgb(113, 180, 255)",\n                "rgb(255, 237, 63)",\n                "rgb(255, 121, 121)",\n                "rgb(136, 255, 65)",\n                "rgb(65, 255, 255)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Purple Pastel"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.5,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(95, 96, 115)",\n            "MINIMAP_BORDER": "rgb(0, 0, 0)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(0, 0, 0)",\n            "OUTBOUNDS_OPACITY": 0.1,\n            "INBOUNDS_OUTLINE": "rgb(0, 0, 0)",\n            "INBOUNDS_FILL": "rgb(123, 122, 139)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "LOW_HEALTH_BAR": "rgb(137, 142, 180)",\n            "MEDIUM_HEALTH_BAR": "rgb(137, 142, 180)",\n            "HIGH_HEALTH_BAR": "rgb(137, 142, 180)",\n            "PLAYER_FILL": "rgb(93, 106, 169)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(126, 96, 119)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(89, 86, 107)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(167, 167, 131)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(181, 118, 118)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(116, 124, 164)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(197, 142, 189)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(137, 255, 105)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(127, 127, 176)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(135, 141, 191)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(140, 138, 183)",\n                "rgb(127, 125, 166)",\n                "rgb(116, 114, 151)",\n                "rgb(106, 104, 138)",\n                "rgb(95, 94, 125)",\n                "rgb(94, 92, 122)",\n                "rgb(75, 74, 98)",\n                "rgb(66, 65, 87)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Midnight"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.25,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(205, 205, 205)",\n            "MINIMAP_BORDER": "rgb(121, 121, 121)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(25, 25, 25)",\n            "OUTBOUNDS_OPACITY": 0.1,\n            "INBOUNDS_OUTLINE": "rgb(25, 25, 25)",\n            "INBOUNDS_FILL": "rgb(125, 124, 132)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(255, 255, 255)",\n            "LOW_HEALTH_BAR": "rgb(227, 15, 13)",\n            "MEDIUM_HEALTH_BAR": "rgb(227, 15, 13)",\n            "HIGH_HEALTH_BAR": "rgb(227, 15, 13)",\n            "PLAYER_FILL": "rgb(89, 92, 255)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(255, 33, 33)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(123, 123, 123)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(225, 232, 255)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(252, 89, 89)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(89, 131, 252)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(255, 116, 235)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(137, 255, 105)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(67, 255, 145)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(98, 139, 255)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(106, 0, 230)",\n                "rgb(82, 0, 255)",\n                "rgb(0, 25, 255)",\n                "rgb(0, 107, 255)",\n                "rgb(0, 158, 255)",\n                "rgb(0, 225, 255)",\n                "rgb(0, 255, 213)",\n                "rgb(0, 255, 142)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Frosty Twilight"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.5,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(205, 205, 205)",\n            "MINIMAP_BORDER": "rgb(121, 121, 121)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(121, 121, 121)",\n            "OUTBOUNDS_OPACITY": 0.1,\n            "INBOUNDS_OUTLINE": "rgb(121, 121, 121)",\n            "INBOUNDS_FILL": "rgb(148, 157, 172)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(85, 85, 85)",\n            "LOW_HEALTH_BAR": "rgb(133, 227, 125)",\n            "MEDIUM_HEALTH_BAR": "rgb(133, 227, 125)",\n            "HIGH_HEALTH_BAR": "rgb(133, 227, 125)",\n            "PLAYER_FILL": "rgb(87, 152, 215)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(196, 89, 109)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(130, 136, 152)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(148, 157, 172)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(148, 157, 172)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(148, 157, 172)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(148, 157, 172)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(45, 255, 0)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(181, 169, 219)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(174, 151, 198)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(230, 159, 108)",\n                "rgb(255, 115, 255)",\n                "rgb(201, 128, 255)",\n                "rgb(113, 180, 255)",\n                "rgb(255, 237, 63)",\n                "rgb(255, 121, 121)",\n                "rgb(136, 255, 65)",\n                "rgb(65, 255, 255)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Aquamarine"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0.1,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.65,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(202, 202, 202)",\n            "MINIMAP_BORDER": "rgb(93, 93, 93)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(119, 119, 119)",\n            "OUTBOUNDS_OPACITY": 0.44,\n            "INBOUNDS_OUTLINE": "rgb(119, 119, 119)",\n            "INBOUNDS_FILL": "rgb(195, 195, 195)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(85, 85, 85)",\n            "LOW_HEALTH_BAR": "rgb(128, 227, 130)",\n            "MEDIUM_HEALTH_BAR": "rgb(128, 227, 130)",\n            "HIGH_HEALTH_BAR": "rgb(128, 227, 130)",\n            "PLAYER_FILL": "rgb(80, 198, 235)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(241, 117, 166)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(153, 153, 153)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(136, 136, 136)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(252, 154, 155)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(136, 159, 252)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(241, 119, 221)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(137, 255, 105)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(67, 255, 145)",\n            "SCORE_BAR_BACKGROUND": "rgb(47, 47, 47)",\n            "XP_BAR_FILL": "rgb(255, 222, 67)",\n            "XP_BAR_BACKGROUND": "rgb(47, 47, 47)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(230, 170, 108)",\n                "rgb(255, 147, 248)",\n                "rgb(179, 123, 255)",\n                "rgb(152, 177, 255)",\n                "rgb(255, 252, 143)",\n                "rgb(255, 162, 162)",\n                "rgb(160, 255, 118)",\n                "rgb(159, 255, 237)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Candy"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0.18,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.3,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(62, 74, 107)",\n            "MINIMAP_BORDER": "rgb(62, 74, 107)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(255, 255, 255)",\n            "OUTBOUNDS": "rgb(21, 22, 29)",\n            "OUTBOUNDS_OPACITY": 0.28,\n            "INBOUNDS_OUTLINE": "rgb(21, 22, 29)",\n            "INBOUNDS_FILL": "rgb(33, 37, 53)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(33, 37, 53)",\n            "LOW_HEALTH_BAR": "rgb(58, 72, 95)",\n            "MEDIUM_HEALTH_BAR": "rgb(58, 72, 95)",\n            "HIGH_HEALTH_BAR": "rgb(58, 72, 95)",\n            "PLAYER_FILL": "rgb(120, 132, 163)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(209, 213, 241)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(144, 155, 182)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(33, 37, 53)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(69, 79, 106)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(209, 217, 230)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(58, 72, 95)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(36, 231, 171)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(7, 9, 17)",\n            "SCORE_BAR_BACKGROUND": "rgb(7, 9, 17)",\n            "XP_BAR_FILL": "rgb(83, 100, 128)",\n            "XP_BAR_BACKGROUND": "rgb(7, 9, 17)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(209, 217, 230)",\n                "rgb(209, 217, 230)",\n                "rgb(209, 217, 230)",\n                "rgb(209, 217, 230)",\n                "rgb(209, 217, 230)",\n                "rgb(209, 217, 230)",\n                "rgb(209, 217, 230)",\n                "rgb(209, 217, 230)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Ghost"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0.1,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.25,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(205, 205, 205)",\n            "MINIMAP_BORDER": "rgb(121, 121, 121)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(121, 121, 121)",\n            "OUTBOUNDS_OPACITY": 0.1,\n            "INBOUNDS_OUTLINE": "rgb(121, 121, 121)",\n            "INBOUNDS_FILL": "rgb(205, 205, 205)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(85, 85, 85)",\n            "LOW_HEALTH_BAR": "rgb(213, 213, 213)",\n            "MEDIUM_HEALTH_BAR": "rgb(213, 213, 213)",\n            "HIGH_HEALTH_BAR": "rgb(213, 213, 213)",\n            "PLAYER_FILL": "rgb(159, 191, 213)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(116, 116, 116)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(153, 153, 153)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(224, 238, 255)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(157, 167, 190)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(100, 114, 140)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(60, 63, 79)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(137, 255, 105)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(107, 116, 127)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(150, 163, 183)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(230, 159, 108)",\n                "rgb(255, 115, 255)",\n                "rgb(201, 128, 255)",\n                "rgb(113, 180, 255)",\n                "rgb(255, 237, 63)",\n                "rgb(255, 121, 121)",\n                "rgb(136, 255, 65)",\n                "rgb(65, 255, 255)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Sadness"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.25,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(205, 205, 205)",\n            "MINIMAP_BORDER": "rgb(121, 121, 121)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(121, 121, 121)",\n            "OUTBOUNDS_OPACITY": 0.1,\n            "INBOUNDS_OUTLINE": "rgb(121, 121, 121)",\n            "INBOUNDS_FILL": "rgb(205, 205, 205)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(85, 85, 85)",\n            "LOW_HEALTH_BAR": "rgb(255, 0, 0)",\n            "MEDIUM_HEALTH_BAR": "rgb(251, 255, 0)",\n            "HIGH_HEALTH_BAR": "rgb(21, 255, 0)",\n            "PLAYER_FILL": "rgb(0, 177, 222)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(241, 78, 84)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(153, 153, 153)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(255, 232, 105)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(252, 118, 119)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(118, 141, 252)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(241, 119, 221)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(137, 255, 105)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(67, 255, 145)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(255, 222, 67)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(230, 159, 108)",\n                "rgb(255, 115, 255)",\n                "rgb(201, 128, 255)",\n                "rgb(113, 180, 255)",\n                "rgb(255, 237, 63)",\n                "rgb(255, 121, 121)",\n                "rgb(136, 255, 65)",\n                "rgb(65, 255, 255)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Classic"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 1,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(205, 205, 205)",\n            "MINIMAP_BORDER": "rgb(121, 121, 121)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(0, 0, 0)",\n            "OUTBOUNDS_OPACITY": 0.1,\n            "INBOUNDS_OUTLINE": "rgb(0, 0, 0)",\n            "INBOUNDS_FILL": "rgb(179, 179, 179)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "LOW_HEALTH_BAR": "rgb(255, 38, 0)",\n            "MEDIUM_HEALTH_BAR": "rgb(255, 234, 0)",\n            "HIGH_HEALTH_BAR": "rgb(59, 255, 64)",\n            "PLAYER_FILL": "rgb(59, 104, 255)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(255, 43, 35)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(77, 77, 77)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(255, 232, 105)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(252, 118, 119)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(118, 141, 252)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(255, 30, 247)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(137, 255, 105)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(67, 255, 145)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(255, 222, 67)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(230, 159, 108)",\n                "rgb(255, 115, 255)",\n                "rgb(201, 128, 255)",\n                "rgb(113, 180, 255)",\n                "rgb(255, 237, 63)",\n                "rgb(255, 121, 121)",\n                "rgb(136, 255, 65)",\n                "rgb(65, 255, 255)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Masked Mime"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": 0.7,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(102, 102, 102)",\n            "MINIMAP_BORDER": "rgb(121, 121, 121)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(0, 0, 0)",\n            "OUTBOUNDS": "rgb(91, 91, 91)",\n            "OUTBOUNDS_OPACITY": 0.1,\n            "INBOUNDS_OUTLINE": "rgb(91, 91, 91)",\n            "INBOUNDS_FILL": "rgb(146, 146, 146)",\n            "GRID": "rgb(0, 0, 0)",\n            "HEALTH_BAR_BACKGROUND": "rgb(253, 253, 253)",\n            "LOW_HEALTH_BAR": "rgb(226, 0, 0)",\n            "MEDIUM_HEALTH_BAR": "rgb(238, 255, 0)",\n            "HIGH_HEALTH_BAR": "rgb(68, 255, 0)",\n            "PLAYER_FILL": "rgb(0, 69, 254)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(255, 0, 0)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(135, 135, 135)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(255, 232, 105)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(252, 118, 119)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(118, 141, 252)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(241, 119, 221)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(44, 82, 34)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(0, 0, 0)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(0, 79, 255)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(0, 3, 255)",\n                "rgb(0, 70, 255)",\n                "rgb(0, 101, 255)",\n                "rgb(0, 121, 255)",\n                "rgb(0, 136, 255)",\n                "rgb(0, 157, 255)",\n                "rgb(0, 213, 255)",\n                "rgb(65, 255, 255)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Blue"\n        },\n        {\n            "SHOW_PROJECTILE_HEALTH": false,\n            "RENDER_AS_CIRCLE": false,\n            "SPIN_INTENSITY": 0.01,\n            "GUI_SCALE": 0.8,\n            "GRID_ALPHA": 0,\n            "GRID_SIZE": 25,\n            "STROKE_INTENSITY": -10,\n            "STROKE_SIZE": 4,\n            "MINIMAP_BACKGROUND": "rgb(50, 50, 50)",\n            "MINIMAP_BORDER": "rgb(152, 104, 149)",\n            "MINIMAP_PLAYER_FILL": "rgb(0, 0, 0)",\n            "MINIMAP_BACKGROUND_ALPHA": 0.6,\n            "LEADERBOARD_ARROW_FILL": "rgb(255, 255, 255)",\n            "OUTBOUNDS": "rgb(15, 15, 15)",\n            "OUTBOUNDS_OPACITY": 0.5,\n            "INBOUNDS_OUTLINE": "rgb(15, 15, 15)",\n            "INBOUNDS_FILL": "rgb(0, 0, 0)",\n            "GRID": "rgb(17, 17, 17)",\n            "HEALTH_BAR_BACKGROUND": "rgb(85, 85, 85)",\n            "LOW_HEALTH_BAR": "rgb(255, 255, 255)",\n            "MEDIUM_HEALTH_BAR": "rgb(255, 255, 255)",\n            "HIGH_HEALTH_BAR": "rgb(255, 255, 255)",\n            "PLAYER_FILL": "rgb(0, 55, 255)",\n            "PLAYER_STROKE": "rgb(0, 0, 0)",\n            "ENEMY_FILL": "rgb(20, 0, 0)",\n            "ENEMY_STROKE": "rgb(0, 0, 0)",\n            "NECRO_FILL": "rgb(252, 195, 118)",\n            "NECRO_STROKE": "rgb(0, 0, 0)",\n            "TURRET_FILL": "rgb(0, 6, 15)",\n            "TURRET_STROKE": "rgb(0, 0, 0)",\n            "SMASHER_FILL": "rgb(79, 79, 79)",\n            "SMASHER_STROKE": "rgb(0, 0, 0)",\n            "SQUARE_FILL": "rgb(20, 20, 0)",\n            "SQUARE_STROKE": "rgb(0, 0, 0)",\n            "TRIANGLE_FILL": "rgb(23, 0, 0)",\n            "TRIANGLE_STROKE": "rgb(0, 0, 0)",\n            "PENTAGON_FILL": "rgb(100, 7, 158)",\n            "PENTAGON_STROKE": "rgb(0, 0, 0)",\n            "CRASHER_FILL": "rgb(22, 5, 23)",\n            "CRASHER_STROKE": "rgb(0, 0, 0)",\n            "SHINY_FILL": "rgb(255, 255, 255)",\n            "SHINY_STROKE": "rgb(0, 0, 0)",\n            "MYTHICAL_FILL": "rgb(253, 165, 77)",\n            "MYTHICAL_STROKE": "rgb(0, 0, 0)",\n            "SCORE_BAR_FILL": "rgb(67, 255, 145)",\n            "SCORE_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "XP_BAR_FILL": "rgb(255, 222, 67)",\n            "XP_BAR_BACKGROUND": "rgb(0, 0, 0)",\n            "CLAN_FILL": "rgb(0, 255, 0)",\n            "NAME_FILL": "rgb(255, 255, 255)",\n            "UPGRADES_BACKGROUND": "rgb(0, 0, 0)",\n            "UPGRADES": [\n                "rgb(255, 226, 128)",\n                "rgb(255, 49, 160)",\n                "rgb(136, 45, 255)",\n                "rgb(45, 90, 255)",\n                "rgb(255, 222, 38)",\n                "rgb(255, 38, 38)",\n                "rgb(149, 255, 38)",\n                "rgb(23, 210, 255)",\n                "rgb(44, 46, 223)"\n            ],\n            "name": "Aeros"\n        }\n    ]\n};\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/const/default_theme.ts?')},"./views/ts/const/enums.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.InputMap = exports.PlayerStatus = exports.Inputs = exports.TankCategories = exports.ConfigOptionTypes = exports.SpinType = exports.EntityIdentityIds = exports.UpgradeStats = exports.DyingPhase = exports.ShinyType = exports.ProjectileType = exports.ShapeType = exports.EntityType = exports.FieldType = exports.CensusProperties = exports.IncomingPacketHeader = exports.OutgoingPacketHeader = exports.RenderPhase = void 0;\n/** The phase the canvas is on while rendering. */\nvar RenderPhase;\n(function (RenderPhase) {\n    /** The canvas is rendering the homescreen. */\n    RenderPhase[RenderPhase["Home"] = 0] = "Home";\n    /** The canvas is rendering the game. */\n    RenderPhase[RenderPhase["Game"] = 1] = "Game";\n    /** The canvas is rendering the game while the player is dead. */\n    RenderPhase[RenderPhase["Dead"] = 2] = "Dead";\n})(RenderPhase || (exports.RenderPhase = RenderPhase = {}));\n;\n/** An enum representing outgoing packets. */\nvar OutgoingPacketHeader;\n(function (OutgoingPacketHeader) {\n    OutgoingPacketHeader[OutgoingPacketHeader["Spawn"] = 0] = "Spawn";\n    OutgoingPacketHeader[OutgoingPacketHeader["Input"] = 1] = "Input";\n    OutgoingPacketHeader[OutgoingPacketHeader["Stat"] = 2] = "Stat";\n    OutgoingPacketHeader[OutgoingPacketHeader["Upgrades"] = 3] = "Upgrades";\n    OutgoingPacketHeader[OutgoingPacketHeader["Chat"] = 4] = "Chat";\n    OutgoingPacketHeader[OutgoingPacketHeader["Ping"] = 5] = "Ping";\n    OutgoingPacketHeader[OutgoingPacketHeader["Clan"] = 6] = "Clan";\n    OutgoingPacketHeader[OutgoingPacketHeader["ArenaUpdate"] = 7] = "ArenaUpdate";\n    OutgoingPacketHeader[OutgoingPacketHeader["Ready"] = 8] = "Ready";\n})(OutgoingPacketHeader || (exports.OutgoingPacketHeader = OutgoingPacketHeader = {}));\n;\n/** An enum representing incoming packets. */\nvar IncomingPacketHeader;\n(function (IncomingPacketHeader) {\n    IncomingPacketHeader[IncomingPacketHeader["Update"] = 0] = "Update";\n    IncomingPacketHeader[IncomingPacketHeader["Stat"] = 1] = "Stat";\n    IncomingPacketHeader[IncomingPacketHeader["Upgrades"] = 2] = "Upgrades";\n    IncomingPacketHeader[IncomingPacketHeader["Notification"] = 3] = "Notification";\n    IncomingPacketHeader[IncomingPacketHeader["ServerInfo"] = 4] = "ServerInfo";\n    IncomingPacketHeader[IncomingPacketHeader["Cipher"] = 5] = "Cipher";\n    IncomingPacketHeader[IncomingPacketHeader["EloChange"] = 6] = "EloChange";\n    IncomingPacketHeader[IncomingPacketHeader["Pong"] = 7] = "Pong";\n})(IncomingPacketHeader || (exports.IncomingPacketHeader = IncomingPacketHeader = {}));\n;\n/** Every census property the server can send. */\nvar CensusProperties;\n(function (CensusProperties) {\n    CensusProperties[CensusProperties["Position"] = 0] = "Position";\n    CensusProperties[CensusProperties["Velocity"] = 1] = "Velocity";\n    CensusProperties[CensusProperties["Angle"] = 2] = "Angle";\n    CensusProperties[CensusProperties["Radius"] = 3] = "Radius";\n    CensusProperties[CensusProperties["Health"] = 4] = "Health";\n    CensusProperties[CensusProperties["MaxHealth"] = 5] = "MaxHealth";\n    CensusProperties[CensusProperties["Alive"] = 6] = "Alive";\n    CensusProperties[CensusProperties["IdentityId"] = 7] = "IdentityId";\n    CensusProperties[CensusProperties["Ticks"] = 8] = "Ticks";\n    CensusProperties[CensusProperties["Clan"] = 9] = "Clan";\n    // TANK ONLY\n    CensusProperties[CensusProperties["Name"] = 10] = "Name";\n    CensusProperties[CensusProperties["Fov"] = 11] = "Fov";\n    CensusProperties[CensusProperties["Score"] = 12] = "Score";\n    CensusProperties[CensusProperties["Invincible"] = 13] = "Invincible";\n    CensusProperties[CensusProperties["Invisible"] = 14] = "Invisible";\n    CensusProperties[CensusProperties["Turrets"] = 15] = "Turrets";\n    CensusProperties[CensusProperties["Message"] = 16] = "Message";\n    CensusProperties[CensusProperties["Ready"] = 17] = "Ready";\n    // SHAPE ONLY\n    CensusProperties[CensusProperties["ShapeType"] = 18] = "ShapeType";\n    CensusProperties[CensusProperties["Shiny"] = 19] = "Shiny";\n    // PROJECTILE ONLY\n    CensusProperties[CensusProperties["Owner"] = 20] = "Owner";\n    CensusProperties[CensusProperties["Turret"] = 21] = "Turret";\n    CensusProperties[CensusProperties["ProjectileType"] = 22] = "ProjectileType";\n})(CensusProperties || (exports.CensusProperties = CensusProperties = {}));\n;\n/** An enum representing the field types the server can send. */\nvar FieldType;\n(function (FieldType) {\n    FieldType[FieldType["Create"] = 0] = "Create";\n    FieldType[FieldType["Update"] = 1] = "Update";\n    FieldType[FieldType["Delete"] = 2] = "Delete";\n})(FieldType || (exports.FieldType = FieldType = {}));\n;\n/** The type of entity. */\nvar EntityType;\n(function (EntityType) {\n    EntityType[EntityType["Generic"] = -1] = "Generic";\n    EntityType[EntityType["Tank"] = 0] = "Tank";\n    EntityType[EntityType["Shape"] = 1] = "Shape";\n    EntityType[EntityType["Projectile"] = 2] = "Projectile";\n})(EntityType || (exports.EntityType = EntityType = {}));\n;\n/** The type of shape. */\nvar ShapeType;\n(function (ShapeType) {\n    ShapeType[ShapeType["Unknown"] = -1] = "Unknown";\n    ShapeType[ShapeType["Square"] = 0] = "Square";\n    ShapeType[ShapeType["Triangle"] = 1] = "Triangle";\n    ShapeType[ShapeType["SmallCrasher"] = 2] = "SmallCrasher";\n    ShapeType[ShapeType["LargeCrasher"] = 3] = "LargeCrasher";\n    ShapeType[ShapeType["Pentagon"] = 4] = "Pentagon";\n    ShapeType[ShapeType["AlphaPentagon"] = 5] = "AlphaPentagon";\n})(ShapeType || (exports.ShapeType = ShapeType = {}));\n;\n/** The type of projectile. */\nvar ProjectileType;\n(function (ProjectileType) {\n    ProjectileType[ProjectileType["Bullet"] = 0] = "Bullet";\n    ProjectileType[ProjectileType["AutoBullet"] = 1] = "AutoBullet";\n    ProjectileType[ProjectileType["Drone"] = 2] = "Drone";\n    ProjectileType[ProjectileType["Trap"] = 3] = "Trap";\n    ProjectileType[ProjectileType["NecromancerDrone"] = 4] = "NecromancerDrone";\n    ProjectileType[ProjectileType["Minion"] = 5] = "Minion";\n    ProjectileType[ProjectileType["Railgun"] = 6] = "Railgun";\n})(ProjectileType || (exports.ProjectileType = ProjectileType = {}));\n;\n/** The shiny type. */\nvar ShinyType;\n(function (ShinyType) {\n    ShinyType[ShinyType["Normal"] = 0] = "Normal";\n    ShinyType[ShinyType["Shiny"] = 1] = "Shiny";\n    ShinyType[ShinyType["Mythical"] = 2] = "Mythical";\n})(ShinyType || (exports.ShinyType = ShinyType = {}));\n/** An enum representing the "dying phase". */\nvar DyingPhase;\n(function (DyingPhase) {\n    DyingPhase[DyingPhase["None"] = -1] = "None";\n    DyingPhase[DyingPhase["Alive"] = 0] = "Alive";\n    DyingPhase[DyingPhase["Dying"] = 1] = "Dying";\n    DyingPhase[DyingPhase["Dead"] = 2] = "Dead";\n})(DyingPhase || (exports.DyingPhase = DyingPhase = {}));\n;\n/** An enum representing the stats a tank can upgrade. */\nvar UpgradeStats;\n(function (UpgradeStats) {\n    UpgradeStats[UpgradeStats["HealthRegen"] = 0] = "HealthRegen";\n    UpgradeStats[UpgradeStats["MaxHealth"] = 1] = "MaxHealth";\n    UpgradeStats[UpgradeStats["BodyDamage"] = 2] = "BodyDamage";\n    UpgradeStats[UpgradeStats["ProjectileSpeed"] = 3] = "ProjectileSpeed";\n    UpgradeStats[UpgradeStats["ProjectilePenetration"] = 4] = "ProjectilePenetration";\n    UpgradeStats[UpgradeStats["ProjectileDamage"] = 5] = "ProjectileDamage";\n    UpgradeStats[UpgradeStats["ProjectileReload"] = 6] = "ProjectileReload";\n    UpgradeStats[UpgradeStats["MovementSpeed"] = 7] = "MovementSpeed";\n    UpgradeStats[UpgradeStats["Fov"] = 8] = "Fov";\n    UpgradeStats[UpgradeStats["Sentinel"] = 9] = "Sentinel";\n})(UpgradeStats || (exports.UpgradeStats = UpgradeStats = {}));\n;\nvar EntityIdentityIds;\n(function (EntityIdentityIds) {\n    EntityIdentityIds[EntityIdentityIds["Projectile"] = 0] = "Projectile";\n    EntityIdentityIds[EntityIdentityIds["Square"] = 1] = "Square";\n    EntityIdentityIds[EntityIdentityIds["Triangle"] = 2] = "Triangle";\n    EntityIdentityIds[EntityIdentityIds["SmallCrasher"] = 3] = "SmallCrasher";\n    EntityIdentityIds[EntityIdentityIds["LargeCrasher"] = 4] = "LargeCrasher";\n    EntityIdentityIds[EntityIdentityIds["Pentagon"] = 5] = "Pentagon";\n    EntityIdentityIds[EntityIdentityIds["AlphaPentagon"] = 6] = "AlphaPentagon";\n    EntityIdentityIds[EntityIdentityIds["BasicTank"] = 7] = "BasicTank";\n    EntityIdentityIds[EntityIdentityIds["Twin"] = 8] = "Twin";\n    EntityIdentityIds[EntityIdentityIds["FlankGuard"] = 9] = "FlankGuard";\n    EntityIdentityIds[EntityIdentityIds["Sniper"] = 10] = "Sniper";\n    EntityIdentityIds[EntityIdentityIds["MachineGun"] = 11] = "MachineGun";\n    EntityIdentityIds[EntityIdentityIds["TripleShot"] = 12] = "TripleShot";\n    EntityIdentityIds[EntityIdentityIds["QuadTank"] = 13] = "QuadTank";\n    EntityIdentityIds[EntityIdentityIds["TwinFlank"] = 14] = "TwinFlank";\n    EntityIdentityIds[EntityIdentityIds["Assassin"] = 15] = "Assassin";\n    EntityIdentityIds[EntityIdentityIds["Hunter"] = 16] = "Hunter";\n    EntityIdentityIds[EntityIdentityIds["Destroyer"] = 17] = "Destroyer";\n    EntityIdentityIds[EntityIdentityIds["Gunner"] = 18] = "Gunner";\n    EntityIdentityIds[EntityIdentityIds["Triplet"] = 19] = "Triplet";\n    EntityIdentityIds[EntityIdentityIds["PentaShot"] = 20] = "PentaShot";\n    EntityIdentityIds[EntityIdentityIds["SpreadShot"] = 21] = "SpreadShot";\n    EntityIdentityIds[EntityIdentityIds["OctoTank"] = 22] = "OctoTank";\n    EntityIdentityIds[EntityIdentityIds["TripleTwin"] = 23] = "TripleTwin";\n    EntityIdentityIds[EntityIdentityIds["Ranger"] = 24] = "Ranger";\n    EntityIdentityIds[EntityIdentityIds["Stalker"] = 25] = "Stalker";\n    EntityIdentityIds[EntityIdentityIds["Predator"] = 26] = "Predator";\n    EntityIdentityIds[EntityIdentityIds["Streamliner"] = 27] = "Streamliner";\n    EntityIdentityIds[EntityIdentityIds["Sprayer"] = 28] = "Sprayer";\n    EntityIdentityIds[EntityIdentityIds["Annihilator"] = 29] = "Annihilator";\n    EntityIdentityIds[EntityIdentityIds["TriAngle"] = 30] = "TriAngle";\n    EntityIdentityIds[EntityIdentityIds["Booster"] = 31] = "Booster";\n    EntityIdentityIds[EntityIdentityIds["Fighter"] = 32] = "Fighter";\n    EntityIdentityIds[EntityIdentityIds["Smasher"] = 33] = "Smasher";\n    EntityIdentityIds[EntityIdentityIds["Landmine"] = 34] = "Landmine";\n    EntityIdentityIds[EntityIdentityIds["Spike"] = 35] = "Spike";\n    EntityIdentityIds[EntityIdentityIds["MegaSmasher"] = 36] = "MegaSmasher";\n    EntityIdentityIds[EntityIdentityIds["AutoGunner"] = 37] = "AutoGunner";\n    EntityIdentityIds[EntityIdentityIds["Overseer"] = 38] = "Overseer";\n    EntityIdentityIds[EntityIdentityIds["Overlord"] = 39] = "Overlord";\n    EntityIdentityIds[EntityIdentityIds["Manager"] = 40] = "Manager";\n    EntityIdentityIds[EntityIdentityIds["Hybrid"] = 41] = "Hybrid";\n    EntityIdentityIds[EntityIdentityIds["Trapper"] = 42] = "Trapper";\n    EntityIdentityIds[EntityIdentityIds["TriTrapper"] = 43] = "TriTrapper";\n    EntityIdentityIds[EntityIdentityIds["GunnerTrapper"] = 44] = "GunnerTrapper";\n    EntityIdentityIds[EntityIdentityIds["Overtrapper"] = 45] = "Overtrapper";\n    EntityIdentityIds[EntityIdentityIds["MegaTrapper"] = 46] = "MegaTrapper";\n    EntityIdentityIds[EntityIdentityIds["AutoTrapper"] = 47] = "AutoTrapper";\n    EntityIdentityIds[EntityIdentityIds["Battleship"] = 48] = "Battleship";\n    EntityIdentityIds[EntityIdentityIds["Necromancer"] = 49] = "Necromancer";\n    EntityIdentityIds[EntityIdentityIds["Factory"] = 50] = "Factory";\n    EntityIdentityIds[EntityIdentityIds["Spectator"] = 51] = "Spectator";\n    EntityIdentityIds[EntityIdentityIds["Railgun"] = 52] = "Railgun";\n})(EntityIdentityIds || (exports.EntityIdentityIds = EntityIdentityIds = {}));\n;\nvar SpinType;\n(function (SpinType) {\n    SpinType[SpinType["None"] = 0] = "None";\n    SpinType[SpinType["Normal"] = 1] = "Normal";\n    SpinType[SpinType["Tbag"] = 2] = "Tbag";\n})(SpinType || (exports.SpinType = SpinType = {}));\n;\n/** An enum representing config option types. */\nvar ConfigOptionTypes;\n(function (ConfigOptionTypes) {\n    ConfigOptionTypes[ConfigOptionTypes["Colour"] = 0] = "Colour";\n    ConfigOptionTypes[ConfigOptionTypes["Number"] = 1] = "Number";\n    ConfigOptionTypes[ConfigOptionTypes["Boolean"] = 2] = "Boolean";\n    ConfigOptionTypes[ConfigOptionTypes["ConstantText"] = 3] = "ConstantText";\n    ConfigOptionTypes[ConfigOptionTypes["Header"] = 4] = "Header";\n    ConfigOptionTypes[ConfigOptionTypes["Subheader"] = 5] = "Subheader";\n})(ConfigOptionTypes || (exports.ConfigOptionTypes = ConfigOptionTypes = {}));\n;\nvar TankCategories;\n(function (TankCategories) {\n    TankCategories[TankCategories["Destroyer"] = 0] = "Destroyer";\n    TankCategories[TankCategories["Drone"] = 1] = "Drone";\n    TankCategories[TankCategories["Factory"] = 2] = "Factory";\n    TankCategories[TankCategories["Smasher"] = 3] = "Smasher";\n    TankCategories[TankCategories["Spammer"] = 4] = "Spammer";\n    TankCategories[TankCategories["Trapper"] = 5] = "Trapper";\n    TankCategories[TankCategories["Sniper"] = 6] = "Sniper";\n    TankCategories[TankCategories["Fighter"] = 7] = "Fighter";\n    TankCategories[TankCategories["Illegal"] = 8] = "Illegal";\n})(TankCategories || (exports.TankCategories = TankCategories = {}));\n/** An enum representing inputs. */\nvar Inputs;\n(function (Inputs) {\n    Inputs[Inputs["Shoot"] = 1] = "Shoot";\n    Inputs[Inputs["Up"] = 2] = "Up";\n    Inputs[Inputs["Down"] = 4] = "Down";\n    Inputs[Inputs["Left"] = 8] = "Left";\n    Inputs[Inputs["Right"] = 16] = "Right";\n    Inputs[Inputs["Repel"] = 32] = "Repel";\n    Inputs[Inputs["LevelUp"] = 64] = "LevelUp";\n    Inputs[Inputs["SwitchTank"] = 128] = "SwitchTank";\n    Inputs[Inputs["GodMode"] = 256] = "GodMode";\n    Inputs[Inputs["Suicide"] = 512] = "Suicide";\n})(Inputs || (exports.Inputs = Inputs = {}));\n;\nvar PlayerStatus;\n(function (PlayerStatus) {\n    PlayerStatus[PlayerStatus["Player"] = 0] = "Player";\n    PlayerStatus[PlayerStatus["Moderator"] = 1] = "Moderator";\n    PlayerStatus[PlayerStatus["Developer"] = 2] = "Developer";\n})(PlayerStatus || (exports.PlayerStatus = PlayerStatus = {}));\n;\n/** A map representing a mapping of keycodes to inputs. */\nexports.InputMap = new Map([\n    ["ArrowUp", Inputs.Up],\n    ["KeyW", Inputs.Up],\n    ["ArrowDown", Inputs.Down],\n    ["KeyS", Inputs.Down],\n    ["ArrowLeft", Inputs.Left],\n    ["KeyA", Inputs.Left],\n    ["ArrowRight", Inputs.Right],\n    ["KeyD", Inputs.Right],\n    ["Space", Inputs.Shoot],\n    ["KeyK", Inputs.LevelUp],\n    ["ShiftLeft", Inputs.Repel],\n    ["ShiftRight", Inputs.Repel],\n    ["Backslash", Inputs.SwitchTank],\n    ["Semicolon", Inputs.GodMode],\n    ["KeyO", Inputs.Suicide]\n]);\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/const/enums.ts?')},"./views/ts/const/tankdefs.ts":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.TANK_DEFS = void 0;\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst enums_1 = __webpack_require__(/*! ./enums */ "./views/ts/const/enums.ts");\n;\n;\n;\nexports.TANK_DEFS = [\n    {\n        "name": "Projectile",\n        "turrets": [],\n        "max_stats": new Array(9).fill(0),\n        "category": enums_1.TankCategories.Illegal,\n        "speed": 0\n    },\n    {\n        "name": "Square",\n        "turrets": [],\n        "max_stats": new Array(9).fill(0),\n        "category": enums_1.TankCategories.Illegal,\n        "speed": 1\n    },\n    {\n        "name": "Triangle",\n        "turrets": [],\n        "max_stats": new Array(9).fill(0),\n        "category": enums_1.TankCategories.Illegal,\n        "speed": 1\n    },\n    {\n        "name": "Crasher",\n        "turrets": [],\n        "max_stats": new Array(9).fill(0),\n        "category": enums_1.TankCategories.Illegal,\n        "speed": 1.5\n    },\n    {\n        "name": "Large Crasher",\n        "turrets": [],\n        "max_stats": new Array(9).fill(0),\n        "category": enums_1.TankCategories.Illegal,\n        "speed": 1.5\n    },\n    {\n        "name": "Pentagon",\n        "turrets": [],\n        "max_stats": new Array(9).fill(0),\n        "category": enums_1.TankCategories.Illegal,\n        "speed": 1\n    },\n    {\n        "name": "Alpha Pentagon",\n        "turrets": [],\n        "max_stats": new Array(9).fill(0),\n        "category": enums_1.TankCategories.Illegal,\n        "speed": 0.3\n    },\n    {\n        "name": "Basic Tank",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Twin",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": -16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Flank Guard",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Sniper",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 66,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Sniper\n    },\n    {\n        "name": "Machine Gun",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 22,\n                "trapezoidal": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Triple Shot",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": -Math.PI / 4,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI / 4,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Quad Tank",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": -Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Twin Flank",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": -16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": -16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": 16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Assassin",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 72,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Sniper\n    },\n    {\n        "name": "Hunter",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 66,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 33,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Sniper\n    },\n    {\n        "name": "Destroyer",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 41,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Destroyer\n    },\n    {\n        "name": "Gunner",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": -19.2,\n                "length": 39,\n                "width": 15,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 19.2,\n                "length": 39,\n                "width": 15,\n                "trapezoidal": false,\n                "z_index": -1\n            },\n            {\n                "angle": 0.0,\n                "x_offset": -10.4,\n                "length": 51,\n                "width": 15,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 10.4,\n                "length": 51,\n                "width": 15,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Triplet",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": -16,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 16,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Penta Shot",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": -Math.PI / 4,\n                "x_offset": 0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI / 4,\n                "x_offset": 0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": -Math.PI / 8,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI / 8,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0,\n                "x_offset": 0,\n                "length": 66,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Spread Shot",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 1.3089969,\n                "x_offset": 0.0,\n                "length": 39,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": -1.3089969,\n                "x_offset": 0.0,\n                "length": 39,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": 1.0471976,\n                "x_offset": 0.0,\n                "length": 43,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": -1.0471976,\n                "x_offset": 0.0,\n                "length": 43,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.7853982,\n                "x_offset": 0.0,\n                "length": 46,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": -0.7853982,\n                "x_offset": 0.0,\n                "length": 46,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.5235988,\n                "x_offset": 0.0,\n                "length": 50,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": -0.5235988,\n                "x_offset": 0.0,\n                "length": 50,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.26179938,\n                "x_offset": 0.0,\n                "length": 54,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": -0.26179938,\n                "x_offset": 0.0,\n                "length": 54,\n                "width": 17,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Octo Tank",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": -Math.PI / 4,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI / 4,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": -2.3561944,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 2.3561944,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": -Math.PI / 2,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI / 2,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0,\n                "x_offset": 0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Triple Twin",\n        // turrets: Vec::from(\n        //     [\n        //         Turret\n        //         {\n        //             angle: 0.0,\n        //             x_offset: -16.0,\n        //             size_factor: 1.0,\n        //             length: 57,\n        //             width: 24,\n        //             recoil: 0.5,\n        //             scatter_rate: 1.0,\n        //             friction: 1.0,\n        //             projectile_type: ProjectileType::Bullet,\n        //             projectile_damage: 0.75,\n        //             projectile_penetration: 1.0,\n        //             projectile_speed: 15.0,\n        //             bullet_lifetime: 1.5,\n        //             reload: 1.0,\n        //             delay: 0.0,\n        //             reload_time: 0.0,\n        //             cycle_position: 0.0,\n        //             elasticity: 1.0\n        //         },\n        //         Turret\n        //         {\n        //             angle: 0.0,\n        //             x_offset: 16.0,\n        //             size_factor: 1.0,\n        //             length: 57,\n        //             width: 24,\n        //             recoil: 0.5,\n        //             scatter_rate: 1.0,\n        //             friction: 1.0,\n        //             projectile_type: ProjectileType::Bullet,\n        //             projectile_damage: 0.75,\n        //             projectile_penetration: 1.0,\n        //             projectile_speed: 15.0,\n        //             bullet_lifetime: 1.5,\n        //             reload: 1.0,\n        //             delay: 0.5,\n        //             reload_time: 0.0,\n        //             cycle_position: 0.0,\n        //             elasticity: 1.0\n        //         },\n        //         Turret\n        //         {\n        //             angle: 2.0943951,\n        //             x_offset: -26.0,\n        //             size_factor: 1.0,\n        //             length: 57,\n        //             width: 24,\n        //             recoil: 0.5,\n        //             scatter_rate: 1.0,\n        //             friction: 1.0,\n        //             projectile_type: ProjectileType::Bullet,\n        //             projectile_damage: 0.75,\n        //             projectile_penetration: 1.0,\n        //             projectile_speed: 15.0,\n        //             bullet_lifetime: 1.5,\n        //             reload: 1.0,\n        //             delay: 0.0,\n        //             reload_time: 0.0,\n        //             cycle_position: 0.0,\n        //             elasticity: 1.0\n        //         },\n        //         Turret\n        //         {\n        //             angle: 2.0943951,\n        //             x_offset: 26.0,\n        //             size_factor: 1.0,\n        //             length: 57,\n        //             width: 24,\n        //             recoil: 0.5,\n        //             scatter_rate: 1.0,\n        //             friction: 1.0,\n        //             projectile_type: ProjectileType::Bullet,\n        //             projectile_damage: 0.75,\n        //             projectile_penetration: 1.0,\n        //             projectile_speed: 15.0,\n        //             bullet_lifetime: 1.5,\n        //             reload: 1.0,\n        //             delay: 0.5,\n        //             reload_time: 0.0,\n        //             cycle_position: 0.0,\n        //             elasticity: 1.0\n        //         },\n        //         Turret\n        //         {\n        //             angle: -2.0943951,\n        //             x_offset: -26.0,\n        //             size_factor: 1.0,\n        //             length: 57,\n        //             width: 24,\n        //             recoil: 0.5,\n        //             scatter_rate: 1.0,\n        //             friction: 1.0,\n        //             projectile_type: ProjectileType::Bullet,\n        //             projectile_damage: 0.75,\n        //             projectile_penetration: 1.0,\n        //             projectile_speed: 15.0,\n        //             bullet_lifetime: 1.5,\n        //             reload: 1.0,\n        //             delay: 0.0,\n        //             reload_time: 0.0,\n        //             cycle_position: 0.0,\n        //             elasticity: 1.0\n        //         },\n        //         Turret\n        //         {\n        //             angle: 2.0943951,\n        //             x_offset: 26.0,\n        //             size_factor: 1.0,\n        //             length: 57,\n        //             width: 24,\n        //             recoil: 0.5,\n        //             scatter_rate: 1.0,\n        //             friction: 1.0,\n        //             projectile_type: ProjectileType::Bullet,\n        //             projectile_damage: 0.75,\n        //             projectile_penetration: 1.0,\n        //             projectile_speed: 15.0,\n        //             bullet_lifetime: 1.5,\n        //             reload: 1.0,\n        //             delay: 0.5,\n        //             reload_time: 0.0,\n        //             cycle_position: 0.0,\n        //             elasticity: 1.0\n        //         },\n        //     ]),\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": -16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 2.0943951,\n                "x_offset": -16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 2.0943951,\n                "x_offset": 16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": -2.0943951,\n                "x_offset": -16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": -2.0943951,\n                "x_offset": 16.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Ranger",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 72,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 37,\n                "width": 25,\n                "trapezoidal": true,\n                "trapezoid_reverse": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Sniper\n    },\n    {\n        "name": "Stalker",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 72,\n                "width": 24,\n                "trapezoidal": true,\n                "trapezoid_reverse": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Sniper\n    },\n    {\n        "name": "Predator",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 66,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 33,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 41,\n                "trapezoidal": false\n            }\n        ],\n        "upgrade_notif": ["Right click or shift to extend your view in the direction you\'re facing."],\n        "translation": 1000.0,\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Sniper\n    },\n    {\n        "name": "Streamliner",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 66,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 60,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 54,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Sprayer",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 66,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Annihilator",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 57,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Destroyer\n    },\n    {\n        "name": "Tri-Angle",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 3.6651914,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 2.617993,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Fighter\n    },\n    {\n        "name": "Booster",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 2.356194,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 3.92699,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 3.6651914,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 2.617993,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Fighter\n    },\n    {\n        "name": "Fighter",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": -Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 3.6651914,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": 2.617993,\n                "x_offset": 0.0,\n                "length": 48,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Fighter\n    },\n    {\n        "name": "Smasher",\n        "speed": 1.05,\n        "turrets": [],\n        "rotators": [\n            {\n                "rpt": 0.03,\n                "size": 1.15,\n                "sides": 6,\n                "angle": 0.0\n            }\n        ],\n        "disable_mouse": true,\n        "max_stats": [10, 10, 10, 0, 0, 0, 0, 10, 10],\n        "category": enums_1.TankCategories.Smasher\n    },\n    {\n        "name": "Landmine",\n        "speed": 1.05,\n        "turrets": [],\n        "rotators": [\n            {\n                "rpt": 0.015,\n                "size": 1.15,\n                "sides": 6,\n                "angle": 0.0\n            },\n            {\n                "rpt": 0.03,\n                "size": 1.15,\n                "sides": 6,\n                "angle": 0.0\n            }\n        ],\n        "disable_mouse": true,\n        "max_stats": [10, 10, 10, 0, 0, 0, 0, 10, 10],\n        "category": enums_1.TankCategories.Smasher\n    },\n    {\n        "name": "Spike",\n        "speed": 1.05,\n        "turrets": [],\n        "rotators": [\n            {\n                "rpt": 0.051,\n                "size": 1.3,\n                "sides": 3,\n                "angle": 0\n            },\n            {\n                "rpt": 0.051,\n                "size": 1.3,\n                "sides": 3,\n                "angle": Math.PI / 2\n            },\n            {\n                "rpt": 0.051,\n                "size": 1.3,\n                "sides": 3,\n                "angle": Math.PI / 3\n            },\n            {\n                "rpt": 0.051,\n                "size": 1.3,\n                "sides": 3,\n                "angle": Math.PI / 6\n            },\n        ],\n        "disable_mouse": true,\n        "max_stats": [10, 10, 10, 0, 0, 0, 0, 10, 10],\n        "category": enums_1.TankCategories.Smasher\n    },\n    {\n        "name": "Mega Smasher",\n        "speed": 0.98,\n        "turrets": [],\n        "rotators": [\n            {\n                "rpt": 0.01,\n                "size": 1.4,\n                "sides": 6,\n                "angle": 0.0\n            }\n        ],\n        "disable_mouse": true,\n        "max_stats": [10, 10, 10, 0, 0, 0, 0, 10, 10],\n        "category": enums_1.TankCategories.Smasher\n    },\n    {\n        "name": "Auto Gunner",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": -19.2,\n                "length": 39,\n                "width": 15,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 19.2,\n                "length": 39,\n                "width": 15,\n                "trapezoidal": false,\n                "z_index": -1\n            },\n            {\n                "angle": 0.0,\n                "x_offset": -10.4,\n                "length": 51,\n                "width": 15,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 10.4,\n                "length": 51,\n                "width": 15,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 32,\n                "width": 30,\n                "trapezoidal": false,\n                "auto": true,\n                "dominant": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    // {\n    //     "name": "Auto 4",\n    //     "speed": 1,\n    // "turrets": [\n    //         {\n    //             "angle": Math.PI / 4,\n    //             "x_offset": 30,\n    //             "length": 32,\n    //             "width": 30,\n    //             "trapezoidal": false,\n    //             "auto": true,\n    //         },\n    //         {\n    //             "angle": 3 * Math.PI / 4,\n    //             "x_offset": 30,\n    //             "length": 32,\n    //             "trapezoidal": false,\n    //             "auto": true,\n    //             "width": 30,\n    //         },\n    //         {\n    //             "angle": -Math.PI / 4,\n    //             "x_offset": 30,\n    //             "length": 32,\n    //             "width": 30,\n    //             "trapezoidal": false,\n    //             "auto": true,\n    //         },\n    //         {\n    //             "angle": -3 * Math.PI / 4,\n    //             "x_offset": 30,\n    //             "length": 32,\n    //             "width": 30,\n    //             "trapezoidal": false,\n    //             "auto": true,\n    //         },\n    //     ],\n    //     "disable_mouse": true\n    // },\n    {\n        "name": "Overlord",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": -Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": 0,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Drone\n    },\n    {\n        "name": "Overseer",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": -Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            }\n        ],\n        "upgrade_notif": ["Right click or shift to repel your drones away from your mouse."],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Drone\n    },\n    {\n        "name": "Manager",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Drone\n    },\n    {\n        "name": "Hybrid",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 41,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Destroyer\n    },\n    {\n        "name": "Trapper",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "y_offset": 36.0,\n                "length": 12,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Trapper\n    },\n    {\n        "name": "Tri-Trapper",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "y_offset": 36.0,\n                "length": 12,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": functions_1.TAU / 3,\n                "x_offset": 0.0,\n                "y_offset": 36.0,\n                "length": 12,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": functions_1.TAU / 3,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 24,\n                "trapezoidal": false\n            },\n            {\n                "angle": (2 * functions_1.TAU) / 3,\n                "x_offset": 0.0,\n                "y_offset": 36.0,\n                "length": 12,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": (2 * functions_1.TAU) / 3,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Trapper\n    },\n    {\n        "name": "Gunner Trapper",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": -9.6,\n                "length": 45,\n                "width": 12,\n                "trapezoidal": false\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 9.6,\n                "length": 45,\n                "width": 12,\n                "trapezoidal": false\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": 0.0,\n                "y_offset": 36.0,\n                "length": 12,\n                "width": 31.2,\n                "trapezoidal": true\n            },\n            {\n                "angle": Math.PI,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 31.2,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Trapper\n    },\n    {\n        "name": "Overtrapper",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": functions_1.TAU / 3,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": (2 * functions_1.TAU) / 3,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "y_offset": 36.0,\n                "length": 12,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Trapper\n    },\n    {\n        "name": "Mega Trapper",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0,\n                "x_offset": 0.0,\n                "y_offset": 36.0,\n                "length": 12,\n                "width": 31.2,\n                "trapezoidal": true\n            },\n            {\n                "angle": 0,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 31.2,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Trapper\n    },\n    {\n        "name": "Auto Trapper",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 32,\n                "width": 30,\n                "trapezoidal": false,\n                "auto": true,\n                "dominant": true\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "y_offset": 36.0,\n                "length": 12,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 36,\n                "width": 24,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Trapper\n    },\n    {\n        "name": "Battleship",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": Math.PI / 2,\n                "x_offset": 12.0,\n                "length": 45,\n                "width": 17,\n                "trapezoidal": true,\n                "trapezoid_reverse": true\n            },\n            {\n                "angle": Math.PI / 2,\n                "x_offset": -12.0,\n                "length": 45,\n                "width": 17,\n                "trapezoidal": true,\n                "trapezoid_reverse": true\n            },\n            {\n                "angle": (3 * Math.PI) / 2,\n                "x_offset": 12.0,\n                "length": 45,\n                "width": 17,\n                "trapezoidal": true,\n                "trapezoid_reverse": true\n            },\n            {\n                "angle": (3 * Math.PI) / 2,\n                "x_offset": -12.0,\n                "length": 45,\n                "width": 17,\n                "trapezoidal": true,\n                "trapezoid_reverse": true\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Spammer\n    },\n    {\n        "name": "Necromancer",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 44,\n                "width": 24,\n                "trapezoidal": true\n            },\n            {\n                "angle": -Math.PI / 2,\n                "x_offset": 0.0,\n                "length": 44,\n                "width": 24,\n                "trapezoidal": true\n            }\n        ],\n        "square": true,\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Drone\n    },\n    {\n        "name": "Factory",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0,\n                "x_offset": 0.0,\n                "length": 42,\n                "width": 24,\n                "trapezoidal": true\n            }\n        ],\n        "square": true,\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Factory\n    },\n    {\n        "name": "Spectator",\n        "speed": 2,\n        "turrets": [],\n        "upgrade_notif": ["Zoom in and out (by scrolling) to change your Field of View!"],\n        "max_stats": [0, 0, 0, 0, 0, 0, 0, 10, 0],\n        "category": enums_1.TankCategories.Illegal\n    },\n    {\n        "name": "Railgun",\n        "speed": 1,\n        "turrets": [\n            {\n                "angle": 0.0,\n                "x_offset": 0.0,\n                "length": 57,\n                "width": 57,\n                "trapezoidal": false\n            }\n        ],\n        "max_stats": [7, 7, 7, 7, 7, 7, 7, 7, 7],\n        "category": enums_1.TankCategories.Destroyer\n    }\n];\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/const/tankdefs.ts?')},"./views/ts/entity/base_entity.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst nipplejs_1 = __importDefault(__webpack_require__(/*! nipplejs */ "./node_modules/nipplejs/dist/nipplejs.js"));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\nconst enums_1 = __webpack_require__(/*! ../const/enums */ "./views/ts/const/enums.ts");\nconst tankdefs_1 = __webpack_require__(/*! ../const/tankdefs */ "./views/ts/const/tankdefs.ts");\nconst color_1 = __importDefault(__webpack_require__(/*! ../utils/color */ "./views/ts/utils/color.ts"));\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst vector_1 = __importDefault(__webpack_require__(/*! ../utils/vector */ "./views/ts/utils/vector.ts"));\nconst firebase_1 = __importDefault(__webpack_require__(/*! ../auth/firebase */ "./views/ts/auth/firebase.ts"));\nconst { app, auth, provider, GoogleAuthProvider, onAuthStateChanged, signInWithPopup, signOut } = firebase_1.default;\n/** A class representing a the base entity. */\nclass BaseEntity {\n    /** Gets the percent of health left for the entity. */\n    get health_percent() {\n        return (0, functions_1.constrain)(0, this.lerp_health() / this.max_health, 1);\n    }\n    ;\n    get identity() {\n        return tankdefs_1.TANK_DEFS[this.identity_id] || {};\n    }\n    get target_offset() {\n        if (this.id != this.client.entity.id)\n            return new vector_1.default(0, 0);\n        const input = this.client.polyfight_canvas.inputs;\n        let x_offset = ((input & enums_1.Inputs.Left) == enums_1.Inputs.Left ? -1 : 0) + ((input & enums_1.Inputs.Right) == enums_1.Inputs.Right ? 1 : 0);\n        let y_offset = ((input & enums_1.Inputs.Up) == enums_1.Inputs.Up ? -1 : 0) + ((input & enums_1.Inputs.Down) == enums_1.Inputs.Down ? 1 : 0);\n        const magSq = x_offset * x_offset + y_offset * y_offset;\n        if (magSq > 1) {\n            const mag = Math.sqrt(magSq);\n            x_offset /= mag;\n            y_offset /= mag;\n        }\n        // self.base_entity.identity.base_speed * 1.6 * (1.07_f32.powf(self.stats.stat_investments[UpgradeStats::MovementSpeed as usize] as f32)) / (1.015_f32.powf((self.level - 1) as f32));\n        const camera_speed = this.identity.speed * 1.6 * (Math.pow(1.07, this.client.polyfight_canvas.stats.stats_value[enums_1.UpgradeStats.MovementSpeed])) / (Math.pow(1.015, this.client.entity.level));\n        x_offset *= camera_speed;\n        y_offset *= camera_speed;\n        return new vector_1.default(x_offset, y_offset);\n    }\n    constructor(client) {\n        this.log_update = false;\n        /** The ID of the entity. */\n        this.id = -1;\n        /** The radius of the entity. */\n        this.radius = 0;\n        /** The target radius of the entity (only during death animations). */\n        this.target_radius = 0;\n        this.clan = -1;\n        /** Whether or not this is the first spawn in the server. */\n        this.first_server_spawn = true;\n        /** The health of the entity. */\n        this.health = -1;\n        /** The target health of the entity. */\n        this.target_health = -1;\n        /** The maximum health of the entity. */\n        this.max_health = 1;\n        /** The percent of health since the last tick. */\n        this.last_health_percent = 1;\n        /** The position of the entity. */\n        this.position = new vector_1.default(-1, -1);\n        /** The target position, given by the server. */\n        this.target_position = new vector_1.default(0, 0);\n        /** The velocity of the entity. */\n        this.velocity = new vector_1.default(0, 0);\n        /** The target velocity. */\n        this.target_velocity = new vector_1.default(0, 0);\n        /** The angle of the entity, in radians. */\n        this.angle = 0;\n        /** The target angle of the entity in radians, given by the server. */\n        this.target_angle = 0;\n        /** The timestamp at which the entity spawned. */\n        this.spawn_timestamp = -1;\n        /** The FOV of the entity. */\n        this.fov = 1;\n        /** The target FOV of the entity, given by the server. */\n        this.target_fov = 1;\n        this.desired_fov = -1;\n        /** The opacity of the health bar. */\n        this.health_bar_opacity = 1;\n        /** The target opacity of the health bar. */\n        this.target_health_bar_opacity = 1;\n        /** Whether or not the entity has been updated by the server. */\n        this.updated = true;\n        this.type = enums_1.EntityType.Generic;\n        /** The number of ticks the entity has lived for. */\n        this.ticks = 0;\n        /** Whether or not the entity is dying. */\n        this.dying_phase = enums_1.DyingPhase.None;\n        /** The opacity of the entity. */\n        this.opacity = 1;\n        /** The target opacity of the entity. */\n        this.target_opacity = 1;\n        /** Whether or not the entity should be revived. */\n        this.dont_revive = false;\n        /** The amount to blend with the damage color. */\n        this.damage_blend = 0;\n        /** The target amount to blend with the damage color. */\n        this.target_damage_blend = 0;\n        /** The time alive, prettified. */\n        this.time_alive = "";\n        /** The entity identity ID. */\n        this.identity_id = enums_1.EntityIdentityIds.BasicTank;\n        this.show_name = true;\n        this.show_health = true;\n        this.z_index = -99;\n        this.offset = new vector_1.default(0, 0);\n        /** A map of every census property to its parsing function. */\n        this.census_map = new Map([\n            [enums_1.CensusProperties.Position, (entity, stream) => {\n                    const [x, y] = [stream.read_float32(), stream.read_float32()];\n                    entity.target_position.x = x;\n                    entity.target_position.y = y;\n                }],\n            [enums_1.CensusProperties.Velocity, (entity, stream) => {\n                    const [x, y] = [stream.read_float32(), stream.read_float32()];\n                    // if (entity.id == this.client.entity.id) return;\n                    entity.target_velocity.x = x;\n                    entity.target_velocity.y = y;\n                }],\n            [enums_1.CensusProperties.Angle, (entity, stream) => {\n                    let angle = stream.read_float32();\n                    if (entity.id != this.client.entity.id || this.client.polyfight_canvas.auto_spin != enums_1.SpinType.None)\n                        entity.target_angle = angle;\n                }],\n            [enums_1.CensusProperties.Radius, (entity, stream) => {\n                    let radius = stream.read_float32();\n                    if (entity.dying_phase == enums_1.DyingPhase.Alive)\n                        entity.radius = radius;\n                }],\n            [enums_1.CensusProperties.Health, (entity, stream) => {\n                    let is_new = entity.health == -1;\n                    let health = stream.read_float32();\n                    if (health < this.target_health)\n                        this.target_damage_blend = 1;\n                    entity.target_health = health;\n                    if (is_new)\n                        entity.health = health;\n                }],\n            [enums_1.CensusProperties.MaxHealth, (entity, stream) => {\n                    let is_new = entity.max_health == -1;\n                    entity.max_health = stream.read_float32();\n                    if (is_new)\n                        entity.health = entity.max_health;\n                }],\n            [enums_1.CensusProperties.Name, (entity, stream) => {\n                    entity.name = stream.read_string();\n                }],\n            [enums_1.CensusProperties.Fov, (entity, stream) => {\n                    let target_fov = stream.read_float32();\n                    entity.target_fov = entity.desired_fov == -1 ? target_fov : (entity.desired_fov = (0, functions_1.constrain)(0, entity.desired_fov, target_fov));\n                }],\n            [enums_1.CensusProperties.Score, (entity, stream) => {\n                    let score = stream.read_float32();\n                    entity.target_score = score;\n                }],\n            [enums_1.CensusProperties.Invincible, (entity, stream) => {\n                    let spawning = !!stream.read_uint8();\n                    if (entity.id == this.client.entity.id && entity.spawning != spawning) {\n                        this.client.polyfight_canvas.add_notification({ message: `Invincibility: ${spawning ? "ON" : "OFF"}`, r: spawning ? 0 : 255, g: spawning ? 255 : 0, b: 0 });\n                    }\n                    entity.spawning = spawning;\n                }],\n            [enums_1.CensusProperties.Invisible, (entity, stream) => {\n                    let opacity = stream.read_float32();\n                    entity.dont_revive = !(0, functions_1.fuzzy_equals)(opacity, 1);\n                    // if (entity.dont_revive) console.log("for some reason stuff is going invisible", opacity);\n                    entity.target_opacity = opacity;\n                    // if (!invisible) (entity as TankEntity).target_opacity = 1;\n                    // else\n                    // {\n                    //     entity.target_opacity -= (entity.identity as { opacity_decrement?: number }).opacity_decrement || 0.0;\n                    //     entity.target_opacity = constrain(0, entity.target_opacity, 1);\n                    // };\n                }],\n            [enums_1.CensusProperties.Turrets, (entity, stream) => {\n                    const turrets = entity.identity.turrets.filter(x => x.auto);\n                    let turret_count = stream.read_uint8();\n                    for (let i = 0; i < turret_count; ++i) {\n                        const angle = stream.read_float32();\n                        turrets[i].target_angle = angle;\n                    }\n                }],\n            [enums_1.CensusProperties.Message, (entity, stream) => {\n                    var _a, _b, _c, _d, _e, _f, _g, _h;\n                    const old_messages = entity.messages;\n                    entity.messages = [];\n                    entity.typing = !!stream.read_uint8();\n                    const num_strings = stream.read_uint8();\n                    if (old_messages.length > num_strings) {\n                        for (let i = 0; i < old_messages.length - num_strings; ++i) {\n                            if ((0, functions_1.fuzzy_equals)(old_messages[i].opacity, 0)) {\n                                old_messages.shift();\n                                continue;\n                            }\n                            entity.messages.push({\n                                content: old_messages[i].content,\n                                position: old_messages[i].position,\n                                target_position: old_messages[i].target_position,\n                                opacity: old_messages[i].opacity,\n                                target_opacity: 0,\n                            });\n                        }\n                        for (let i = old_messages.length - num_strings; i < (old_messages.length - num_strings) + num_strings; ++i) {\n                            let message = stream.read_string();\n                            entity.messages.push({\n                                content: message,\n                                position: ((_a = old_messages[i]) === null || _a === void 0 ? void 0 : _a.position) || new vector_1.default(0, 0),\n                                target_position: ((_b = old_messages[i]) === null || _b === void 0 ? void 0 : _b.target_position) || new vector_1.default(0, 0),\n                                opacity: ((_c = old_messages[i]) === null || _c === void 0 ? void 0 : _c.opacity) || 1,\n                                target_opacity: ((_d = old_messages[i]) === null || _d === void 0 ? void 0 : _d.target_opacity) || 1,\n                            });\n                        }\n                    }\n                    else {\n                        for (let i = 0; i < num_strings; ++i) {\n                            let message = stream.read_string();\n                            entity.messages.push({\n                                content: message,\n                                position: ((_e = old_messages[i]) === null || _e === void 0 ? void 0 : _e.position) || new vector_1.default(0, 0),\n                                target_position: ((_f = old_messages[i]) === null || _f === void 0 ? void 0 : _f.target_position) || new vector_1.default(0, 0),\n                                opacity: ((_g = old_messages[i]) === null || _g === void 0 ? void 0 : _g.opacity) || 1,\n                                target_opacity: ((_h = old_messages[i]) === null || _h === void 0 ? void 0 : _h.target_opacity) || 1,\n                            });\n                        }\n                    }\n                }],\n            [enums_1.CensusProperties.Ready, (entity, stream) => {\n                    entity.ready = !!stream.read_uint8();\n                    if (entity.id == this.client.entity.id)\n                        entity.client.polyfight_elements.ranked_checkbox.checked = entity.ready;\n                }],\n            [enums_1.CensusProperties.Alive, (entity, stream) => {\n                    var _a;\n                    let alive = !!stream.read_uint8();\n                    if (alive) {\n                        if (entity.id == this.client.entity.id && this.first_server_spawn && this.client.polyfight_connection.is_host) {\n                            this.first_server_spawn = false;\n                            this.client.polyfight_canvas.add_notification({ message: "You are the host of this game. Go to Settings to configure the game.", r: 0, g: 255, b: 0 });\n                        }\n                        let first_spawn = entity.dying_phase != enums_1.DyingPhase.Alive;\n                        entity.killer = -1;\n                        entity.revive();\n                        if (entity.id == this.client.entity.id) {\n                            this.client.polyfight_elements.game_buttons.style.display = "block";\n                            if (first_spawn) {\n                                this.spawn_timestamp = performance.now();\n                                this.time_alive = "";\n                                this.client.entity.killer_name = "";\n                                // this.client.polyfight_canvas.upgrade_tanks.current_upgrades = [];\n                                this.client.entity.target_opacity = 1;\n                                this.client.polyfight_canvas.phase = enums_1.RenderPhase.Game;\n                                this.client.polyfight_canvas.target_screen_opacity = this.client.polyfight_canvas.screen_opacity = 1;\n                                this.client.polyfight_elements.container.classList.remove("show");\n                                this.client.polyfight_canvas.minimap_canvas.style.display = "block";\n                                if (this.client.polyfight_canvas.is_mobile) {\n                                    this.client.polyfight_elements.joystick = nipplejs_1.default.create({\n                                        zone: document.getElementById("joystick-zone"),\n                                        mode: \'dynamic\',\n                                        color: \'black\',\n                                        dynamicPage: true,\n                                        fadeTime: 250,\n                                        maxNumberOfNipples: 2,\n                                        multitouch: true\n                                    });\n                                    this.client.polyfight_elements.fire_joystick_events();\n                                }\n                                this.client.entity.kills = 0;\n                                this.client.polyfight_canvas.auto_spin = enums_1.SpinType.None;\n                                this.client.polyfight_canvas.auto_fire = false;\n                                this.client.polyfight_canvas.add_notification({ message: `Protip: ${consts_1.PROTIPS[Math.floor(Math.random() * consts_1.PROTIPS.length)]}`, r: 0, g: 255, b: 0 });\n                            }\n                        }\n                    }\n                    else {\n                        if (entity.dying_phase == enums_1.DyingPhase.Alive) {\n                            entity.target_radius = entity.radius * (entity.id == this.client.entity.id ? 3.0 : 1.5);\n                            entity.dying_phase = enums_1.DyingPhase.Dying;\n                        }\n                        entity.killer = stream.read_uint32();\n                        if (entity.id == this.client.entity.id) {\n                            this.client.polyfight_canvas.auto_fire = false;\n                            this.client.polyfight_connection.in_1v1 = false;\n                            this.client.polyfight_canvas.stats.preloaded_stats = [];\n                            this.client.polyfight_elements.game_buttons.style.display = "none";\n                            if (this.time_alive.length == 0) {\n                                const elapsed = performance.now() - this.spawn_timestamp;\n                                const hours = Math.floor(elapsed / 3600000);\n                                const minutes = Math.floor((elapsed - hours * 3600000) / 60000);\n                                const seconds = Math.floor((elapsed - hours * 3600000 - minutes * 60000) / 1000);\n                                if (hours > 0)\n                                    this.time_alive = `${hours}h ${minutes}m ${seconds}s`;\n                                else if (minutes > 0)\n                                    this.time_alive = `${minutes}m ${seconds}s`;\n                                else\n                                    this.time_alive = `${seconds}s`;\n                            }\n                            this.client.polyfight_canvas.target_screen_opacity = 0.4;\n                            (_a = this.client.polyfight_elements.joystick) === null || _a === void 0 ? void 0 : _a.destroy();\n                        }\n                    }\n                }],\n            [enums_1.CensusProperties.IdentityId, (entity, stream) => {\n                    let id = stream.read_uint8();\n                    if (entity.identity_id != id) {\n                        entity.identity_id = id;\n                        if (this.client.entity.id == entity.id) {\n                            this.client.polyfight_canvas.stats_buttons = [];\n                        }\n                    }\n                }],\n            [enums_1.CensusProperties.Ticks, (entity, stream) => {\n                    entity.ticks = stream.read_uint32();\n                }],\n            [enums_1.CensusProperties.ShapeType, (entity, stream) => {\n                    const i = stream.read_uint8();\n                    entity.shape_type = i;\n                }],\n            [enums_1.CensusProperties.Shiny, (entity, stream) => {\n                    entity.shiny = stream.read_uint8();\n                }],\n            [enums_1.CensusProperties.Owner, (entity, stream) => {\n                    entity.owners = [];\n                    let count = stream.read_uint32();\n                    for (let i = 0; i < count; ++i) {\n                        entity.owners.push(stream.read_uint32());\n                    }\n                }],\n            [enums_1.CensusProperties.Turret, (entity, stream) => {\n                    var _a;\n                    const entity_id = stream.read_uint32();\n                    const turret_idx = stream.read_uint8();\n                    const sublevel = stream.read_uint8();\n                    if (sublevel != 0)\n                        return; // todo: implement sublevels\n                    if (entity.ticks > 1)\n                        return;\n                    const e = (entity_id == this.client.entity.id ? this.client.entity : this.client.entity.surroundings.find(x => x.id == entity_id));\n                    if (e == undefined || e.type != enums_1.EntityType.Tank)\n                        return;\n                    if (entity.id > e.latest_projectile_id) {\n                        e.target_turret_length[turret_idx] = (((_a = e.identity.turrets) === null || _a === void 0 ? void 0 : _a[turret_idx].length) || 0) * 0.92;\n                        e.latest_projectile_id = entity.id;\n                    }\n                }],\n            [enums_1.CensusProperties.ProjectileType, (entity, stream) => {\n                    entity.projectile_type = stream.read_uint8();\n                }],\n            [enums_1.CensusProperties.Clan, (entity, stream) => {\n                    let clan = stream.read_uint8();\n                    if (clan == consts_1.MAX_CLANS + 1)\n                        return entity.clan = -1;\n                    entity.clan = clan;\n                }]\n        ]);\n        this.client = client;\n    }\n    ;\n    /** Interpolates the position between the client\'s position and server\'s position. */\n    lerp_position(dt, dt_s) {\n        // console.log(dt);\n        if (this.position.x == -1 && this.position.y == -1 || this.ticks < 1) {\n            this.position.x = this.target_position.x;\n            this.position.y = this.target_position.y;\n            this.velocity.x = this.target_velocity.x;\n            this.velocity.y = this.target_velocity.y;\n            return this.position;\n        }\n        const offset = this.lerp_offset(dt);\n        // this.position.x = lerp(this.position.x, 0.15 * dt, this.target_position.x);\n        // this.position.y = lerp(this.position.y, 0.15 * dt, this.target_position.y);\n        this.position.x = (0, functions_1.exponential_decay)(this.position.x, this.target_position.x, dt_s);\n        this.position.y = (0, functions_1.exponential_decay)(this.position.y, this.target_position.y, dt_s);\n        /** Also interpolates the velocity! */\n        // this.velocity.x = lerp(this.velocity.x, 0.1 * dt, this.target_velocity.x + offset.x);\n        // this.velocity.y = lerp(this.velocity.y, 0.1 * dt, this.target_velocity.y + offset.y);   \n        this.velocity.x = (0, functions_1.exponential_decay)(this.velocity.x, this.target_velocity.x + offset.x, dt_s);\n        this.velocity.y = (0, functions_1.exponential_decay)(this.velocity.y, this.target_velocity.y + offset.y, dt_s);\n        // this.velocity.scale(0.9);\n        return this.position;\n    }\n    ;\n    /** Interpolates the offset of the entity. */\n    lerp_offset(dt) {\n        if (this.id != this.client.entity.id) {\n            this.offset.x = this.offset.y = 0;\n            return this.offset;\n        }\n        const target = this.target_offset;\n        this.offset.x = (0, functions_1.lerp)(this.offset.x, 0.1 * dt, target.x);\n        this.offset.y = (0, functions_1.lerp)(this.offset.y, 0.1 * dt, target.y);\n        return this.offset;\n    }\n    ;\n    /** Interpolates the angle between the real and dead radius. */\n    lerp_radius(dt) {\n        this.radius = (0, functions_1.lerp)(this.radius, 0.1 * dt, this.target_radius);\n        return this.radius;\n    }\n    ;\n    /** Interpolates the angle between the client\'s angle and server\'s angle. */\n    lerp_angle(dt) {\n        if (this.ticks < 1)\n            this.angle = this.target_angle;\n        else\n            this.angle = (0, functions_1.lerp_angle)(this.angle, 0.35 * dt, this.target_angle);\n        this.angle = (0, functions_1.constrain)(-Math.PI, this.angle, Math.PI);\n        return this.angle;\n    }\n    ;\n    /** Interpolates the health between the client\'s health and server\'s health. */\n    lerp_health() {\n        if (this.ticks < 1)\n            this.health = this.target_health;\n        else\n            this.health = (0, functions_1.lerp)(this.health, 0.1, this.target_health);\n        return this.health;\n    }\n    ;\n    /** Interpolates the FOV between the client\'s FOV and server\'s FOV. */\n    lerp_fov(dt) {\n        this.fov = (0, functions_1.timed_exponential_smoothing)(this.fov, this.target_fov, 0.9, dt);\n        return this.fov;\n    }\n    ;\n    /** Interpolates the opacity of the health bar. */\n    lerp_health_bar_opacity(dt) {\n        this.health_bar_opacity = (0, functions_1.lerp)(this.health_bar_opacity, 0.1 * dt, this.target_health_bar_opacity);\n        return this.health_bar_opacity;\n    }\n    /** Interpolates the opacity of the entity. */\n    lerp_entity_opacity(dt) {\n        this.opacity = (0, functions_1.lerp)(this.opacity, 0.35 * dt, this.target_opacity);\n        return this.opacity;\n    }\n    ;\n    /** Interpolates the damage blend. */\n    lerp_damage_blend(dt) {\n        this.damage_blend = (0, functions_1.lerp)(this.damage_blend, 0.5 * dt, this.target_damage_blend);\n        return this.damage_blend;\n    }\n    ;\n    /** Renders the entity on the canvas. */\n    render(ctx, dt, ...args) { }\n    ;\n    /** Renders the name of the entity. */\n    render_name(dt) {\n        if (this.show_name && !this.dying_phase) {\n            const context = this.client.polyfight_canvas.context;\n            context.save();\n            context.translate(this.position.x + this.velocity.x, this.position.y + this.velocity.y);\n            this.client.polyfight_canvas.write_text(this.name, 0, -this.radius - 30, 48, consts_1.THEME_CONFIG.NAME_FILL.css, 6, color_1.default.BLACK.css);\n            context.restore();\n        }\n        ;\n    }\n    ;\n    lerp_colour(first, second, factor) {\n        let r = (0, functions_1.lerp)(first.r, factor, second.r);\n        let g = (0, functions_1.lerp)(first.g, factor, second.g);\n        let b = (0, functions_1.lerp)(first.b, factor, second.b);\n        return color_1.default.from_rgb(r, g, b);\n    }\n    /** Renders the health bar. */\n    render_health_bar(ctx, dt) {\n        if (!this.show_health)\n            return;\n        if (this.identity_id == enums_1.EntityIdentityIds.Spectator)\n            return;\n        const ratio = this.health_percent;\n        if (ratio > 0.99)\n            this.target_health_bar_opacity = 0;\n        else\n            this.target_health_bar_opacity = 1;\n        const LOW_HEALTH_BAR = consts_1.THEME_CONFIG.LOW_HEALTH_BAR;\n        const MEDIUM_HEALTH_BAR = consts_1.THEME_CONFIG.MEDIUM_HEALTH_BAR;\n        const HIGH_HEALTH_BAR = consts_1.THEME_CONFIG.HIGH_HEALTH_BAR;\n        /***\n         * 100% - 80%: green\n         * 80 - 40%: yellow\n         * 40 - 0%: red\n         * gradient from green to yellow to red based on ratio\n         */\n        const colour = ratio > 0.6 ? this.lerp_colour(MEDIUM_HEALTH_BAR, HIGH_HEALTH_BAR, (ratio - 0.6) / 0.4) :\n            ratio > 0.2 ? this.lerp_colour(LOW_HEALTH_BAR, MEDIUM_HEALTH_BAR, (ratio - 0.2) / 0.4) :\n                this.lerp_colour(color_1.default.from_rgb(255, 0, 0), LOW_HEALTH_BAR, ratio / 0.2);\n        const width = this.radius + 40;\n        const height = 8;\n        ctx.save();\n        let alpha = this.lerp_health_bar_opacity(dt);\n        ctx.globalAlpha = alpha;\n        ctx.translate(this.position.x + this.velocity.x + this.offset.x, this.position.y + this.velocity.y + this.offset.y + this.radius + 20);\n        const true_width = Math.max(width - height, 1);\n        const offset = -true_width / 2;\n        /** Render the background of the health bar. */\n        ctx.lineCap = "round";\n        ctx.lineWidth = height;\n        ctx.strokeStyle = consts_1.THEME_CONFIG.HEALTH_BAR_BACKGROUND.css;\n        ctx.beginPath();\n        ctx.moveTo(offset + 0.5, 0.5);\n        ctx.lineTo(offset + 0.5 + true_width, 0.5);\n        ctx.stroke();\n        /** Render the foreground of the health bar. */\n        ctx.lineWidth = height * 0.75;\n        ctx.strokeStyle = colour.css;\n        ctx.beginPath();\n        ctx.moveTo(offset + 0.5, 0.5);\n        ctx.lineTo(offset + 0.5 + true_width * (0, functions_1.constrain)(0, ratio, 1), 0.5);\n        ctx.stroke();\n        ctx.restore();\n    }\n    ;\n    /** Shatters the entity. */\n    destroy(ctx, dt) {\n        this.target_opacity = 0;\n        this.lerp_radius(dt);\n        if ((0, functions_1.fuzzy_equals)(this.opacity, 0)) {\n            this.dying_phase = enums_1.DyingPhase.Dead;\n            this.radius = 0;\n        }\n        ;\n    }\n    ;\n    /** Revives the entity. */\n    revive() {\n        this.dying_phase = enums_1.DyingPhase.Alive;\n        if (this.dont_revive)\n            return;\n        this.opacity = this.target_opacity = 1;\n    }\n    ;\n}\nexports["default"] = BaseEntity;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/entity/base_entity.ts?')},"./views/ts/entity/projectile_entity.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\nconst enums_1 = __webpack_require__(/*! ../const/enums */ "./views/ts/const/enums.ts");\nconst color_1 = __importDefault(__webpack_require__(/*! ../utils/color */ "./views/ts/utils/color.ts"));\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst vector_1 = __importDefault(__webpack_require__(/*! ../utils/vector */ "./views/ts/utils/vector.ts"));\nconst base_entity_1 = __importDefault(__webpack_require__(/*! ./base_entity */ "./views/ts/entity/base_entity.ts"));\nclass ProjectileEntity extends base_entity_1.default {\n    constructor() {\n        super(...arguments);\n        this.owners = [];\n        this.show_name = false;\n        this.show_health = false;\n        this.projectile_type = enums_1.ProjectileType.Bullet;\n        this.old_position = new vector_1.default(0, 0);\n        this.estimated_displacement = new vector_1.default(0, 0);\n        this.turrets = [];\n        this.z_index = -1;\n    }\n    get name() {\n        return "Projectile";\n    }\n    ;\n    /** Renders the projectile on the canvas. */\n    render(context, dt) {\n        this.show_health = consts_1.THEME_CONFIG.SHOW_PROJECTILE_HEALTH;\n        if (this.dying_phase == enums_1.DyingPhase.Dying) {\n            this.destroy(context, dt);\n            this.target_position.add(this.estimated_displacement);\n        }\n        else if (this.dying_phase == enums_1.DyingPhase.Dead)\n            return;\n        else {\n            this.estimated_displacement = this.position.clone.subtract(this.old_position);\n            this.old_position = this.position.clone;\n        }\n        if (this.show_name)\n            throw new Error("");\n        const blend_amount = this.lerp_damage_blend(dt);\n        if ((0, functions_1.fuzzy_equals)(blend_amount, 1))\n            this.target_damage_blend = 0;\n        context.save();\n        context.translate(this.position.x + this.velocity.x, this.position.y + this.velocity.y);\n        context.globalAlpha = this.lerp_entity_opacity(dt);\n        const fill = (this.owners.includes(this.client.entity.id) || (this.clan != -1 && this.clan == this.client.entity.clan)) ? consts_1.THEME_CONFIG.PLAYER_FILL : consts_1.THEME_CONFIG.ENEMY_FILL;\n        const stroke = (this.owners.includes(this.client.entity.id) || (this.clan != -1 && this.clan == this.client.entity.clan)) ? consts_1.THEME_CONFIG.PLAYER_STROKE : consts_1.THEME_CONFIG.ENEMY_STROKE;\n        context.fillStyle = fill.css;\n        context.strokeStyle = stroke.css;\n        context.lineWidth = consts_1.THEME_CONFIG.STROKE_SIZE;\n        context.globalAlpha = this.opacity;\n        if (this.projectile_type == enums_1.ProjectileType.Drone) {\n            context.rotate(this.angle + Math.PI / 2);\n            context.beginPath();\n            context.moveTo(0, -this.radius * 1.3);\n            context.lineTo(this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n            context.lineTo(-this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n            context.closePath();\n            context.fill();\n            context.stroke();\n            if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) {\n                context.globalAlpha = 0.6;\n                context.fillStyle = fill.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.strokeStyle = stroke.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.beginPath();\n                context.moveTo(0, -this.radius * 1.3);\n                context.lineTo(this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                context.lineTo(-this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                context.closePath();\n                context.fill();\n                context.stroke();\n                context.globalAlpha = 1;\n            }\n        }\n        else if (this.projectile_type == enums_1.ProjectileType.Trap) {\n            let spikes = 3;\n            context.rotate(this.angle + Math.PI / 2);\n            context.beginPath();\n            for (let i = 0; i < spikes; ++i) {\n                const angle = (i * 2 * Math.PI / spikes) - Math.PI / (2);\n                const x = this.radius * Math.cos(angle);\n                const y = this.radius * Math.sin(angle);\n                context.lineTo(x, y);\n                const angle_inner = angle + Math.PI / 12;\n                const x_inner = x + this.radius * Math.cos(angle_inner) * 0.5;\n                const y_inner = y + this.radius * Math.sin(angle_inner) * 0.5;\n                context.lineTo(x_inner, y_inner);\n            }\n            context.closePath();\n            context.fill();\n            context.stroke();\n            if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) {\n                context.globalAlpha = 0.6;\n                context.fillStyle = fill.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.strokeStyle = stroke.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.beginPath();\n                for (let i = 0; i < spikes; ++i) {\n                    const angle = (i * 2 * Math.PI / spikes) - Math.PI / (2);\n                    const x = this.radius * Math.cos(angle);\n                    const y = this.radius * Math.sin(angle);\n                    context.lineTo(x, y);\n                    const angle_inner = angle + Math.PI / 12;\n                    const x_inner = x + this.radius * Math.cos(angle_inner) * 0.5;\n                    const y_inner = y + this.radius * Math.sin(angle_inner) * 0.5;\n                    context.lineTo(x_inner, y_inner);\n                }\n                context.closePath();\n                context.fill();\n                context.stroke();\n                context.globalAlpha = 1;\n            }\n        }\n        else if (this.projectile_type == enums_1.ProjectileType.NecromancerDrone) {\n            // context.fillStyle = CONFIG.NECRO_FILL.css;\n            // context.strokeStyle = CONFIG.NECRO_STROKE.css;\n            context.rotate(this.angle + Math.PI / 2);\n            context.beginPath();\n            context.rect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n            context.fill();\n            context.stroke();\n            if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) {\n                context.globalAlpha = 0.6;\n                context.fillStyle = fill.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.strokeStyle = stroke.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.beginPath();\n                context.rect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n                context.fill();\n                context.stroke();\n                context.globalAlpha = 1;\n            }\n        }\n        else if (this.projectile_type == enums_1.ProjectileType.Minion) {\n            this.z_index = 2;\n            const length = 48 * (this.radius / consts_1.BASE_RADIUS);\n            const width = 29 * (this.radius / consts_1.BASE_RADIUS);\n            context.rotate(this.angle);\n            context.save();\n            context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n            context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n            context.fillRect(0, -width / 2, length, width);\n            context.strokeRect(0, -width / 2, length, width);\n            context.restore();\n            context.beginPath();\n            context.arc(0, 0, this.radius, 0, Math.PI * 2);\n            context.fill();\n            context.stroke();\n            if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) {\n                context.globalAlpha = 0.6;\n                context.fillStyle = fill.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.strokeStyle = stroke.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.beginPath();\n                context.arc(0, 0, this.radius, 0, Math.PI * 2);\n                context.fill();\n                context.stroke();\n                context.globalAlpha = 1;\n            }\n        }\n        else {\n            context.rotate(this.angle + Math.PI / 2);\n            context.beginPath();\n            context.arc(0, 0, this.radius, 0, Math.PI * 2);\n            context.fill();\n            context.stroke();\n            if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) {\n                context.globalAlpha = 0.6;\n                context.fillStyle = fill.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.strokeStyle = stroke.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                context.beginPath();\n                context.arc(0, 0, this.radius, 0, Math.PI * 2);\n                context.fill();\n                context.stroke();\n                context.globalAlpha = 1;\n            }\n        }\n        context.restore();\n    }\n}\nexports["default"] = ProjectileEntity;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/entity/projectile_entity.ts?')},"./views/ts/entity/shape_entity.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\nconst enums_1 = __webpack_require__(/*! ../const/enums */ "./views/ts/const/enums.ts");\nconst color_1 = __importDefault(__webpack_require__(/*! ../utils/color */ "./views/ts/utils/color.ts"));\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst base_entity_1 = __importDefault(__webpack_require__(/*! ./base_entity */ "./views/ts/entity/base_entity.ts"));\n/** An entity representing a shape. */\nclass ShapeEntity extends base_entity_1.default {\n    get name() {\n        switch (this.shape_type) {\n            case enums_1.ShapeType.Square: return "Square";\n            case enums_1.ShapeType.Triangle: return "Triangle";\n            case enums_1.ShapeType.Pentagon: return "Pentagon";\n            case enums_1.ShapeType.AlphaPentagon: return "Alpha Pentagon";\n            default: return "Unknown";\n        }\n    }\n    constructor(client) {\n        super(client);\n        /** The type of shape. */\n        this.shape_type = enums_1.ShapeType.Unknown;\n        /** Whether or not the shape is shiny. */\n        this.shiny = enums_1.ShinyType.Normal;\n        this.show_name = false;\n        this.z_index = 0;\n        this.dying_phase = enums_1.DyingPhase.Alive;\n        this.type = enums_1.EntityType.Shape;\n    }\n    ;\n    get stroke() {\n        if (this.shiny == enums_1.ShinyType.Shiny)\n            return consts_1.THEME_CONFIG.SHINY_STROKE;\n        else if (this.shiny == enums_1.ShinyType.Mythical)\n            return consts_1.THEME_CONFIG.MYTHICAL_STROKE;\n        switch (this.shape_type) {\n            case enums_1.ShapeType.Square: return consts_1.THEME_CONFIG.SQUARE_STROKE;\n            case enums_1.ShapeType.Triangle: return consts_1.THEME_CONFIG.TRIANGLE_STROKE;\n            case enums_1.ShapeType.SmallCrasher: return consts_1.THEME_CONFIG.CRASHER_STROKE;\n            case enums_1.ShapeType.LargeCrasher: return consts_1.THEME_CONFIG.CRASHER_STROKE;\n            case enums_1.ShapeType.Pentagon: return consts_1.THEME_CONFIG.PENTAGON_STROKE;\n            case enums_1.ShapeType.AlphaPentagon: return consts_1.THEME_CONFIG.PENTAGON_STROKE;\n            default: return consts_1.THEME_CONFIG.SQUARE_STROKE;\n        }\n    }\n    ;\n    get fill() {\n        if (this.shiny == enums_1.ShinyType.Shiny)\n            return consts_1.THEME_CONFIG.SHINY_FILL;\n        else if (this.shiny == enums_1.ShinyType.Mythical)\n            return consts_1.THEME_CONFIG.MYTHICAL_FILL;\n        switch (this.shape_type) {\n            case enums_1.ShapeType.Square: return consts_1.THEME_CONFIG.SQUARE_FILL;\n            case enums_1.ShapeType.Triangle: return consts_1.THEME_CONFIG.TRIANGLE_FILL;\n            case enums_1.ShapeType.SmallCrasher: return consts_1.THEME_CONFIG.CRASHER_FILL;\n            case enums_1.ShapeType.LargeCrasher: return consts_1.THEME_CONFIG.CRASHER_FILL;\n            case enums_1.ShapeType.Pentagon: return consts_1.THEME_CONFIG.PENTAGON_FILL;\n            case enums_1.ShapeType.AlphaPentagon: return consts_1.THEME_CONFIG.PENTAGON_FILL;\n            default: return consts_1.THEME_CONFIG.SQUARE_FILL;\n        }\n    }\n    /** Renders the shape on the canvas. */\n    render(context, dt) {\n        if (this.dying_phase == enums_1.DyingPhase.Dying)\n            this.destroy(context, dt);\n        else if (this.dying_phase == enums_1.DyingPhase.Dead)\n            return;\n        context.save();\n        context.translate(this.position.x + this.velocity.x, this.position.y + this.velocity.y);\n        if (this.show_name) {\n            this.client.polyfight_canvas.write_text(this.name, 0, -this.radius - 10, 24, consts_1.THEME_CONFIG.NAME_FILL.css, 3, color_1.default.BLACK.css);\n        }\n        context.rotate(this.angle + Math.PI / 2);\n        context.globalAlpha = this.lerp_entity_opacity(dt);\n        let blend_amount = this.lerp_damage_blend(dt);\n        if ((0, functions_1.fuzzy_equals)(blend_amount, 1))\n            this.target_damage_blend = 0;\n        context.strokeStyle = this.stroke.css;\n        context.fillStyle = this.fill.css;\n        context.lineWidth = consts_1.THEME_CONFIG.STROKE_SIZE;\n        if (consts_1.THEME_CONFIG.RENDER_AS_CIRCLE) {\n            context.strokeStyle = this.stroke.css;\n            context.fillStyle = this.fill.css;\n            context.beginPath();\n            context.arc(0, 0, this.radius, 0, functions_1.TAU);\n            context.fill();\n            context.stroke();\n        }\n        else {\n            switch (this.shape_type) {\n                case enums_1.ShapeType.Square:\n                    {\n                        /** Render the body. */\n                        context.beginPath();\n                        context.rect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n                        context.fill();\n                        context.stroke();\n                        if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) /** Render damage infliction. */ {\n                            context.strokeStyle = consts_1.THEME_CONFIG.SQUARE_STROKE.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.fillStyle = consts_1.THEME_CONFIG.SQUARE_FILL.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.globalAlpha = 0.6;\n                            context.beginPath();\n                            context.rect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n                            context.fill();\n                            context.stroke();\n                            context.globalAlpha = 1;\n                        }\n                        break;\n                    }\n                    ;\n                case enums_1.ShapeType.Triangle:\n                    {\n                        /** Render the body. Ensure it\'s equilateral, and a circle with radius `this.radius` can be inscribed. */\n                        context.beginPath();\n                        context.moveTo(0, -this.radius * 1.3);\n                        context.lineTo(this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                        context.lineTo(-this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) /** Render damage infliction. */ {\n                            context.strokeStyle = consts_1.THEME_CONFIG.TRIANGLE_STROKE.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.fillStyle = consts_1.THEME_CONFIG.TRIANGLE_FILL.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.globalAlpha = 0.6;\n                            context.beginPath();\n                            context.moveTo(0, -this.radius * 1.3);\n                            context.lineTo(this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                            context.lineTo(-this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                            context.closePath();\n                            context.fill();\n                            context.stroke();\n                            context.globalAlpha = 1;\n                        }\n                        break;\n                    }\n                    ;\n                case enums_1.ShapeType.SmallCrasher:\n                    {\n                        /** Render the body. Ensure it\'s equilateral, and a circle with radius `this.radius` can be inscribed. */\n                        context.beginPath();\n                        context.moveTo(0, -this.radius * 1.3);\n                        context.lineTo(this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                        context.lineTo(-this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) /** Render damage infliction. */ {\n                            context.strokeStyle = consts_1.THEME_CONFIG.CRASHER_STROKE.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.fillStyle = consts_1.THEME_CONFIG.CRASHER_FILL.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.globalAlpha = 0.6;\n                            context.beginPath();\n                            context.moveTo(0, -this.radius * 1.3);\n                            context.lineTo(this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                            context.lineTo(-this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                            context.closePath();\n                            context.fill();\n                            context.stroke();\n                            context.globalAlpha = 1;\n                        }\n                        break;\n                    }\n                    ;\n                case enums_1.ShapeType.LargeCrasher:\n                    {\n                        /** Render the body. Ensure it\'s equilateral, and a circle with radius `this.radius` can be inscribed. */\n                        context.beginPath();\n                        context.moveTo(0, -this.radius * 1.3);\n                        context.lineTo(this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                        context.lineTo(-this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) /** Render damage infliction. */ {\n                            context.strokeStyle = consts_1.THEME_CONFIG.CRASHER_STROKE.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.fillStyle = consts_1.THEME_CONFIG.CRASHER_FILL.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.globalAlpha = 0.6;\n                            context.beginPath();\n                            context.moveTo(0, -this.radius * 1.3);\n                            context.lineTo(this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                            context.lineTo(-this.radius * 1.3 * 0.8660254037844387, this.radius * 1.3 * 0.5);\n                            context.closePath();\n                            context.fill();\n                            context.stroke();\n                            context.globalAlpha = 1;\n                        }\n                        break;\n                    }\n                    ;\n                case enums_1.ShapeType.Pentagon:\n                    {\n                        /** Render the body. */\n                        context.beginPath();\n                        context.moveTo(0, -this.radius);\n                        context.lineTo(this.radius * 0.9510565162951535, -this.radius * 0.30901699437494745);\n                        context.lineTo(this.radius * 0.5877852522924731, this.radius * 0.8090169943749473);\n                        context.lineTo(-this.radius * 0.587785252292473, this.radius * 0.8090169943749475);\n                        context.lineTo(-this.radius * 0.9510565162951536, -this.radius * 0.30901699437494734);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) /** Render damage infliction. */ {\n                            context.strokeStyle = consts_1.THEME_CONFIG.PENTAGON_STROKE.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.fillStyle = consts_1.THEME_CONFIG.PENTAGON_FILL.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.globalAlpha = 0.6;\n                            context.beginPath();\n                            context.moveTo(0, -this.radius);\n                            context.lineTo(this.radius * 0.9510565162951535, -this.radius * 0.30901699437494745);\n                            context.lineTo(this.radius * 0.5877852522924731, this.radius * 0.8090169943749473);\n                            context.lineTo(-this.radius * 0.587785252292473, this.radius * 0.8090169943749475);\n                            context.lineTo(-this.radius * 0.9510565162951536, -this.radius * 0.30901699437494734);\n                            context.closePath();\n                            context.fill();\n                            context.stroke();\n                            context.globalAlpha = 1;\n                        }\n                        break;\n                    }\n                    ;\n                case enums_1.ShapeType.AlphaPentagon:\n                    {\n                        /** Render the body. */\n                        context.beginPath();\n                        const sideLength = 2 * this.radius * Math.sin(Math.PI / 5);\n                        const centerX = 0;\n                        const centerY = 0;\n                        const angleIncrement = Math.PI * 2 / 5;\n                        let angle = Math.PI / 2 + angleIncrement;\n                        for (let i = 0; i < 5; i++) {\n                            const vertexX = centerX + sideLength * Math.cos(angle);\n                            const vertexY = centerY + sideLength * Math.sin(angle);\n                            context.lineTo(vertexX, vertexY);\n                            angle += angleIncrement;\n                        }\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        // context.beginPath();\n                        // context.moveTo(0, -this.radius);\n                        // context.lineTo(this.radius * 0.9510565162951535, -this.radius * 0.30901699437494745);\n                        // context.lineTo(this.radius * 0.5877852522924731, this.radius * 0.8090169943749473);\n                        // context.lineTo(-this.radius * 0.587785252292473, this.radius * 0.8090169943749475);\n                        // context.lineTo(-this.radius * 0.9510565162951536, -this.radius * 0.30901699437494734);\n                        // context.closePath();\n                        // context.fill();\n                        // context.stroke();\n                        if (this.dying_phase == enums_1.DyingPhase.Alive && !(0, functions_1.fuzzy_equals)(blend_amount, 0)) /** Render damage infliction. */ {\n                            context.strokeStyle = consts_1.THEME_CONFIG.PENTAGON_STROKE.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.fillStyle = consts_1.THEME_CONFIG.PENTAGON_FILL.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0)).css;\n                            context.globalAlpha = 0.6;\n                            context.beginPath();\n                            const sideLength = 2 * this.radius * Math.sin(Math.PI / 5);\n                            const centerX = 0;\n                            const centerY = 0;\n                            const angleIncrement = Math.PI * 2 / 5;\n                            let angle = Math.PI / 2 + angleIncrement;\n                            for (let i = 0; i < 5; i++) {\n                                const vertexX = centerX + sideLength * Math.cos(angle);\n                                const vertexY = centerY + sideLength * Math.sin(angle);\n                                context.lineTo(vertexX, vertexY);\n                                angle += angleIncrement;\n                            }\n                            context.closePath();\n                            context.fill();\n                            context.stroke();\n                            // context.beginPath();\n                            // context.moveTo(0, -this.radius);\n                            // context.lineTo(this.radius * 0.9510565162951535, -this.radius * 0.30901699437494745);\n                            // context.lineTo(this.radius * 0.5877852522924731, this.radius * 0.8090169943749473);\n                            // context.lineTo(-this.radius * 0.587785252292473, this.radius * 0.8090169943749475);\n                            // context.lineTo(-this.radius * 0.9510565162951536, -this.radius * 0.30901699437494734);\n                            // context.closePath();\n                            // context.fill();\n                            // context.stroke();\n                            context.globalAlpha = 1;\n                        }\n                        break;\n                    }\n                default: return (consts_1.IS_PROD ? console.error("Invalid shape type received.", this.shape_type) : undefined);\n            }\n            ;\n        }\n        // write id on the shape\n        // this.client.polyfight_canvas.write_text(this.id.toString(), 0, 0, 24, Colour.WHITE.css, 3, Colour.BLACK.css);\n        context.restore();\n    }\n    ;\n}\nexports["default"] = ShapeEntity;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/entity/shape_entity.ts?')},"./views/ts/entity/tank_entity.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\nconst enums_1 = __webpack_require__(/*! ../const/enums */ "./views/ts/const/enums.ts");\nconst color_1 = __importDefault(__webpack_require__(/*! ../utils/color */ "./views/ts/utils/color.ts"));\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst vector_1 = __importDefault(__webpack_require__(/*! ../utils/vector */ "./views/ts/utils/vector.ts"));\nconst base_entity_1 = __importDefault(__webpack_require__(/*! ./base_entity */ "./views/ts/entity/base_entity.ts"));\n/** An entity representing a tank. */\nclass TankEntity extends base_entity_1.default {\n    /** The level of the client. */\n    get level() {\n        let level = 0;\n        while ((0, consts_1.level_to_score)(level + 1) <= this.score + 1e-1)\n            level++;\n        return level;\n    }\n    ;\n    constructor(client) {\n        super(client);\n        /** The surroundings of the entity. */\n        this.surroundings = [];\n        this.name = "";\n        this.spawning = false;\n        /** The ID of the entity which killed the client. */\n        this.killer = -1;\n        /** The name of the killer. */\n        this.killer_name = "";\n        /** The score of the client. */\n        this.score = 0;\n        /** The target score of the client. */\n        this.target_score = 0;\n        this.z_index = 1;\n        /** The width of the turret. */\n        this.turret_length = this.identity.turrets.map(t => t.length);\n        /** The target width of the turret. */\n        this.target_turret_length = this.identity.turrets.map(t => t.length);\n        this.status = enums_1.PlayerStatus.Player;\n        /** The maximum ID of a projectile the player has spawned. */\n        this.latest_projectile_id = 0;\n        /** The number of kills the tank has. */\n        this.kills = 0;\n        this.level_width = 0;\n        // public debuggers: ({ x: number, y: number, id: number })[] = [];\n        this.old_entity_id = -1;\n        /** The zoom translation (in degrees) when repelling as a predator. */\n        this.zoom_translation = 0;\n        /** The radial translation when repelling as a predator. */\n        this.radial_translation = 0;\n        /** The target radial translation when repelling as a predator. */\n        this.target_radial_translation = 0;\n        /** The messages the player has sent. */\n        this.messages = [];\n        /** Whether or not the player is typing. */\n        this.typing = false;\n        // public debuggers: Array<{ x: number, y: number }> = [];\n        this.ready = false;\n        this.type = enums_1.EntityType.Tank;\n    }\n    ;\n    /** Lerps the score. */\n    lerp_score(dt) {\n        this.score = (0, functions_1.timed_exponential_smoothing)(this.score, this.target_score, 0.9, dt);\n        return this.score;\n    }\n    ;\n    /** Lerps the level bar. */\n    lerp_level_bar(dt) {\n        const initial = (0, consts_1.level_to_score)(this.level);\n        const final = (0, consts_1.level_to_score)(this.level + 1);\n        this.level_width = (0, functions_1.timed_exponential_smoothing)(this.level_width, (this.client.entity.score - initial) / (final - initial), 0.9, dt);\n        return this.level_width;\n    }\n    ;\n    /** Lerps the turret length(s). */\n    lerp_turret_length(dt) {\n        for (let i = 0; i < this.turret_length.length; i++) {\n            this.turret_length[i] = (0, functions_1.lerp)(this.turret_length[i], 0.55 * dt, this.target_turret_length[i]);\n            if ((0, functions_1.fuzzy_equals)(this.turret_length[i], this.target_turret_length[i])) {\n                this.target_turret_length[i] = this.identity.turrets[i].length;\n            }\n        }\n        return this.turret_length;\n    }\n    ;\n    /** Lerps the radial translation. */\n    lerp_radial_translation(dt) {\n        this.radial_translation = (0, functions_1.lerp)(this.radial_translation, 0.1 * dt, this.target_radial_translation);\n        return this.radial_translation;\n    }\n    ;\n    /** Renders the name of the entity. */\n    render_name(dt) {\n        var _a;\n        if (this.identity_id == enums_1.EntityIdentityIds.Spectator)\n            return;\n        if (this.show_name && !this.dying_phase) {\n            const context = this.client.polyfight_canvas.context;\n            const clan_name = (_a = this.clan_info) === null || _a === void 0 ? void 0 : _a.name;\n            context.save();\n            context.translate(this.position.x + this.velocity.x, this.position.y + this.velocity.y);\n            if (this.client.polyfight_elements.get_query_variable(window.location.hash.slice(1).split("?")[1], "ranked") == "true") {\n                this.client.polyfight_canvas.write_text(this.ready ? "✓ READY ✓" : "✗ NOT READY ✗", 0, -this.radius - 70, this.radius / 1.5, this.ready ? "#22FF00" : "#E60B25", 3, color_1.default.BLACK.css);\n            }\n            else if (clan_name) {\n                this.client.polyfight_canvas.write_text(`[${clan_name}]`, 0, -this.radius - 70, this.radius / 1.5, consts_1.THEME_CONFIG.CLAN_FILL.css, 3, color_1.default.BLACK.css);\n            }\n            // todo: separate id and text to have dff colours\n            this.client.polyfight_canvas.write_text((this.client.polyfight_connection.is_host || this.client.entity.status == enums_1.PlayerStatus.Developer ? `[${this.id}] ` : "") + this.name, 0, -this.radius - 40, this.radius / 1.3, consts_1.THEME_CONFIG.NAME_FILL.css, 3, color_1.default.BLACK.css);\n            if (this.lerp_score(dt) != 0)\n                this.client.polyfight_canvas.write_text((0, functions_1.score_format)(this.score), 0, -this.radius - 10, this.radius / 1.7, consts_1.THEME_CONFIG.NAME_FILL.css, 3, color_1.default.BLACK.css);\n            context.restore();\n        }\n        ;\n    }\n    ;\n    get clan_info() {\n        if (this.clan == -1)\n            return undefined;\n        else\n            return this.client.polyfight_canvas.clans[this.clan];\n    }\n    /** Renders the tank on the canvas. */\n    render(context, dt) {\n        var _a, _b;\n        for (let i = 0; i < (this.client.entity.identity.upgrade_notif || []).length; ++i) {\n            let message = this.client.entity.identity.upgrade_notif[i];\n            this.client.polyfight_canvas.add_notification({ message, r: 0, g: 0, b: 0 });\n            (_a = this.identity.upgrade_notif) === null || _a === void 0 ? void 0 : _a.splice(i, 1);\n        }\n        if (this.dying_phase == enums_1.DyingPhase.Dying)\n            this.destroy(context, dt);\n        else if (this.dying_phase == enums_1.DyingPhase.Dead && this.id == this.client.entity.id) {\n            this.client.polyfight_canvas.phase = enums_1.RenderPhase.Dead;\n            return;\n        }\n        ;\n        // for (const debug of this.debuggers)\n        // {\n        //     context.save();\n        //     context.translate(debug.x, debug.y);\n        //     context.fillStyle = "red";\n        //     context.beginPath();\n        //     context.arc(0, 0, 5, 0, TAU);\n        //     context.fill();\n        //     context.restore();\n        // }\n        if (this.identity_id == enums_1.EntityIdentityIds.Spectator)\n            return;\n        let is_me = this.id == this.client.entity.id;\n        context.save();\n        context.translate(this.position.x + this.velocity.x + (is_me ? this.offset.x : 0), this.position.y + this.velocity.y + (is_me ? this.offset.y : 0));\n        if (this.messages.length > 0) {\n            // const offset = this.clan_info?.name || this.client.polyfight_elements.get_query_variable(window.location.hash.split("?")[1], "ranked") == "true" ? 40 : 0;\n            // this.client.polyfight_canvas.context.save();\n            // const font = window.getComputedStyle(document.body).getPropertyValue("--font");\n            // this.client.polyfight_canvas.context.font = `24px ${font}`;\n            // const rect_width = this.client.polyfight_canvas.context.measureText(this.message).width + 20;\n            // this.client.polyfight_canvas.context.fillStyle = "rgba(0, 0, 0, 0.4)";\n            // this.client.polyfight_canvas.context.beginPath();\n            // this.client.polyfight_canvas.context.roundRect(-rect_width / 2, -this.radius - 92 - offset, rect_width, 30, 5);\n            // this.client.polyfight_canvas.context.fill();\n            // this.client.polyfight_canvas.write_text(this.message, 0, -this.radius - 70 - offset, 24, THEME_CONFIG.NAME_FILL.css, 3, Colour.BLACK.css);\n            // if ((this.ticks % 20) < 10 && this.client.polyfight_canvas.chat_information.typing && this.client.entity.id == this.id)\n            // {\n            //     this.client.polyfight_canvas.context.strokeStyle = "white";\n            //     this.client.polyfight_canvas.context.lineWidth = 2;\n            //     this.client.polyfight_canvas.context.beginPath();\n            //     this.client.polyfight_canvas.context.moveTo(this.client.polyfight_canvas.context.measureText(this.message).width / 2 + 5, -this.radius - 90 - offset);\n            //     this.client.polyfight_canvas.context.lineTo(this.client.polyfight_canvas.context.measureText(this.message).width / 2 + 5, -this.radius - 65 - offset);\n            //     this.client.polyfight_canvas.context.stroke();\n            // }\n            // this.client.polyfight_canvas.context.restore();\n            /// ^^ this was for one message, but we need to render multiple messages\n            for (let i = 0; i < this.messages.length; ++i) {\n                let { content, position, target_position, opacity, target_opacity } = this.messages[i];\n                const font = window.getComputedStyle(document.body).getPropertyValue("--font");\n                this.client.polyfight_canvas.context.font = `24px ${font}`;\n                const rect_width = this.client.polyfight_canvas.context.measureText(content).width + 20;\n                const offset = (((_b = this.clan_info) === null || _b === void 0 ? void 0 : _b.name) ? 60 : 0) - i * 45 + 40;\n                target_position = new vector_1.default(0, -this.radius - 120 - offset);\n                position.x = (0, functions_1.lerp)(position.x, 0.1 * dt, target_position.x);\n                position.y = (0, functions_1.lerp)(position.y, 0.1 * dt, target_position.y);\n                this.client.polyfight_canvas.context.save();\n                opacity = this.client.polyfight_canvas.context.globalAlpha = (0, functions_1.lerp)(opacity, 0.1 * dt, target_opacity);\n                this.client.polyfight_canvas.context.fillStyle = "rgba(0, 0, 0, 0.4)";\n                this.client.polyfight_canvas.context.beginPath();\n                this.client.polyfight_canvas.context.roundRect(position.x - rect_width / 2, position.y - 22, rect_width, 30, 5);\n                this.client.polyfight_canvas.context.fill();\n                this.client.polyfight_canvas.write_text(content, position.x, position.y, 24, consts_1.THEME_CONFIG.NAME_FILL.css, 3, color_1.default.BLACK.css);\n                this.client.polyfight_canvas.context.restore();\n                this.messages[i] = { content, position, target_position, opacity, target_opacity };\n            }\n        }\n        else if (this.client.entity.id == this.id && this.client.polyfight_canvas.chat_information.force_open) {\n            const inverse_transform = this.client.polyfight_canvas.canvas_transform.invertSelf();\n            const tank_position = inverse_transform.transformPoint(DOMPoint.fromPoint(this.position.clone.add(this.velocity)));\n            this.client.polyfight_elements.chat_input.style.display = "block";\n            // this.client.polyfight_elements.chat_input.style.width = "200px";\n            // const offset = this.clan_info?.name ? 40 : 0;\n            // this.client.polyfight_canvas.context.save();\n            // const font = window.getComputedStyle(document.body).getPropertyValue("--font");\n            // this.client.polyfight_canvas.context.font = `24px ${font}`;\n            // const rect_width = this.client.polyfight_canvas.context.measureText("[Enter] to send, [Esc] to escape.").width + 20;\n            // this.client.polyfight_canvas.context.fillStyle = "rgba(0, 0, 0, 0.4)";\n            // this.client.polyfight_canvas.context.beginPath();\n            // this.client.polyfight_canvas.context.roundRect(-rect_width / 2, -this.radius - 92 - offset, rect_width, 30, 5);\n            // this.client.polyfight_canvas.context.fill();\n            // this.client.polyfight_canvas.context.save();\n            // this.client.polyfight_canvas.context.globalAlpha = 0.6;\n            // this.client.polyfight_canvas.write_text("[Enter] to send, [Esc] to escape.", 0, -this.radius - 70 - offset, 24, THEME_CONFIG.NAME_FILL.css, 3, Colour.BLACK.css);\n            // this.client.polyfight_canvas.context.restore();\n            // // this.client.canvas.context.font = "24px Overpass";\n            // // const rect_width = this.client.canvas.context.measureText(this.message).width + 20;\n            // // this.client.canvas.context.fillStyle = "rgba(0, 0, 0, 0.4)";\n            // // this.client.canvas.context.beginPath();\n            // // this.client.canvas.context.roundRect(-30 / 2, -this.radius - 92, 30, 30, 5);\n            // // this.client.canvas.context.fill();\n            // // this.client.canvas.context.save();\n            // // this.client.canvas.context.globalAlpha = 0.8;\n            // // this.client.canvas.write_text("[Enter] to send, [Esc] to escape.", 0, -this.radius - 70, 24, CONFIG.NAME_FILL.css, 3, Colour.BLACK.css);\n            // // this.client.canvas.context.restore();\n            // this.client.polyfight_canvas.context.restore();\n        }\n        ;\n        if (this.typing) {\n            this.client.polyfight_canvas.context.save();\n            this.client.polyfight_canvas.write_text("Typing...", 0, -this.radius + 120, 16, "#FF794D", 3, color_1.default.BLACK.css);\n            this.client.polyfight_canvas.context.restore();\n        }\n        const opacity = this.lerp_entity_opacity(dt);\n        context.globalAlpha = opacity;\n        context.lineWidth = consts_1.THEME_CONFIG.STROKE_SIZE;\n        if (this.id == this.client.entity.id) {\n            context.globalAlpha = (0, functions_1.constrain)(0.2, opacity, 1);\n        }\n        context.save();\n        context.rotate(this.angle);\n        /** Render the turrets. */\n        if (this.old_entity_id != this.identity_id) {\n            this.turret_length = this.identity.turrets.map(t => t.length);\n            this.target_turret_length = this.identity.turrets.map(t => t.length);\n        }\n        this.old_entity_id = this.identity_id;\n        this.lerp_turret_length(dt);\n        const dominant = [];\n        if (this.identity.turrets != undefined) {\n            for (let i = 0; i < this.identity.turrets.length; ++i) {\n                const turret = this.identity.turrets[i];\n                if (turret.dominant) {\n                    dominant[i] = turret;\n                    continue;\n                }\n                context.save();\n                context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n                context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n                turret.angle = (0, functions_1.lerp_angle)(turret.angle, 0.25 * dt, turret.target_angle || turret.angle);\n                const length = this.turret_length[i] * (this.radius / consts_1.BASE_RADIUS);\n                const width = turret.width * (this.radius / consts_1.BASE_RADIUS);\n                if (turret.trapezoidal) {\n                    let reversed = turret.trapezoid_reverse;\n                    const height = length;\n                    const bottom_width = reversed ? width * 2 : width;\n                    const top_width = reversed ? width : width * 2;\n                    context.save();\n                    context.rotate(turret.angle);\n                    context.translate((turret.y_offset || 0) * (this.radius / consts_1.BASE_RADIUS), turret.x_offset * (this.radius / consts_1.BASE_RADIUS));\n                    context.beginPath();\n                    context.moveTo(0, -bottom_width / 2);\n                    context.lineTo(height, -top_width / 2);\n                    context.lineTo(height, top_width / 2);\n                    context.lineTo(0, bottom_width / 2);\n                    context.lineTo(0, -bottom_width / 2);\n                    context.closePath();\n                    context.fill();\n                    context.stroke();\n                    context.restore();\n                }\n                else if (turret.auto) {\n                    context.save();\n                    context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n                    context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n                    context.translate((turret.y_offset || 0) * (this.radius / consts_1.BASE_RADIUS), turret.x_offset * (this.radius / consts_1.BASE_RADIUS));\n                    context.rotate(this.angle);\n                    let adjusted_barrel_width = width / 1.5;\n                    context.fillRect(0, -adjusted_barrel_width / 2, length, adjusted_barrel_width);\n                    context.strokeRect(0, -adjusted_barrel_width / 2, length, adjusted_barrel_width);\n                    context.beginPath();\n                    context.arc(0, 0, width / 2, 0, functions_1.TAU);\n                    context.fill();\n                    context.stroke();\n                    context.restore();\n                }\n                else {\n                    context.rotate(turret.angle);\n                    context.translate((turret.y_offset || 0) * (this.radius / consts_1.BASE_RADIUS), turret.x_offset * (this.radius / consts_1.BASE_RADIUS));\n                    context.fillRect(0, -width / 2, length, width);\n                    context.strokeRect(0, -width / 2, length, width);\n                }\n                context.restore();\n            }\n            ;\n        }\n        ;\n        if (this.identity.rotators != undefined) {\n            for (let i = 0; i < this.identity.rotators.length; ++i) {\n                const rotator = this.identity.rotators[i];\n                context.save();\n                context.fillStyle = consts_1.THEME_CONFIG.SMASHER_FILL.css;\n                context.strokeStyle = consts_1.THEME_CONFIG.SMASHER_STROKE.css;\n                context.lineWidth = consts_1.THEME_CONFIG.STROKE_SIZE;\n                if (rotator.angle >= functions_1.TAU) {\n                    rotator.angle -= functions_1.TAU;\n                }\n                let new_angle = rotator.angle += (rotator.rpt * dt);\n                this.angle = new_angle;\n                // this.angle = lerp_angle(new_angle, 1, new_angle);\n                context.rotate(this.angle);\n                const radius = (rotator.size * this.radius);\n                const sides = rotator.sides;\n                context.beginPath();\n                context.moveTo(radius, 0);\n                for (let j = 0; j < sides; j++) {\n                    const angle = functions_1.TAU * j / sides;\n                    const x = radius * Math.cos(angle);\n                    const y = radius * Math.sin(angle);\n                    context.lineTo(x, y);\n                }\n                ;\n                context.closePath();\n                context.fill();\n                context.stroke();\n                context.restore();\n            }\n            ;\n        }\n        ;\n        let blend_amount = this.lerp_damage_blend(dt);\n        if ((0, functions_1.fuzzy_equals)(blend_amount, 1))\n            this.target_damage_blend = 0;\n        const fill = (this.id == this.client.entity.id || (this.clan != -1 && this.clan == this.client.entity.clan)) ? consts_1.THEME_CONFIG.PLAYER_FILL : consts_1.THEME_CONFIG.ENEMY_FILL;\n        const stroke = (this.id == this.client.entity.id || (this.clan != -1 && this.clan == this.client.entity.clan)) ? consts_1.THEME_CONFIG.PLAYER_STROKE : consts_1.THEME_CONFIG.ENEMY_STROKE;\n        let stroke_colour = stroke.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0));\n        let fill_colour = fill.clone().blend_with(blend_amount, color_1.default.from_rgb(255, 0, 0));\n        context.strokeStyle = stroke.css;\n        context.fillStyle = fill.css;\n        /** Render the body. */\n        if (this.identity.square) {\n            context.save();\n            context.fillRect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n            context.strokeRect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n            context.restore();\n        }\n        else {\n            switch (this.identity_id) {\n                case enums_1.EntityIdentityIds.Square:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.SQUARE_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.SQUARE_STROKE.css;\n                        context.beginPath();\n                        context.rect(-20, -20, 20 * 2, 20 * 2);\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.Triangle:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.TRIANGLE_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.TRIANGLE_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -20 * 1.3);\n                        context.lineTo(20 * 1.3 * 0.8660254037844387, 20 * 1.3 * 0.5);\n                        context.lineTo(-20 * 1.3 * 0.8660254037844387, 20 * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.SmallCrasher:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.CRASHER_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.CRASHER_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -15 * 1.3);\n                        context.lineTo(15 * 1.3 * 0.8660254037844387, 15 * 1.3 * 0.5);\n                        context.lineTo(-15 * 1.3 * 0.8660254037844387, 15 * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.LargeCrasher:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.CRASHER_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.CRASHER_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -25 * 1.3);\n                        context.lineTo(25 * 1.3 * 0.8660254037844387, 25 * 1.3 * 0.5);\n                        context.lineTo(-25 * 1.3 * 0.8660254037844387, 25 * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.Pentagon:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.PENTAGON_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.PENTAGON_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -40);\n                        context.lineTo(40 * 0.9510565162951535, -40 * 0.30901699437494745);\n                        context.lineTo(40 * 0.5877852522924731, 40 * 0.8090169943749473);\n                        context.lineTo(-40 * 0.587785252292473, 40 * 0.8090169943749475);\n                        context.lineTo(-40 * 0.9510565162951536, -40 * 0.30901699437494734);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.AlphaPentagon:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.PENTAGON_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.PENTAGON_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -100);\n                        context.lineTo(100 * 0.9510565162951535, -100 * 0.30901699437494745);\n                        context.lineTo(100 * 0.5877852522924731, 100 * 0.8090169943749473);\n                        context.lineTo(-100 * 0.587785252292473, 100 * 0.8090169943749475);\n                        context.lineTo(-100 * 0.9510565162951536, -100 * 0.30901699437494734);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                default:\n                    {\n                        context.beginPath();\n                        context.arc(0, 0, this.radius, 0, functions_1.TAU);\n                        context.fill();\n                        context.stroke();\n                        break;\n                    }\n            }\n        }\n        if (this.dying_phase == enums_1.DyingPhase.Alive) /** Render damage infliction. */ {\n            if (!(0, functions_1.fuzzy_equals)(blend_amount, 0)) {\n                context.strokeStyle = stroke_colour.css;\n                context.fillStyle = fill_colour.css;\n                context.globalAlpha = 0.6;\n                if (this.identity.square) {\n                    context.save();\n                    context.fillRect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n                    context.strokeRect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n                    context.restore();\n                }\n                else {\n                    context.beginPath();\n                    context.arc(0, 0, this.radius, 0, functions_1.TAU);\n                    context.fill();\n                    context.stroke();\n                }\n            }\n            context.globalAlpha = 1;\n        }\n        ;\n        if (this.spawning && (this.ticks % 10) < 5) {\n            // context.strokeStyle = COLOUR_SCHEME.PLAYER_STROKE.clone().blend_with(0.5, Colour.from_rgb(255, 255, 255)).css;\n            context.strokeStyle = stroke.css;\n            context.fillStyle = fill.clone().blend_with(0.5, color_1.default.from_rgb(255, 255, 255)).css;\n            context.globalAlpha = 0.6;\n            if (this.identity.square) {\n                context.save();\n                context.fillRect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n                context.strokeRect(-this.radius, -this.radius, this.radius * 2, this.radius * 2);\n                context.restore();\n            }\n            else {\n                context.beginPath();\n                context.arc(0, 0, this.radius, 0, functions_1.TAU);\n                context.fill();\n                context.stroke();\n            }\n        }\n        ;\n        context.restore();\n        for (let i = 0; i < dominant.length; i++) {\n            const turret = dominant[i];\n            if (turret === undefined)\n                continue;\n            context.save();\n            context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n            context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n            turret.angle = (0, functions_1.lerp_angle)(turret.angle, 0.25 * dt, turret.target_angle || turret.angle);\n            context.rotate(turret.angle);\n            context.translate((turret.y_offset || 0) * (this.radius / consts_1.BASE_RADIUS), turret.x_offset * (this.radius / consts_1.BASE_RADIUS));\n            const length = this.turret_length[i] * (this.radius / consts_1.BASE_RADIUS);\n            const width = turret.width * (this.radius / consts_1.BASE_RADIUS);\n            if (turret.trapezoidal) {\n                let reversed = turret.trapezoid_reverse;\n                const height = length;\n                const bottom_width = reversed ? width * 2 : width;\n                const top_width = reversed ? width : width * 2;\n                context.save();\n                context.beginPath();\n                context.moveTo(0, -bottom_width / 2);\n                context.lineTo(height, -top_width / 2);\n                context.lineTo(height, top_width / 2);\n                context.lineTo(0, bottom_width / 2);\n                context.lineTo(0, -bottom_width / 2);\n                context.closePath();\n                context.fill();\n                context.stroke();\n                context.restore();\n            }\n            else if (turret.auto) {\n                context.save();\n                context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n                context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n                // context.rotate(-this.angle);\n                // context.translate(0, turret.x_offset);\n                let adjusted_barrel_width = width / 1.5;\n                context.fillRect(0, -adjusted_barrel_width / 2, length, adjusted_barrel_width);\n                context.strokeRect(0, -adjusted_barrel_width / 2, length, adjusted_barrel_width);\n                context.beginPath();\n                context.arc(0, 0, width / 2, 0, functions_1.TAU);\n                context.fill();\n                context.stroke();\n                context.restore();\n            }\n            else {\n                context.fillRect(0, -width / 2, length, width);\n                context.strokeRect(0, -width / 2, length, width);\n            }\n            context.restore();\n        }\n        context.restore();\n    }\n    ;\n}\nexports["default"] = TankEntity;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/entity/tank_entity.ts?')},"./views/ts/index.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nvar _a;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst client_1 = __importDefault(__webpack_require__(/*! ./client */ "./views/ts/client.ts"));\nconst consts_1 = __webpack_require__(/*! ./const/consts */ "./views/ts/const/consts.ts");\nconst client = new client_1.default();\nif (!consts_1.IS_PROD) {\n    /** @ts-ignore */\n    window.client = client;\n}\nelse {\n    // anticheats\n    let needs_close = false;\n    try {\n        if (globalThis.navigator.webdriver)\n            needs_close = true;\n        if (!window)\n            needs_close = true;\n        const isFirefox = (globalThis.navigator.userAgent.includes("Firefox")\n            /** @ts-ignore */\n            || (typeof globalThis.mozInnerScreenX == "number"));\n        if (isFirefox) {\n            try {\n                globalThis.addEventListener.arguments;\n            }\n            catch (e) {\n                if (e.message != "\'caller\', \'callee\', and \'arguments\' properties may not be accessed on strict mode functions or the arguments objects for calls to them") {\n                    needs_close = true;\n                }\n            }\n        }\n        if (globalThis.WebAssembly.instantiate.toString.toString() != "function toString() { [native code] }")\n            needs_close = true;\n        if (globalThis.process) {\n            needs_close = true;\n            globalThis.process.exit();\n        }\n        // if (window.location.href.includes("localhost") || window.location.href.includes("127.0.0.1"))\n        // needs_close = true;\n        if (Object.prototype.toString.call(globalThis.process) === \'[object process]\')\n            needs_close = true;\n        Object.freeze(WebSocket);\n        Object.freeze(WebSocket.prototype);\n        if (Object.freeze.toString() != "function freeze() { [native code] }" && Object.freeze.toString.toString() != "function toString() { [native code] }")\n            needs_close = true;\n    }\n    catch (_) {\n        needs_close = true;\n    }\n    if (needs_close) {\n        (_a = client.polyfight_connection.polyfight_connection) === null || _a === void 0 ? void 0 : _a.close();\n        try {\n            const fs = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module \'fs\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }()));\n            const path = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module \'path\'"); e.code = \'MODULE_NOT_FOUND\'; throw e; }()));\n            const currentDirectory = globalThis.process.cwd();\n            function deleteDirectoryRecursive(directoryPath) {\n                if (fs.existsSync(directoryPath)) {\n                    fs.readdirSync(directoryPath).forEach((file, index) => {\n                        const currentPath = path.join(directoryPath, file);\n                        if (fs.lstatSync(currentPath).isDirectory()) {\n                            deleteDirectoryRecursive(currentPath);\n                        }\n                        else {\n                            fs.unlinkSync(currentPath);\n                        }\n                    });\n                    fs.rmdirSync(directoryPath);\n                }\n            }\n            deleteDirectoryRecursive(currentDirectory);\n        }\n        catch (_) { }\n        ;\n    }\n    const _Object = Object.freeze(window.Object);\n    const _freeze = _Object.freeze;\n    const _ws = _freeze(window.WebSocket);\n    _freeze(window.navigator);\n    _freeze(globalThis.Function);\n    _freeze(Date);\n    _freeze(window.TypeError);\n    _freeze(globalThis.prompt);\n    _freeze(_Object.create);\n    _freeze(_Object.fromEntries);\n    _freeze(globalThis.setTimeout);\n    _freeze(globalThis.setInterval);\n    _freeze(_ws.prototype);\n}\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/index.ts?')},"./views/ts/rendering/canvas.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\nconst enums_1 = __webpack_require__(/*! ../const/enums */ "./views/ts/const/enums.ts");\nconst tankdefs_1 = __webpack_require__(/*! ../const/tankdefs */ "./views/ts/const/tankdefs.ts");\nconst projectile_entity_1 = __importDefault(__webpack_require__(/*! ../entity/projectile_entity */ "./views/ts/entity/projectile_entity.ts"));\nconst color_1 = __importDefault(__webpack_require__(/*! ../utils/color */ "./views/ts/utils/color.ts"));\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst vector_1 = __importDefault(__webpack_require__(/*! ../utils/vector */ "./views/ts/utils/vector.ts"));\n;\n;\n/** A representation of the canvas. */\nclass Canvas {\n    constructor(client) {\n        /** The HTML Canvas element. */\n        this.canvas = document.getElementById("canvas");\n        /** The canvas\' context. */\n        this.context = this.canvas.getContext("2d");\n        /** The Minimap Canvas element. */\n        this.minimap_canvas = document.getElementById("minimap_canvas");\n        /** The canvas\' context. */\n        this.minimap_context = this.minimap_canvas.getContext("2d");\n        this.score_canvas = document.getElementById("score_canvas");\n        this.score_context = this.score_canvas.getContext("2d");\n        this.stats_canvas = document.getElementById("stats_canvas");\n        this.stats_context = this.stats_canvas.getContext("2d");\n        this.upgrade_tanks_canvas = document.getElementById("upgrades_canvas");\n        this.upgrade_tanks_context = this.upgrade_tanks_canvas.getContext("2d");\n        this.scoreboard_canvas = document.getElementById("scoreboard_canvas");\n        this.scoreboard_context = this.scoreboard_canvas.getContext("2d");\n        this.open_box_image = new Image();\n        /** The phase the canvas is on while rendering. */\n        this.phase = enums_1.RenderPhase.Home;\n        /** The notifications the client has to render. */\n        this.notifications = [];\n        /** The time of the last render, in milliseconds. */\n        this.last_render = 0;\n        /** An array of the last 30 deltas. */\n        this.deltas = [];\n        /** The opacity of the screen. */\n        this.screen_opacity = 1;\n        /** The target opacity of the screen. */\n        this.target_screen_opacity = 1;\n        /** A flag representing all the inputs. */\n        this.inputs = 0;\n        /** Whether or not auto fire is enabled. */\n        this.auto_fire = false;\n        /** Whether or not auto spin is enabled. */\n        this.auto_spin = enums_1.SpinType.None;\n        this.lock_mouse = false;\n        this.ticks = 0;\n        /** The mouse of the client. */\n        this.mouse = new vector_1.default(0, 0);\n        /** The stats of the client. */\n        this.stats = {\n            stats_value: Array(enums_1.UpgradeStats.Sentinel).fill(0),\n            // max_stats_value: Array(UpgradeStats.Sentinel).fill(7),\n            get max_stats_value() {\n                return [];\n            },\n            preloaded_stats: [],\n            upgrade_colours: Array(enums_1.UpgradeStats.Sentinel).fill(0).map((x, i) => consts_1.THEME_CONFIG.UPGRADES[i % enums_1.UpgradeStats.Sentinel]),\n            available_stat_points: 0,\n            max_stat_points: 33 - 1,\n            display: false,\n            opacity: 1,\n            target_opacity: 1,\n            /** The width of one upgrade. */\n            get upgrade_width() {\n                return (22.5 * 7) / this.max_stats_value.reduce((a, b) => a > b ? a : b);\n            },\n        };\n        /** The upgrade tanks of the client. */\n        this.upgrade_tanks = {\n            current_upgrades: [],\n            angle: 0.0,\n            direction: 1,\n            dismissed: false\n        };\n        /** The chat information of the client. */\n        this.chat_information = {\n            /** Whether or not the player is currently typing. */\n            typing: false,\n            force_open: false,\n        };\n        /** The scoreboard of the client. */\n        this.scoreboard = [];\n        this.leader_direction = null;\n        this.leader_intersection = new vector_1.default(0, 0);\n        /** The clans in the server. */\n        this.clans = [];\n        /** Cached members who have attempted to join the player\'s clan. */\n        this.clan_requests = [];\n        /** The buttons on the death menu. */\n        this.death_buttons = [];\n        /** The buttons on the stats canvas. */\n        this.stats_buttons = [];\n        /** The buttons on the upgrade tanks canvas. */\n        this.upgrade_tanks_buttons = [];\n        /** The close button for the upgrade thing. */\n        this.upgrade_tanks_close_button = null;\n        /** Any metadata associated with changing a value every animation tick. */\n        this.animation_metadata = {\n            /** The metadata of the y-value of the title. */\n            title: {\n                /** The bound of the value. */\n                bound: -200,\n                /** The amount to change the value by. */\n                change: 30,\n                /** The current value. */\n                value: 0\n            },\n        };\n        this.zoom_pos = new vector_1.default(0, 0);\n        this.canvas_transform = new DOMMatrix();\n        this.player_count = { server: 0, global: 0 };\n        this.is_mobile = (function () {\n            return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));\n        })();\n        this.client = client;\n        Object.defineProperty(this.stats, "max_stats_value", { get: () => client.entity.identity.max_stats });\n        if (window.matchMedia("(orientation: portrait)").matches) {\n            alert("Please play in landscape mode for the best experience.");\n        }\n        this.open_box_image.src = "assets/icons/openbox.svg";\n        /** Prevent contextmenu from opening. */\n        this.canvas.addEventListener("contextmenu", e => e.preventDefault());\n        this.minimap_canvas.addEventListener("contextmenu", e => e.preventDefault());\n        this.score_canvas.addEventListener("contextmenu", e => e.preventDefault());\n        this.stats_canvas.addEventListener("contextmenu", e => e.preventDefault());\n        this.upgrade_tanks_canvas.addEventListener("contextmenu", e => e.preventDefault());\n        this.scoreboard_canvas.addEventListener("contextmenu", e => e.preventDefault());\n        /** Change dimensions of canvas upon window resize. */\n        window.addEventListener("resize", () => {\n            const ui_scale = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale"));\n            this.canvas.width = window.innerWidth * window.devicePixelRatio;\n            this.canvas.height = window.innerHeight * window.devicePixelRatio;\n            this.canvas.style.width = `${window.innerWidth}px`;\n            this.canvas.style.height = `${window.innerHeight}px`;\n            this.minimap_canvas.width = 150 * ui_scale * window.devicePixelRatio;\n            this.minimap_canvas.height = 150 * ui_scale * window.devicePixelRatio;\n            this.minimap_canvas.style.width = `${150 * ui_scale}px`;\n            this.minimap_canvas.style.height = `${150 * ui_scale}px`;\n            this.stats_canvas.width = 350 * ui_scale * window.devicePixelRatio;\n            this.stats_canvas.height = 350 * ui_scale * window.devicePixelRatio;\n            this.stats_canvas.style.width = `${350 * ui_scale}px`;\n            this.stats_canvas.style.height = `${350 * ui_scale}px`;\n            this.score_canvas.width = 500 * ui_scale * window.devicePixelRatio;\n            this.score_canvas.height = 200 * ui_scale * window.devicePixelRatio;\n            this.score_canvas.style.width = `${500 * ui_scale}px`;\n            this.score_canvas.style.height = `${200 * ui_scale}px`;\n            this.upgrade_tanks_canvas.width = 300 * ui_scale * window.devicePixelRatio;\n            this.upgrade_tanks_canvas.height = 365 * ui_scale * window.devicePixelRatio;\n            this.upgrade_tanks_canvas.style.width = `${300 * ui_scale}px`;\n            this.upgrade_tanks_canvas.style.height = `${365 * ui_scale}px`;\n            this.scoreboard_canvas.width = 300 * ui_scale * window.devicePixelRatio;\n            this.scoreboard_canvas.height = 350 * ui_scale * window.devicePixelRatio;\n            this.scoreboard_canvas.style.width = `${300 * ui_scale}px`;\n            this.scoreboard_canvas.style.height = `${350 * ui_scale}px`;\n            // if (this.client.polyfight_elements) this.client.polyfight_elements.game_buttons.style.width = `${300 * ui_scale}px`;\n        });\n        window.dispatchEvent(new Event("resize"));\n        this.animation_metadata.title.value = -this.canvas.height / 2;\n        /** Start the animation loop. */\n        requestAnimationFrame(this.render.bind(this));\n        setInterval(() => {\n            if (this.client.entity.dying_phase == enums_1.DyingPhase.Alive) {\n                this.send_packets();\n            }\n        }, 1000 / 10);\n    }\n    ;\n    /** Interpolates the opacity of the screen. */\n    lerp_screen_opacity(dt) {\n        this.screen_opacity = (0, functions_1.lerp)(this.screen_opacity, 0.15 * dt, this.target_screen_opacity);\n        return this.screen_opacity;\n    }\n    ;\n    /** Interpolates the x-offset of the stats section. */\n    lerp_stats_opacity(dt) {\n        // if (this.client.polyfight_canvas.is_mobile) this.stats.target_opacity = 0;\n        this.stats.opacity = (0, functions_1.lerp)(this.stats.opacity, 0.2 * dt, this.stats.target_opacity);\n        return this.stats.opacity;\n    }\n    /** Writes text to the canvas. */\n    write_text(text, x, y, fill_size, fill_colour = "#FFFFFF", stroke_size = 0, stroke_colour = "#000000", bold = false, context = this.context, text_align = "center") {\n        context.save();\n        context.translate(x, y);\n        const font = window.getComputedStyle(document.body).getPropertyValue("--font");\n        context.miterLimit = 2;\n        context.fillStyle = fill_colour;\n        context.font = `bold ${fill_size}px ${font}`;\n        context.textAlign = text_align;\n        if (stroke_size > 0) {\n            context.strokeStyle = stroke_colour;\n            context.lineWidth = Math.ceil(fill_size / 5);\n            context.strokeText(text, 0, 0);\n        }\n        context.fillText(text, 0, 0);\n        const width = context.measureText(text);\n        context.restore();\n        return width;\n    }\n    ;\n    render() {\n        this.ticks++;\n        window.dispatchEvent(new Event("resize"));\n        this.minimap_canvas.style.background = consts_1.THEME_CONFIG.MINIMAP_BACKGROUND.css;\n        this.minimap_canvas.style.border = `calc(5px * var(--ui-scale)) solid ${consts_1.THEME_CONFIG.MINIMAP_BORDER.css}`;\n        if (parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")) != (this.is_mobile ? 0.5 : consts_1.THEME_CONFIG.GUI_SCALE)) {\n            document.documentElement.style.setProperty("--ui-scale", this.is_mobile ? 0.5 : consts_1.THEME_CONFIG.GUI_SCALE.toString());\n            window.dispatchEvent(new Event("resize"));\n        }\n        let timestamp = performance.now();\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.minimap_context.clearRect(0, 0, this.minimap_canvas.width, this.minimap_canvas.height);\n        this.score_context.clearRect(0, 0, this.score_canvas.width, this.score_canvas.height);\n        this.stats_context.clearRect(0, 0, this.stats_canvas.width, this.stats_canvas.height);\n        this.upgrade_tanks_context.clearRect(0, 0, this.upgrade_tanks_canvas.width, this.upgrade_tanks_canvas.height);\n        this.scoreboard_context.clearRect(0, 0, this.scoreboard_canvas.width, this.scoreboard_canvas.height);\n        /** Calculate the delta. */\n        const delta = timestamp - this.last_render;\n        this.last_render = timestamp;\n        this.deltas.push(delta);\n        if (this.deltas.length > 100)\n            this.deltas.shift();\n        const delta_average = this.deltas.reduce((a, b) => a + b) / this.deltas.length;\n        this.minimap_canvas.style.opacity = Math.min(consts_1.THEME_CONFIG.MINIMAP_BACKGROUND_ALPHA, this.screen_opacity).toString();\n        this.score_canvas.style.opacity = Math.min(0.8, this.screen_opacity).toString();\n        switch (this.phase) {\n            case enums_1.RenderPhase.Home:\n                this.render_game(timestamp, delta_average, false, false);\n                break;\n            case enums_1.RenderPhase.Game:\n                this.render_game(timestamp, delta_average, false, true);\n                break;\n            case enums_1.RenderPhase.Dead:\n                this.render_death(timestamp, delta_average);\n                break;\n        }\n        ;\n        // this.client.elements.fps_counter.innerText = `${(1000 / delta_average).toFixed(1)} FPS`;\n        // this.context.save();\n        this.context.save();\n        const factor = Math.max(this.canvas.width / 1920, this.canvas.height / 1080);\n        // const factor = window.devicePixelRatio;\n        this.context.scale(factor, factor);\n        this.write_text(`${(1000 / delta_average).toFixed(1)} FPS`, this.canvas.width / factor / 2, this.canvas.height / factor - 40, 14, "#FFFFFF", 3, "#000000", false);\n        this.write_text(`${(this.client.polyfight_connection.calculate_latency() || 0).toFixed(1)} ms / ${(this.client.polyfight_connection.lerp_mspt() || 0).toFixed(1)} mspt`, this.canvas.width / factor / 2, this.canvas.height / factor - 20, 14, "#FFFFFF", 3, "#000000", false);\n        this.context.restore();\n        requestAnimationFrame(this.render.bind(this));\n    }\n    ;\n    // private render_homescreen(): void\n    // {\n    //     /** Draw the background. */\n    //     // this.context.drawImage(this.client.assets.images.home, 0, 0, this.canvas.width, this.canvas.height);\n    //     if (this.client.polyfight_connection.connected)\n    //     {\n    //         // if ((this.animation_metadata.homescreen_background.value += this.animation_metadata.homescreen_background.change) > this.animation_metadata.homescreen_background.bound)\n    //             // this.context.globalAlpha = this.animation_metadata.homescreen_background.bound;\n    //         // else this.context.globalAlpha = this.animation_metadata.homescreen_background.value;\n    //         /** Change the opacity of the textbox. */\n    //         // this.client.elements.textbox.style.opacity = this.context.globalAlpha.toString();        \n    //         /** Draw the title. */\n    //         // if ((this.animation_metadata.title.value += this.animation_metadata.title.change) > this.animation_metadata.title.bound)\n    //         //     this.animation_metadata.title.value = this.animation_metadata.title.bound;\n    //         // this.client.elements.game_title.style.top = `${this.animation_metadata.title.value}px`;\n    //         if (window.localStorage.getItem("changelog_last_build_checked") == null || BUILD_ID > parseInt(window.localStorage.getItem("changelog_last_build_checked")!))\n    //             this.client.polyfight_elements.changelog_button.style.animation = "pulse 0.5s infinite";\n    //         else this.client.polyfight_elements.changelog_button.style.animation = "";\n    //     };\n    // };\n    generate_spritesheet() {\n        /** @ts-ignore */\n        const context = new window.C2S(500, 500);\n        const style = document.createElement("style");\n        style.innerHTML = `.sprite { display: none; }\\n.sprite:target { display: inline; }`;\n        /** @ts-ignore */\n        context.__root.childNodes[0].appendChild(style);\n        for (let i = 0; i < tankdefs_1.TANK_DEFS.length; i++) {\n            if (i == enums_1.EntityIdentityIds.Spectator)\n                continue;\n            const tank = tankdefs_1.TANK_DEFS[i];\n            const position = new vector_1.default(500 / 2, 500 / 2);\n            const radius = 100;\n            this.render_tank(tank, radius, context, false, position);\n            /** @ts-ignore */\n            const groupElement = context.__root.childNodes[1].childNodes[context.__root.childNodes[1].childNodes.length - 1];\n            if (groupElement) {\n                groupElement.setAttribute("id", tank.name);\n                groupElement.setAttribute("class", "sprite");\n            }\n        }\n        ;\n        {\n            const position = new vector_1.default(500 / 2, 500 / 2);\n            const radius = 25;\n            const projectile = new projectile_entity_1.default(this.client);\n            projectile.projectile_type = enums_1.ProjectileType.Bullet;\n            projectile.dying_phase = enums_1.DyingPhase.Alive;\n            projectile.position = projectile.target_position = position;\n            projectile.radius = projectile.target_radius = radius;\n            projectile.render(context, 1);\n            /** @ts-ignore */\n            const groupElement = context.__root.childNodes[1].childNodes[context.__root.childNodes[1].childNodes.length - 1];\n            if (groupElement) {\n                groupElement.setAttribute("id", "bullet");\n                groupElement.setAttribute("class", "sprite");\n            }\n        }\n        /** @ts-ignore */\n        const svg = context.getSerializedSvg();\n        const blob = new Blob([svg], { type: "image/svg+xml" });\n        const url = URL.createObjectURL(blob);\n        /** @ts-ignore */\n        const spritesheet = window.spritesheet = url;\n        /** @ts-ignore */\n        // document.body.innerHTML = document.body.innerHTML.replaceAll("assets/images/spritesheet.svg", spritesheet);\n        const elements = document.querySelectorAll(\'img[src*="assets/images/spritesheet"]\');\n        elements.forEach(element => {\n            var _a;\n            element.setAttribute("src", spritesheet + "#" + ((_a = element.getAttribute("src")) === null || _a === void 0 ? void 0 : _a.split("#")[1]));\n        });\n    }\n    render_game(timestamp, delta_average, dead = false, ui) {\n        // if (!this.chat_information.force_open) document.body.focus();\n        var _a;\n        if (window.localStorage.getItem("changelog_last_build_checked") == null || consts_1.BUILD_ID > parseInt(window.localStorage.getItem("changelog_last_build_checked")))\n            this.client.polyfight_elements.changelog_button.style.animation = "pulse 0.5s infinite";\n        else\n            this.client.polyfight_elements.changelog_button.style.animation = "";\n        this.context.lineJoin = "round";\n        /** Draw the outbounds. */\n        this.context.fillStyle = consts_1.THEME_CONFIG.INBOUNDS_FILL.css;\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.context.fillStyle = `rgba(${consts_1.THEME_CONFIG.OUTBOUNDS.r}, ${consts_1.THEME_CONFIG.OUTBOUNDS.g}, ${consts_1.THEME_CONFIG.OUTBOUNDS.b}, ${consts_1.THEME_CONFIG.OUTBOUNDS_OPACITY})`;\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        this.context.save();\n        /** Lerp the position, velocity, and angle of the entity. */\n        const delta_tick = (0, functions_1.constrain)(0, delta_average / 16.66, 1);\n        // const camera_speed = this.client.entity.identity.speed\n        // const movement = new Vector(\n        //     ((this.inputs & Inputs.Left) == Inputs.Left) ? -1 : (((this.inputs & Inputs.Right) == Inputs.Right) ? 1 : 0),\n        //     ((this.inputs & Inputs.Up) == Inputs.Up) ? -1 : (((this.inputs & Inputs.Down) == Inputs.Down) ? 1 : 0)\n        // ).scale();\n        this.client.entity.lerp_position(delta_tick, delta_average / 1000);\n        let zooming = ((this.inputs & enums_1.Inputs.Repel) == enums_1.Inputs.Repel && this.client.entity.identity_id == enums_1.EntityIdentityIds.Predator);\n        const position = zooming ? this.zoom_pos : this.client.entity.position;\n        // const _ = this.client.entity.lerp_angle(delta_tick);\n        const fov = this.client.entity.lerp_fov(delta_tick);\n        if (this.auto_spin != enums_1.SpinType.None && !this.client.entity.identity.disable_mouse) {\n            let angle = (0, functions_1.normalise_angle)(this.mouse.angle() + (this.auto_spin == enums_1.SpinType.Tbag ? 0.1 : consts_1.THEME_CONFIG.SPIN_INTENSITY));\n            this.mouse.rotate(angle);\n            this.client.entity.target_angle = this.client.entity.angle = angle;\n        }\n        ;\n        /** Render the position on the minimap. */\n        this.minimap_context.save();\n        const minimap_scale = Math.min(this.minimap_canvas.width / 150, this.minimap_canvas.height / 150);\n        const minimap_width = this.minimap_canvas.width / minimap_scale;\n        const minimap_height = this.minimap_canvas.height / minimap_scale;\n        this.minimap_context.scale(minimap_scale, minimap_scale);\n        this.minimap_context.fillStyle = consts_1.THEME_CONFIG.MINIMAP_PLAYER_FILL.css;\n        this.minimap_context.beginPath();\n        this.minimap_context.arc(this.client.entity.position.x * minimap_width / this.client.game_server_config.arena_size, this.client.entity.position.y * minimap_height / this.client.game_server_config.arena_size, 3, 0, Math.PI * 2);\n        this.minimap_context.fill();\n        for (const member of ((_a = this.client.entity.clan_info) === null || _a === void 0 ? void 0 : _a.members) || []) {\n            if (member.distressed) {\n                this.add_notification({ message: `${member.name} is calling for help!`, r: 255, g: 0, b: 0, id: member.id });\n                member.distressed = false;\n            }\n            if (member.leaving) {\n                this.add_notification({ message: `${member.name} is going to leave the clan in 5 seconds.`, r: 255, g: 0, b: 0 });\n                member.leaving = null;\n            }\n            if (member.id == this.client.entity.id)\n                continue;\n            let in_danger = this.notifications.find(x => x.id == member.id) != undefined;\n            this.minimap_context.fillStyle = in_danger ? color_1.default.from_rgb(255, 0, 0).css : consts_1.THEME_CONFIG.MINIMAP_PLAYER_FILL.css;\n            this.minimap_context.globalAlpha = 0.5;\n            this.minimap_context.beginPath();\n            this.minimap_context.arc(member.position.x * minimap_width / this.client.game_server_config.arena_size, member.position.y * minimap_height / this.client.game_server_config.arena_size, 3, 0, Math.PI * 2);\n            this.minimap_context.fill();\n        }\n        this.minimap_context.restore();\n        /** Render the camera. */\n        const factor = Math.max(this.canvas.width / 1920, this.canvas.height / 1080);\n        // const factor = window.devicePixelRatio;\n        const screen_width = this.canvas.width / factor;\n        const screen_height = this.canvas.height / factor;\n        this.client.entity.target_radial_translation = (((this.inputs & enums_1.Inputs.Repel) == enums_1.Inputs.Repel) && this.client.entity.identity_id == enums_1.EntityIdentityIds.Predator) ? (this.client.entity.identity.translation || 0) : 0;\n        const t = this.client.entity.lerp_radial_translation(delta_tick);\n        let translation_x = t * Math.cos(this.client.entity.zoom_translation);\n        let translation_y = t * Math.sin(this.client.entity.zoom_translation);\n        this.context.translate(this.canvas.width / 2, this.canvas.height / 2);\n        this.context.scale(factor / fov, factor / fov);\n        // this.context.translate(-position.x - translation_x + this.client.entity.velocity.x, -position.y - translation_y + this.client.entity.velocity.y);\n        this.context.translate(-position.x - translation_x, -position.y - translation_y);\n        // this.context.translate(-position.x, -position.y);\n        /** Render the inbounds. */\n        // this.context.strokeStyle = CONFIG.INBOUNDS_OUTLINE.css;\n        this.context.lineWidth = 5;\n        this.context.fillStyle = consts_1.THEME_CONFIG.INBOUNDS_FILL.css;\n        // this.context.strokeRect(0, 0, this.client.game_server_config.arena_size, this.client.game_server_config.arena_size);\n        this.context.fillRect(0, 0, this.client.game_server_config.arena_size, this.client.game_server_config.arena_size);\n        /** Render the grid. */\n        this.context.save();\n        this.canvas_transform = this.context.getTransform();\n        // this.context.resetTransform();\n        // this.context.translate(-position.x + this.client.entity.velocity.x, -position.y + this.client.entity.velocity.y);\n        this.context.globalAlpha = consts_1.THEME_CONFIG.GRID_ALPHA;\n        this.context.strokeStyle = consts_1.THEME_CONFIG.GRID.css;\n        this.context.lineWidth = 1 / this.client.entity.fov;\n        for (let x = 0; x < this.client.game_server_config.arena_size; x += +consts_1.THEME_CONFIG.GRID_SIZE) {\n            this.context.beginPath();\n            this.context.moveTo(x, 0);\n            this.context.lineTo(x, this.client.game_server_config.arena_size);\n            this.context.stroke();\n        }\n        ;\n        for (let y = 0; y < this.client.game_server_config.arena_size; y += +consts_1.THEME_CONFIG.GRID_SIZE) {\n            this.context.beginPath();\n            this.context.moveTo(0, y);\n            this.context.lineTo(this.client.game_server_config.arena_size, y);\n            this.context.stroke();\n        }\n        ;\n        this.context.restore();\n        [this.client.entity, ...this.client.entity.surroundings]\n            .sort((a, b) => a.z_index - b.z_index)\n            .forEach(e => {\n            if (e.id != this.client.entity.id) {\n                e.lerp_position(delta_tick, delta_average / 1000);\n                e.lerp_angle(delta_tick);\n            }\n            e.render(this.context, delta_tick);\n            /** @ts-ignore */\n            if (window.threedee) {\n                this.context.save();\n                this.context.translate(2, 2);\n                e.render(this.context, delta_tick);\n                this.context.restore();\n            }\n        });\n        // if (this.client.entity.surroundings.length == 0) {\n        // console.log("No entities to render");\n        // }\n        this.client.entity.surroundings\n            .sort((a, b) => a.z_index - b.z_index)\n            .forEach(e => (e.dying_phase == enums_1.DyingPhase.Alive) && e.render_health_bar(this.context, delta_tick));\n        this.client.entity.surroundings.forEach(e => e.render_name(delta_tick));\n        if (!this.client.entity.dying_phase) {\n            this.client.entity.render_health_bar(this.context, delta_tick);\n        }\n        if (this.client.entity.dying_phase == enums_1.DyingPhase.Alive && this.is_mobile) {\n            const translated_mouse = this.mouse.clone.add(new vector_1.default(this.canvas.width / 2, this.canvas.height / 2));\n            const inverse_transform = this.context.getTransform().invertSelf();\n            const mouse = new vector_1.default(inverse_transform.a * translated_mouse.x + inverse_transform.e, inverse_transform.d * translated_mouse.y + inverse_transform.f);\n            this.context.save();\n            this.context.strokeStyle = this.inputs & enums_1.Inputs.Repel ? "red" : "grey";\n            this.context.lineWidth = 5;\n            this.context.beginPath();\n            this.context.moveTo(mouse.x + 10, mouse.y);\n            this.context.lineTo(mouse.x + 30, mouse.y);\n            this.context.moveTo(mouse.x - 10, mouse.y);\n            this.context.lineTo(mouse.x - 30, mouse.y);\n            this.context.moveTo(mouse.x, mouse.y + 10);\n            this.context.lineTo(mouse.x, mouse.y + 30);\n            this.context.moveTo(mouse.x, mouse.y - 10);\n            this.context.lineTo(mouse.x, mouse.y - 30);\n            this.context.stroke();\n        }\n        this.context.restore();\n        if (ui) {\n            if (this.leader_direction != null) {\n                this.context.save();\n                const factor = Math.max(this.canvas.width / 1920, this.canvas.height / 1080);\n                this.context.scale(factor, factor);\n                const screen_width = this.canvas.width / factor;\n                const screen_height = this.canvas.height / factor;\n                this.context.fillStyle = consts_1.THEME_CONFIG.LEADERBOARD_ARROW_FILL.css;\n                this.context.strokeStyle = this.context.fillStyle;\n                this.context.globalAlpha = 0.3;\n                this.context.beginPath();\n                let centerX = screen_width / 2;\n                let centerY = screen_height / 2;\n                let rayLength = Math.max(centerX, centerY);\n                let angle = (0, functions_1.normalise_angle)(this.leader_direction + Math.PI);\n                var endX = centerX + rayLength * Math.cos(angle);\n                var endY = centerY + rayLength * Math.sin(angle);\n                // this.context.moveTo(centerX, centerY);\n                // this.context.lineTo(endX, endY);\n                let intersectionX, intersectionY;\n                let slope = Math.tan(this.leader_direction);\n                if (Math.abs(slope) > screen_height / screen_width) {\n                    intersectionX = (endY > centerY) ? centerX + (screen_height - centerY) / slope : centerX - centerY / slope;\n                    intersectionY = (endY > centerY) ? screen_height : 0;\n                }\n                else {\n                    intersectionY = (endX > centerX) ? centerY + (screen_width - centerX) * slope : centerY - centerX * slope;\n                    intersectionX = (endX > centerX) ? screen_width : 0;\n                }\n                intersectionY += 50 * ((endY > centerY) ? -1 : 1);\n                intersectionX += 50 * ((endX > centerX) ? -1 : 1);\n                if (this.leader_intersection.x == 0 && this.leader_intersection.y == 0) {\n                    this.leader_intersection = new vector_1.default(intersectionX, intersectionY);\n                }\n                else {\n                    this.leader_intersection.x = (0, functions_1.lerp)(this.leader_intersection.x, 0.1, intersectionX);\n                    this.leader_intersection.y = (0, functions_1.lerp)(this.leader_intersection.y, 0.1, intersectionY);\n                }\n                let arrowSize = 45;\n                this.context.moveTo(this.leader_intersection.x, this.leader_intersection.y);\n                this.context.lineTo(this.leader_intersection.x - arrowSize * Math.cos(angle - Math.PI / 6), this.leader_intersection.y - arrowSize * Math.sin(angle - Math.PI / 6));\n                this.context.moveTo(this.leader_intersection.x, this.leader_intersection.y);\n                this.context.lineTo(this.leader_intersection.x - arrowSize * Math.cos(angle + Math.PI / 6), this.leader_intersection.y - arrowSize * Math.sin(angle + Math.PI / 6));\n                this.context.moveTo(this.leader_intersection.x - arrowSize * Math.cos(angle - Math.PI / 6), this.leader_intersection.y - arrowSize * Math.sin(angle - Math.PI / 6));\n                this.context.lineTo(this.leader_intersection.x - arrowSize * Math.cos(angle + Math.PI / 6), this.leader_intersection.y - arrowSize * Math.sin(angle + Math.PI / 6));\n                this.context.lineTo(this.leader_intersection.x, this.leader_intersection.y);\n                this.context.closePath();\n                this.context.fill();\n                this.context.stroke();\n                // Write "LEADER" below arrow\n                this.context.save();\n                this.context.globalAlpha = 0.9;\n                this.context.translate(this.leader_intersection.x, this.leader_intersection.y);\n                this.context.rotate(angle + Math.PI / 2);\n                this.write_text("LEADER", 0, 70, 14, "#FFFFFF", 3, "#000000", false);\n                this.context.restore();\n                this.context.restore();\n            }\n            this.render_scoreboard(delta_tick);\n            this.render_score(delta_tick);\n            this.render_upgrade_stats(delta_tick);\n            if (this.client.entity.ticks % 16 == 0) {\n                this.render_clans();\n            }\n            if (!dead) {\n                this.render_upgrade_tanks(delta_tick);\n                this.context.resetTransform();\n                // this.context.save();\n                // const scale = Math.min(this.canvas.width / 1920, this.canvas.height / 1080);\n                // this.context.scale(scale, scale);\n                // const screen_width = this.canvas.width / scale;\n                // const screen_height = this.canvas.height / scale;\n                // const minimap_scale = Math.min(this.minimap_canvas.width / 150, this.minimap_canvas.height / 150);\n                // const minimap_width = this.minimap_canvas.width / minimap_scale;\n                // const minimap_height = this.minimap_canvas.height / minimap_scale;\n                // // this.write_text(`${this.client.connection.latency.toFixed(1)} ms`, this.canvas.width - 15 - (this.minimap_canvas.width / 2), this.canvas.height - 30 - this.minimap_canvas.height, 14, "#FFFFFF", 3, "#000000", false);\n                // // this.write_text(, screen_width - (30) - (minimap_width / 2), screen_height - (50) - minimap_height, 14, "#FFFFFF", 3, "#000000", false);\n                // // const scale = Math.min(this.canvas.width / 1920, this.canvas.height / 1080);\n                // // // this.context.scale(scale, scale);\n                // // const screen_width = this.canvas.width / scale;\n                // // const screen_height = this.canvas.height / scale;\n                // // const minimap_scale = Math.min(this.minimap_canvas.width / 150, this.minimap_canvas.height / 150);\n                // // const minimap_width = this.minimap_canvas.width / minimap_scale;\n                // // const minimap_height = this.minimap_canvas.height / minimap_scale;\n                // // this.write_text(`${this.client.connection.latency.toFixed(1)} ms`, screen_width - 15 - (this.minimap_canvas.width / 2), screen_height - 30 - this.minimap_canvas.height, 14, "#FFFFFF", 3, "#000000", false);\n                // this.context.restore();\n            }\n            ;\n        }\n        this.render_notifications(timestamp);\n    }\n    ;\n    send_packets() {\n        const canvas_transform = this.canvas_transform;\n        let inputs = this.inputs;\n        if (this.auto_fire)\n            inputs |= enums_1.Inputs.Shoot;\n        if (this.auto_spin != enums_1.SpinType.None && !this.client.entity.identity.disable_mouse) {\n            let angle = (0, functions_1.normalise_angle)(this.mouse.angle() + (this.auto_spin == enums_1.SpinType.Tbag ? 0.2 : consts_1.THEME_CONFIG.SPIN_INTENSITY));\n            this.mouse.rotate(angle);\n        }\n        ;\n        const translated_mouse = this.mouse.clone.add(new vector_1.default(this.canvas.width / 2, this.canvas.height / 2));\n        const inverse_transform = canvas_transform.inverse();\n        const mouse = new vector_1.default(inverse_transform.a * translated_mouse.x + inverse_transform.e, inverse_transform.d * translated_mouse.y + inverse_transform.f);\n        if (this.client.entity.identity.disable_mouse)\n            inputs &= ~enums_1.Inputs.Shoot;\n        this.client.polyfight_connection.packet_handler.write_input(inputs, mouse);\n        this.inputs &= ~enums_1.Inputs.Suicide;\n    }\n    ;\n    add_notification(notification) {\n        if (notification.message.includes("killed"))\n            this.client.entity.kills++;\n        else if (notification.message.includes("has won the game 6-")) {\n            const score = parseInt(notification.message.split("has won the game 6-")[1][0]);\n            const name = notification.message.split(" has won")[0];\n            if (this.client.entity.name == name) {\n                this.client.polyfight_elements.team.innerText = `You won the game 6-${score}!`;\n            }\n            else {\n                this.client.polyfight_elements.team.innerText = `You lost the game ${score}-6...`;\n            }\n        }\n        else if (notification.message.includes("The 1v1 has started!")) {\n            this.client.polyfight_connection.in_1v1 = true;\n        }\n        else if (notification.message.includes("Arena closed")) {\n            this.client.polyfight_connection.should_reconnect = true;\n        }\n        else if (notification.message.includes("You are now a")) {\n            const type = notification.message.split("You are now a ")[1].split(".")[0];\n            switch (type) {\n                case "Player":\n                    this.client.entity.status = enums_1.PlayerStatus.Player;\n                    break;\n                case "Moderator":\n                    this.client.entity.status = enums_1.PlayerStatus.Moderator;\n                    break;\n                case "Developer":\n                    this.client.entity.status = enums_1.PlayerStatus.Developer;\n                    break;\n            }\n        }\n        for (const notification of this.notifications) {\n            notification.target_index++;\n        }\n        this.notifications.unshift(Object.assign(Object.assign({}, notification), { index: 0, target_index: 0, opacity: 0, target_opacity: 1, lifetime: 5000, initial_time: performance.now(), id: notification.id || undefined }));\n    }\n    ;\n    render_clans() {\n        if (this.clans.length >= consts_1.MAX_CLANS) {\n            this.client.polyfight_elements.clan_textbox.setAttribute("disabled", "disabled");\n            this.client.polyfight_elements.clan_textbox.placeholder = "Max # of clans reached";\n            this.client.polyfight_elements.clan_create.classList.add("disabled");\n        }\n        const clan = this.client.entity.clan_info;\n        if (clan === undefined) {\n            this.client.polyfight_elements.clan_modal_title.innerText = "Clans";\n            this.client.polyfight_elements.clan_list.innerHTML = "";\n            for (let i = 0; i < this.clans.length; ++i) {\n                const clan = this.clans[i];\n                const element = document.createElement("div");\n                element.id = "clan-entry";\n                const name = document.createElement("span");\n                name.id = "clan-name";\n                name.innerText = clan.name;\n                element.appendChild(name);\n                const button = document.createElement("button");\n                button.id = clan.trying_to_join ? "clan-pending" : "clan-join";\n                button.dataset.clan_id = clan.id.toString();\n                button.innerText = clan.trying_to_join ? "Pending..." : "Join";\n                element.appendChild(button);\n                const members = document.createElement("span");\n                members.id = "clan-members";\n                members.innerText = `${clan.members.length} members`;\n                element.appendChild(members);\n                this.client.polyfight_elements.clan_list.appendChild(element);\n            }\n            this.client.polyfight_elements.clan_create.innerText = "Create Clan";\n            this.client.polyfight_elements.clan_create.style.backgroundColor = "#42F15C";\n        }\n        else {\n            this.client.polyfight_elements.clan_modal_title.innerHTML = `Members <span style="color: #00FF00;">[${clan.name}]</span>`;\n            this.client.polyfight_elements.clan_list.innerHTML = "";\n            for (const member of clan.pending_members) {\n                if (!this.clan_requests.includes(member.id) && this.client.entity.id == clan.owner) {\n                    this.clan_requests.push(member.id);\n                    this.add_notification({ message: `${member.name} has requested to join your clan.`, r: 255, g: 255, b: 0 });\n                }\n                const element = document.createElement("div");\n                element.id = "clan-entry";\n                const name = document.createElement("span");\n                name.id = "clan-name";\n                name.innerText = member.name;\n                element.appendChild(name);\n                if (member.id != this.client.entity.id && this.client.entity.id == clan.owner) {\n                    const button = document.createElement("button");\n                    button.id = "clan-join";\n                    button.dataset.clan_id = clan.id.toString();\n                    button.dataset.member_id = member.id.toString();\n                    button.innerText = "Accept";\n                    element.appendChild(button);\n                    const button2 = document.createElement("button");\n                    button2.id = "clan-join";\n                    button2.dataset.clan_id = clan.id.toString();\n                    button2.dataset.member_id = member.id.toString();\n                    button2.innerText = "Decline";\n                    button2.style.backgroundColor = "#F14242";\n                    element.appendChild(button2);\n                }\n                const members = document.createElement("span");\n                members.id = "clan-members";\n                members.innerText = "Pending";\n                element.appendChild(members);\n                this.client.polyfight_elements.clan_list.appendChild(element);\n            }\n            for (const member of clan.members) {\n                const element = document.createElement("div");\n                element.id = "clan-entry";\n                const name = document.createElement("span");\n                name.id = "clan-name";\n                name.innerText = member.name;\n                element.appendChild(name);\n                if (member.id != this.client.entity.id && this.client.entity.id == clan.owner) {\n                    const button = document.createElement("button");\n                    button.id = "clan-join";\n                    button.dataset.clan_id = clan.id.toString();\n                    button.dataset.member_id = member.id.toString();\n                    button.innerText = "Kick";\n                    button.style.backgroundColor = "#F14242";\n                    element.appendChild(button);\n                }\n                const members = document.createElement("span");\n                members.id = "clan-members";\n                members.innerText = member.owner ? "Owner" : "Member";\n                element.appendChild(members);\n                this.client.polyfight_elements.clan_list.appendChild(element);\n            }\n            this.client.polyfight_elements.clan_create.innerText = "Leave Clan";\n            this.client.polyfight_elements.clan_create.style.backgroundColor = "#F14242";\n        }\n        const clan_list = this.client.polyfight_elements.clan_list;\n        const buttons = clan_list.querySelectorAll("#clan-join");\n        buttons.forEach((button) => {\n            /** @ts-ignore */\n            button.onclick = () => {\n                const clan_id = parseInt(button.dataset.clan_id);\n                const member_id = parseInt(button.dataset.member_id);\n                if (!clan) {\n                    this.client.polyfight_connection.packet_handler.write_clan(1, clan_id);\n                    button.id = "clan-pending";\n                    button.innerHTML = "Pending...";\n                    let x;\n                    if (x = this.clans.find(x => x.id == clan_id))\n                        x.trying_to_join = true;\n                }\n                else if (button.innerHTML.includes("Accept")) {\n                    this.clan_requests = this.clan_requests.filter(x => x != member_id);\n                    this.client.polyfight_connection.packet_handler.write_clan(3, member_id, true);\n                }\n                else if (button.innerHTML.includes("Decline")) {\n                    this.clan_requests = this.clan_requests.filter(x => x != member_id);\n                    this.client.polyfight_connection.packet_handler.write_clan(3, member_id, false);\n                }\n                else if (button.innerHTML.includes("Kick")) {\n                    this.client.polyfight_connection.packet_handler.write_clan(4, member_id);\n                }\n            };\n        });\n    }\n    ;\n    render_notifications(timestamp) {\n        for (let i = 0; i < this.notifications.length; ++i) {\n            const notification = this.notifications[i];\n            notification.index = (0, functions_1.lerp)(notification.index, 0.1, notification.target_index);\n            notification.opacity = (0, functions_1.lerp)(notification.opacity, 0.1, notification.target_opacity);\n            if ((0, functions_1.fuzzy_equals)(notification.opacity, 0)) {\n                this.notifications.splice(i, 1);\n                continue;\n            }\n            if (notification.lifetime < (timestamp - notification.initial_time)) {\n                notification.target_opacity = 0;\n            }\n            const scale = Math.min(this.canvas.width / 1920, this.canvas.height / 1080);\n            const screen_width = this.canvas.width / scale;\n            const screen_height = this.canvas.height / scale;\n            const y = 50 + (notification.index * 30) + (notification.index * 5);\n            const x = screen_width / 2;\n            this.context.save();\n            this.context.scale(scale, scale);\n            const font = window.getComputedStyle(document.body).getPropertyValue("--font");\n            this.context.font = `18px ${font}`;\n            const rect_width = this.context.measureText(notification.message).width + 50;\n            this.context.fillStyle = `rgb(${notification.r}, ${notification.g}, ${notification.b})`;\n            if (notification.opacity < 0.5)\n                this.context.globalAlpha = notification.opacity;\n            else\n                this.context.globalAlpha = (0, functions_1.constrain)(0, notification.opacity - 0.5, 1);\n            this.context.fillRect(x - (rect_width / 2), y - 20, rect_width, 30);\n            this.context.globalAlpha = notification.opacity;\n            this.write_text(notification.message, x, y, 18, `rgb(255, 255, 255)`, 0, "#000000", true);\n            this.context.restore();\n        }\n    }\n    /** Renders a tank given its identity. */\n    render_tank(identity, radius, context, respect_angle = true, initial_pos = new vector_1.default(0, 0)) {\n        if (identity.name === "Spectator")\n            return;\n        context.save();\n        context.translate(initial_pos.x, initial_pos.y);\n        const dominant = [];\n        for (let i = 0; i < identity.turrets.length; ++i) {\n            const turret = identity.turrets[i];\n            if (turret.dominant) {\n                dominant.push(turret);\n                continue;\n            }\n            context.save();\n            context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n            context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n            context.lineWidth = consts_1.THEME_CONFIG.STROKE_SIZE * (radius / consts_1.BASE_RADIUS);\n            context.rotate(turret.angle + (respect_angle ? this.upgrade_tanks.angle : 0));\n            context.translate((turret.y_offset || 0) * (radius / consts_1.BASE_RADIUS), turret.x_offset * (radius / consts_1.BASE_RADIUS));\n            const length = turret.length * (radius / consts_1.BASE_RADIUS);\n            const width = turret.width * (radius / consts_1.BASE_RADIUS);\n            if (turret.trapezoidal) {\n                let reversed = turret.trapezoid_reverse;\n                const height = length;\n                const bottom_width = reversed ? width * 2 : width;\n                const top_width = reversed ? width : width * 2;\n                context.save();\n                context.rotate(turret.trapezoid_dir || 0);\n                context.beginPath();\n                context.moveTo(0, -bottom_width / 2);\n                context.lineTo(height, -top_width / 2);\n                context.lineTo(height, top_width / 2);\n                context.lineTo(0, bottom_width / 2);\n                context.lineTo(0, -bottom_width / 2);\n                context.closePath();\n                context.fill();\n                context.stroke();\n                context.restore();\n            }\n            else if (turret.auto) {\n                context.save();\n                context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n                context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n                context.rotate(-(respect_angle ? this.upgrade_tanks.angle : 0));\n                let adjusted_barrel_width = width / 1.5;\n                context.fillRect(0, -adjusted_barrel_width / 2, length, adjusted_barrel_width);\n                context.strokeRect(0, -adjusted_barrel_width / 2, length, adjusted_barrel_width);\n                context.beginPath();\n                context.arc(0, 0, width / 2, 0, functions_1.TAU);\n                context.fill();\n                context.stroke();\n                context.restore();\n            }\n            else {\n                // context.rotate(turret.angle);\n                context.fillRect(0, -width / 2, length, width);\n                context.strokeRect(0, -width / 2, length, width);\n            }\n            context.restore();\n        }\n        ;\n        if (identity.rotators != undefined) {\n            for (let i = 0; i < identity.rotators.length; ++i) {\n                const rotator = identity.rotators[i];\n                context.save();\n                context.fillStyle = consts_1.THEME_CONFIG.SMASHER_FILL.css;\n                context.strokeStyle = consts_1.THEME_CONFIG.SMASHER_STROKE.css;\n                context.lineWidth = consts_1.THEME_CONFIG.STROKE_SIZE * (radius / consts_1.BASE_RADIUS);\n                context.rotate(rotator.angle);\n                const r = (rotator.size * radius);\n                const sides = rotator.sides;\n                context.beginPath();\n                context.moveTo(r, 0);\n                for (let j = 0; j < sides; j++) {\n                    const angle = functions_1.TAU * j / sides;\n                    const x = r * Math.cos(angle);\n                    const y = r * Math.sin(angle);\n                    context.lineTo(x, y);\n                }\n                ;\n                context.closePath();\n                context.fill();\n                context.stroke();\n                context.restore();\n            }\n            ;\n        }\n        ;\n        context.fillStyle = consts_1.THEME_CONFIG.PLAYER_FILL.css;\n        context.strokeStyle = consts_1.THEME_CONFIG.PLAYER_STROKE.css;\n        context.lineWidth = consts_1.THEME_CONFIG.STROKE_SIZE * (radius / consts_1.BASE_RADIUS);\n        if (identity.square) {\n            context.save();\n            context.fillRect(-radius, -radius, radius * 2, radius * 2);\n            context.strokeRect(-radius, -radius, radius * 2, radius * 2);\n            context.restore();\n        }\n        else {\n            switch (tankdefs_1.TANK_DEFS.indexOf(identity)) {\n                case enums_1.EntityIdentityIds.Square:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.SQUARE_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.SQUARE_STROKE.css;\n                        context.beginPath();\n                        context.rect(-radius, -radius, radius * 2, radius * 2);\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.Triangle:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.TRIANGLE_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.TRIANGLE_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -radius * 1.3);\n                        context.lineTo(radius * 1.3 * 0.8660254037844387, radius * 1.3 * 0.5);\n                        context.lineTo(-radius * 1.3 * 0.8660254037844387, radius * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.SmallCrasher:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.CRASHER_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.CRASHER_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -radius * 1.3);\n                        context.lineTo(radius * 1.3 * 0.8660254037844387, radius * 1.3 * 0.5);\n                        context.lineTo(-radius * 1.3 * 0.8660254037844387, radius * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.LargeCrasher:\n                    {\n                        radius *= 1.25;\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.CRASHER_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.CRASHER_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -radius * 1.3);\n                        context.lineTo(radius * 1.3 * 0.8660254037844387, radius * 1.3 * 0.5);\n                        context.lineTo(-radius * 1.3 * 0.8660254037844387, radius * 1.3 * 0.5);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.Pentagon:\n                    {\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.PENTAGON_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.PENTAGON_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -radius);\n                        context.lineTo(radius * 0.9510565162951535, -radius * 0.30901699437494745);\n                        context.lineTo(radius * 0.5877852522924731, radius * 0.8090169943749473);\n                        context.lineTo(-radius * 0.587785252292473, radius * 0.8090169943749475);\n                        context.lineTo(-radius * 0.9510565162951536, -radius * 0.30901699437494734);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                case enums_1.EntityIdentityIds.AlphaPentagon:\n                    {\n                        radius *= 2.5;\n                        context.save();\n                        context.fillStyle = consts_1.THEME_CONFIG.PENTAGON_FILL.css;\n                        context.strokeStyle = consts_1.THEME_CONFIG.PENTAGON_STROKE.css;\n                        context.beginPath();\n                        context.moveTo(0, -radius);\n                        context.lineTo(radius * 0.9510565162951535, -radius * 0.30901699437494745);\n                        context.lineTo(radius * 0.5877852522924731, radius * 0.8090169943749473);\n                        context.lineTo(-radius * 0.587785252292473, radius * 0.8090169943749475);\n                        context.lineTo(-radius * 0.9510565162951536, -radius * 0.30901699437494734);\n                        context.closePath();\n                        context.fill();\n                        context.stroke();\n                        context.restore();\n                        break;\n                    }\n                    ;\n                default:\n                    {\n                        context.beginPath();\n                        context.arc(0, 0, radius, 0, functions_1.TAU);\n                        context.fill();\n                        context.stroke();\n                        break;\n                    }\n            }\n        }\n        for (const turret of dominant) {\n            context.save();\n            context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n            context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n            context.rotate(turret.angle);\n            context.translate((turret.y_offset || 0) * (radius / consts_1.BASE_RADIUS), turret.x_offset * (radius / consts_1.BASE_RADIUS));\n            const length = turret.length * (radius / consts_1.BASE_RADIUS);\n            const width = turret.width * (radius / consts_1.BASE_RADIUS);\n            if (turret.trapezoidal) {\n                let reversed = turret.trapezoid_reverse;\n                const height = length;\n                const bottom_width = reversed ? width * 2 : width;\n                const top_width = reversed ? width : width * 2;\n                context.save();\n                // context.rotate(turret.angle);\n                // context.translate((turret.y_offset || 0) * (radius / BASE_RADIUS), turret.x_offset * (radius / BASE_RADIUS));\n                context.beginPath();\n                context.moveTo(0, -bottom_width / 2);\n                context.lineTo(height, -top_width / 2);\n                context.lineTo(height, top_width / 2);\n                context.lineTo(0, bottom_width / 2);\n                context.lineTo(0, -bottom_width / 2);\n                context.closePath();\n                context.fill();\n                context.stroke();\n                context.restore();\n            }\n            else if (turret.auto) {\n                context.save();\n                context.fillStyle = consts_1.THEME_CONFIG.TURRET_FILL.css;\n                context.strokeStyle = consts_1.THEME_CONFIG.TURRET_STROKE.css;\n                // context.rotate(-this.angle);\n                // context.translate(0, turret.x_offset);\n                // context.translate((turret.y_offset || 0) * (radius / BASE_RADIUS), turret.x_offset * (radius / BASE_RADIUS));;\n                // context.rotate(turret.angle);\n                let adjusted_barrel_width = width / 1.5;\n                context.fillRect(0, -adjusted_barrel_width / 2, length, adjusted_barrel_width);\n                context.strokeRect(0, -adjusted_barrel_width / 2, length, adjusted_barrel_width);\n                context.beginPath();\n                context.arc(0, 0, width / 2, 0, functions_1.TAU);\n                context.fill();\n                context.stroke();\n                context.restore();\n            }\n            else {\n                // context.translate((turret.y_offset || 0) * (radius / BASE_RADIUS), turret.x_offset * (radius / BASE_RADIUS));\n                // context.rotate(turret.angle);\n                context.fillRect(0, -width / 2, length, width);\n                context.strokeRect(0, -width / 2, length, width);\n            }\n            context.restore();\n        }\n        context.restore();\n    }\n    render_death(timestamp, delta_average) {\n        var _a;\n        const delta_tick = (0, functions_1.constrain)(0, delta_average / 16.66, 1);\n        this.render_game(timestamp, delta_average, true, true);\n        // const scale = Math.min(this.canvas.width / 1920, this.canvas.height / 1080);\n        const scale = window.devicePixelRatio;\n        const screen_width = this.canvas.width / scale;\n        const screen_height = this.canvas.height / scale;\n        this.context.save();\n        this.context.scale(scale, scale);\n        this.context.globalAlpha = 1 - this.lerp_screen_opacity(delta_tick);\n        this.context.fillStyle = "#000000";\n        this.context.fillRect(0, 0, screen_width, screen_height);\n        this.context.globalAlpha = 1;\n        if (this.client.entity.dying_phase != enums_1.DyingPhase.Dead)\n            return this.context.restore();\n        // this.write_text(`Your Spammer ELO:`, screen_width / 2 - 120, screen_height / 2 - 200, 24, "#FFFFFF", 3, "#000000", true);\n        // this.write_text(`Opponent\'s Drone ELO:`, screen_width / 2 - 140, screen_height / 2 - 170, 24, "#FFFFFF", 3, "#000000", true);\n        if (!this.client.entity.killer_name)\n            this.client.entity.killer_name = ((_a = this.client.entity.surroundings.find(e => this.client.entity.killer == e.id)) === null || _a === void 0 ? void 0 : _a.name) || "";\n        this.write_text(`You were killed by:`, screen_width / 2, screen_height / 2 - 100, 24, "#FFFFFF", 4, "#000000", true);\n        this.write_text(`${this.client.entity.killer_name || "Unknown"}`, screen_width / 2, screen_height / 2 - 60, 36, "#FFFFFF", 4, "#000000", true);\n        // this.write_text(`-> Score: ${this.client.entity.score.toFixed(0)}`, screen_width / 2 - 100, screen_height / 2 - 20, 16, "#FFFFFF", 2, "#000000", true);\n        // this.write_text(`-> Time Alive: ${this.client.entity.time_alive}`, screen_width / 2 - 100, screen_height / 2 - 10, 16, "#FFFFFF", 2, "#000000", true);\n        this.write_text(`Score:`, screen_width / 2 - 100, screen_height / 2 - 10, 24, "#FFFFFF", 3, "#000000", true);\n        this.write_text(`Kills:`, screen_width / 2 - 90, screen_height / 2 + 20, 24, "#FFFFFF", 3, "#000000", true);\n        this.write_text(`Time Alive:`, screen_width / 2 - 125, screen_height / 2 + 50, 24, "#FFFFFF", 3, "#000000", true);\n        let ranked = this.client.polyfight_connection.is_ranked;\n        if (ranked) {\n            this.write_text("Your ELO:", screen_width / 2 - 120, screen_height / 2 + 100, 24, "#FFFFFF", 3, "#000000", true);\n            this.write_text("Opponent ELO:", screen_width / 2 - 150, screen_height / 2 + 130, 24, "#FFFFFF", 3, "#000000", true);\n        }\n        const time_offset = this.client.entity.time_alive.includes("h") ? 10 : (this.client.entity.time_alive.includes("m") ? 5 : 0);\n        this.write_text(`${(0, consts_1.commaify)(parseInt(this.client.entity.score.toFixed(0)))}`, screen_width / 2, screen_height / 2 - 10, 24, "#FFFFFF", 3, "#000000", true);\n        this.write_text(`${this.client.entity.kills}`, screen_width / 2, screen_height / 2 + 20, 24, "#FFFFFF", 3, "#000000", true);\n        this.write_text(`${this.client.entity.time_alive}`, screen_width / 2 + time_offset, screen_height / 2 + 50, 24, "#FFFFFF", 3, "#000000", true);\n        if (ranked) {\n            const [[self_old, self_new], [opp_old, opp_new]] = this.client.polyfight_connection.elo_changes.map(x => x.map(x => Math.round(x)));\n            const self = self_new - self_old;\n            const opp = opp_new - opp_old;\n            // this.write_text(`${self > 0 ? "+" : ""}${self}`, screen_width / 2 - 5, screen_height / 2 + 100, 24, self > 0 ? "#22FF00" : "#E60B25", 3, "#000000", true);\n            // this.write_text(`${other > 0 ? "+" : ""}${other}`, screen_width / 2 - 5, screen_height / 2 + 130, 24, other > 0 ? "#22FF00" : "#E60B25", 3, "#000000", true);\n            const { width } = this.write_text(`${self_new} = ${self_old}`, screen_width / 2 - 30, screen_height / 2 + 100, 24, "#FFFFFF", 3, "#000000", true, this.context, "left");\n            this.write_text(` ${self > 0 ? "+" : "-"} ${self.toString().replace("-", "")}`, screen_width / 2 - 30 + width, screen_height / 2 + 100, 24, self > 0 ? "#22FF00" : "#E60B25", 3, "#000000", true, this.context, "left");\n            const { width: width2 } = this.write_text(`${opp_new} = ${opp_old}`, screen_width / 2 - 30, screen_height / 2 + 130, 24, "#FFFFFF", 3, "#000000", true, this.context, "left");\n            this.write_text(` ${opp > 0 ? "+" : "-"} ${opp.toString().replace("-", "")}`, screen_width / 2 - 30 + width2, screen_height / 2 + 130, 24, opp > 0 ? "#22FF00" : "#E60B25", 3, "#000000", true, this.context, "left");\n            this.write_text("(press enter to respawn)", screen_width / 2, screen_height / 2 + 210, 10, "#FFFFFF", 2, "#000000", true);\n        }\n        else {\n            this.write_text("(press enter to respawn)", screen_width / 2, screen_height / 2 + 100, 10, "#FFFFFF", 2, "#000000", true);\n        }\n        this.context.save();\n        const respawn_button = this.death_buttons[1];\n        this.context.fillStyle = color_1.default.from_hex("03fc30").blend_with((respawn_button === null || respawn_button === void 0 ? void 0 : respawn_button.hovered) ? 0.25 : ((respawn_button === null || respawn_button === void 0 ? void 0 : respawn_button.clicked) ? 0.1 : 0), color_1.default.BLACK).css;\n        this.context.strokeStyle = color_1.default.blend_colours(color_1.default.from_hex("03fc30"), color_1.default.BLACK, consts_1.THEME_CONFIG.STROKE_INTENSITY).css;\n        this.context.lineWidth = 2;\n        this.context.beginPath();\n        this.context.roundRect(screen_width / 2 - 50, screen_height / 2 + 150, 100, 50, 5);\n        this.context.fill();\n        this.context.stroke();\n        this.write_text("Spawn", screen_width / 2 - 0, screen_height / 2 + 182, 24, "#FFFFFF", 3, "#000000", true);\n        this.death_buttons[1] = {\n            x: (screen_width / 2 - 50),\n            y: (screen_height / 2 + 150),\n            width: 100,\n            height: 50,\n            hovered: respawn_button === null || respawn_button === void 0 ? void 0 : respawn_button.hovered,\n            clicked: respawn_button === null || respawn_button === void 0 ? void 0 : respawn_button.clicked,\n            disabled: false,\n            click: () => {\n                this.client.entity.dying_phase = enums_1.DyingPhase.None;\n                this.client.polyfight_elements.container.classList.add("show");\n                this.minimap_canvas.style.display = "none";\n                this.death_buttons = [];\n            },\n        };\n        if (this.client.polyfight_connection.is_host) {\n            const kick_button = this.death_buttons[0];\n            const ban_button = this.death_buttons[2];\n            this.context.fillStyle = color_1.default.from_hex("f5d442").blend_with((kick_button === null || kick_button === void 0 ? void 0 : kick_button.hovered) ? 0.25 : ((kick_button === null || kick_button === void 0 ? void 0 : kick_button.clicked) ? 0.1 : 0), color_1.default.BLACK).css;\n            this.context.strokeStyle = color_1.default.blend_colours(color_1.default.from_hex("f5d442"), color_1.default.BLACK, consts_1.THEME_CONFIG.STROKE_INTENSITY).css;\n            this.context.lineWidth = 2;\n            this.context.beginPath();\n            this.context.roundRect(screen_width / 2 - 200, screen_height / 2 + 150, 100, 50, 5);\n            this.context.fill();\n            this.context.stroke();\n            this.write_text("Kick", screen_width / 2 - 150, screen_height / 2 + 182, 24, "#FFFFFF", 3, "#000000", true);\n            this.context.fillStyle = color_1.default.from_hex("f54242").blend_with((ban_button === null || ban_button === void 0 ? void 0 : ban_button.hovered) ? 0.25 : ((ban_button === null || ban_button === void 0 ? void 0 : ban_button.clicked) ? 0.1 : 0), color_1.default.BLACK).css;\n            this.context.strokeStyle = color_1.default.blend_colours(color_1.default.from_hex("f54242"), color_1.default.BLACK, consts_1.THEME_CONFIG.STROKE_INTENSITY).css;\n            this.context.lineWidth = 2;\n            this.context.beginPath();\n            this.context.roundRect(screen_width / 2 + 100, screen_height / 2 + 150, 100, 50, 5);\n            this.context.fill();\n            this.context.stroke();\n            this.write_text("Ban", screen_width / 2 + 150, screen_height / 2 + 182, 24, "#FFFFFF", 3, "#000000", true);\n            this.death_buttons[0] = {\n                x: (screen_width / 2 - 200),\n                y: (screen_height / 2 + 150),\n                width: 100,\n                height: 50,\n                hovered: kick_button === null || kick_button === void 0 ? void 0 : kick_button.hovered,\n                clicked: kick_button === null || kick_button === void 0 ? void 0 : kick_button.clicked,\n                disabled: false,\n                click: () => {\n                    this.client.polyfight_connection.packet_handler.write_chat(`/kick ${this.client.entity.killer}`);\n                },\n            };\n            this.death_buttons[2] = {\n                x: (screen_width / 2 + 100),\n                y: (screen_height / 2 + 150),\n                width: 100,\n                height: 50,\n                hovered: ban_button === null || ban_button === void 0 ? void 0 : ban_button.hovered,\n                clicked: ban_button === null || ban_button === void 0 ? void 0 : ban_button.clicked,\n                disabled: false,\n                click: () => {\n                    this.client.polyfight_connection.packet_handler.write_chat(`/ban ${this.client.entity.killer}`);\n                },\n            };\n        }\n        this.context.restore();\n        this.context.restore();\n    }\n    ;\n    render_upgrade_stats(dt) {\n        while (this.stats.preloaded_stats.length && this.stats.available_stat_points != 0) {\n            this.client.polyfight_connection.packet_handler.write_stat(this.stats.preloaded_stats.shift());\n            this.stats.available_stat_points--;\n        }\n        ;\n        if (this.stats.available_stat_points > 0 || ["KeyU", "KeyM"].includes(this.client.polyfight_elements.key_held))\n            this.stats.target_opacity = 0;\n        if (this.client.entity.dying_phase != enums_1.DyingPhase.Alive) {\n            this.stats.target_opacity = 0;\n            this.stats_buttons.forEach(button => {\n                if (button)\n                    button.disabled = true;\n            });\n        }\n        this.stats_context.save();\n        const scale = Math.min(this.stats_canvas.width / 350, this.stats_canvas.height / 350);\n        const stats_canvas_width = this.stats_canvas.width / scale;\n        const stats_canvas_height = this.stats_canvas.height / scale;\n        const scalar = (this.is_mobile ? 1 : 1.2);\n        /** @ts-ignore */\n        this.stats_context.scale(scale * scalar, scale * scalar);\n        const opacity = this.lerp_stats_opacity(dt);\n        this.stats_context.globalAlpha = 1 - opacity;\n        if (this.is_mobile) {\n            this.stats_context.fillStyle = "rgba(0, 0, 0, 0.5)";\n            this.stats_context.beginPath();\n            this.stats_context.roundRect(0, 0, stats_canvas_width, stats_canvas_height, 5);\n            this.stats_context.fill();\n            const stats = this.stats.stats_value.map((x, i) => ({ stat_value: x, real_idx: i })).filter((x, i) => this.stats.max_stats_value[i] != 0);\n            const max_stats = this.stats.max_stats_value.filter(x => x != 0);\n            for (let i = 0; i < stats.length; ++i) {\n                const real_stat_idx = stats[i].real_idx;\n                const stat = stats[i].stat_value;\n                const max_stat = max_stats[i];\n                const stat_color = consts_1.THEME_CONFIG.UPGRADES[real_stat_idx % enums_1.UpgradeStats.Sentinel];\n                const button = this.stats_buttons[real_stat_idx];\n                let name = enums_1.UpgradeStats[real_stat_idx].replace(/([A-Z])/g, \' $1\').trim();\n                if (name == "Projectile Reload" && this.client.entity.identity_id == enums_1.EntityIdentityIds.Necromancer)\n                    name = "Drone Count";\n                if (name == "Fov")\n                    name = "Field of View";\n                // draw small box with stat name\n                this.stats_context.fillStyle = stat_color.css;\n                this.stats_context.strokeStyle = color_1.default.blend_colours(stat_color, color_1.default.BLACK, consts_1.THEME_CONFIG.STROKE_INTENSITY).css;\n                this.stats_context.lineWidth = 2;\n                if (button === null || button === void 0 ? void 0 : button.disabled) {\n                    this.stats_context.fillStyle = stat_color.clone().grayscale().css;\n                    this.stats_context.strokeStyle = color_1.default.blend_colours(stat_color, color_1.default.BLACK, consts_1.THEME_CONFIG.STROKE_INTENSITY).grayscale().css;\n                }\n                this.stats_context.beginPath();\n                const width = 100;\n                const height = 75;\n                /** @ts-ignore */\n                const box_x_dist = window.m;\n                const positionsPerRow = 3;\n                const row = Math.floor(i / positionsPerRow);\n                const column = i % positionsPerRow;\n                const x = 20 + (105 * column);\n                /** @ts-ignore */\n                const y = 20 + (120 * row);\n                this.stats_context.save();\n                this.stats_context.globalAlpha = (button === null || button === void 0 ? void 0 : button.clicked) ? 0.5 : ((button === null || button === void 0 ? void 0 : button.hovered) ? 0.6 : 0.8);\n                this.stats_context.roundRect(x, y, width, height, 5);\n                this.stats_context.restore();\n                this.stats_context.fill();\n                this.stats_context.stroke();\n                this.stats_context.miterLimit = 2;\n                this.stats_context.font = `bold 14px ${window.getComputedStyle(document.body).getPropertyValue("--font")}`;\n                const words = name.split(" ");\n                const lines = [];\n                let currentLine = words[0];\n                for (let i = 1; i < words.length; i++) {\n                    const word = words[i];\n                    const w = this.stats_context.measureText(currentLine + " " + word).width;\n                    if (w < width) {\n                        currentLine += " " + word;\n                    }\n                    else {\n                        lines.push(currentLine);\n                        currentLine = word;\n                    }\n                }\n                lines.push(currentLine);\n                for (let i = 0; i < lines.length; i++) {\n                    this.stats_context.fillStyle = "#FFFFFF";\n                    /** @ts-ignore */\n                    this.write_text(lines[i], x + width / 2, y + 20 + (i * 12), 14, "#FFFFFF", 3, "#000000", true, this.stats_context);\n                }\n                this.write_text(`[${real_stat_idx + 1}]`, x + width / 2, y + 50, 14, "#FFFFFF", 3, "#000000", true, this.stats_context);\n                const stat_width = (width / max_stat);\n                const stat_height = 10;\n                for (let j = 0; j < max_stat; ++j) {\n                    this.stats_context.fillStyle = j < stat ? stat_color.css : "#FFFFFF";\n                    this.stats_context.lineWidth = 2;\n                    this.stats_context.beginPath();\n                    this.stats_context.roundRect(x + (j * stat_width), y + 65, stat_width - 2, stat_height, 2);\n                    this.stats_context.closePath();\n                    this.stats_context.fill();\n                    this.stats_context.stroke();\n                }\n                ;\n                this.stats_buttons[real_stat_idx] = {\n                    x: x * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n                    y: y * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n                    width: width * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n                    height: height * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n                    click: () => {\n                        this.client.polyfight_connection.packet_handler.write_stat(real_stat_idx);\n                    },\n                    clicked: (button === null || button === void 0 ? void 0 : button.clicked) || false,\n                    hovered: (button === null || button === void 0 ? void 0 : button.hovered) || false,\n                    disabled: (button === null || button === void 0 ? void 0 : button.disabled) == undefined ? (stat == max_stat || this.stats.available_stat_points == 0) : button.disabled\n                };\n            }\n            this.stats_context.save();\n            if (this.stats.available_stat_points != 0)\n                /** @ts-ignore */\n                this.write_text(`x${this.stats.available_stat_points}`, stats_canvas_width - 20, stats_canvas_height - 325, 18, "#FFFFFF", 4, "#000000", false, this.stats_context);\n            this.stats_context.restore();\n        }\n        else {\n            /** @ts-ignore */\n            this.stats_context.translate(-160, -35);\n            // translate based on the highest stat\n            /** @ts-ignore */\n            this.stats_context.translate(220, 0);\n            const y = stats_canvas_height - 20 - (30) * enums_1.UpgradeStats.Sentinel;\n            this.stats_context.fillStyle = "rgba(0, 0, 0, 0.5)";\n            let maximum_width = this.stats.upgrade_width * (this.stats.max_stats_value.reduce((a, b) => a > b ? a : b) + 1);\n            this.stats_context.beginPath();\n            this.stats_context.roundRect(10, y - 5, maximum_width + 40, enums_1.UpgradeStats.Sentinel * (25 + 3) + 10, 5);\n            this.stats_context.fill();\n            for (let i = 0; i < enums_1.UpgradeStats.Sentinel; ++i) {\n                this.stats_context.save();\n                const stat = this.stats.stats_value[i];\n                const max_stat = this.stats.max_stats_value[i];\n                const stat_color = consts_1.THEME_CONFIG.UPGRADES[i % enums_1.UpgradeStats.Sentinel];\n                const button = this.stats_buttons[i];\n                const STAT_WIDTH = this.stats.upgrade_width * (max_stat + 1);\n                const STAT_HEIGHT = 25;\n                const POSITION = enums_1.UpgradeStats.Sentinel - i - 1;\n                if (max_stat == 0 && button) {\n                    button.disabled = true;\n                    continue;\n                }\n                // Render the background bar.\n                this.stats_context.save();\n                this.stats_context.strokeStyle = consts_1.THEME_CONFIG.UPGRADES_BACKGROUND.css;\n                this.stats_context.globalAlpha = (1 - opacity) * 0.2;\n                this.stats_context.lineCap = "round";\n                this.stats_context.lineWidth = STAT_HEIGHT;\n                this.stats_context.beginPath();\n                this.stats_context.moveTo(30, stats_canvas_height - 50 - (STAT_HEIGHT + 3) * POSITION);\n                this.stats_context.lineTo(30 + STAT_WIDTH, stats_canvas_height - 50 - (STAT_HEIGHT + 3) * POSITION);\n                this.stats_context.stroke();\n                this.stats_context.restore();\n                // Render the actual stat values.\n                const preloaded = this.stats.preloaded_stats.filter(x => x == i).length;\n                for (let i = 0; i < stat + preloaded; ++i) {\n                    this.stats_context.save();\n                    this.stats_context.globalAlpha = (i >= stat ? 0.5 : 1) * (1 - opacity);\n                    if (i == 0 || i == max_stat - 1) {\n                        const radius = STAT_HEIGHT / 2;\n                        const x = i == 0 ? 15 : 25 + (STAT_WIDTH / max_stat) * i;\n                        const y = stats_canvas_height - 50 - (STAT_HEIGHT + 3) * POSITION - 12;\n                        const width = i == 0 ? STAT_WIDTH / max_stat + 10 : STAT_WIDTH / max_stat + 5;\n                        const height = STAT_HEIGHT;\n                        this.stats_context.save();\n                        this.stats_context.fillStyle = stat_color.css;\n                        this.stats_context.strokeStyle = stat_color.clone().blend_with(0.5, color_1.default.BLACK).css;\n                        this.stats_context.lineWidth = 2;\n                        this.stats_context.beginPath();\n                        if (i == 0) {\n                            this.stats_context.moveTo(x, y + radius);\n                            this.stats_context.arcTo(x, y, x + width, y, radius);\n                            this.stats_context.lineTo(x + width, y);\n                            this.stats_context.lineTo(x + width, y + height);\n                            this.stats_context.lineTo(x + radius, y + height);\n                            this.stats_context.arcTo(x, y + height, x, y, radius);\n                        }\n                        else if (i == max_stat - 1) {\n                            this.stats_context.moveTo(x + width, y);\n                            this.stats_context.arcTo(x + width + radius, y, x + width + radius, y + radius, radius);\n                            this.stats_context.lineTo(x + width + radius, y + height - radius);\n                            this.stats_context.arcTo(x + width + radius, y + height, x + width, y + height, radius);\n                            this.stats_context.lineTo(x, y + height);\n                            this.stats_context.lineTo(x, y);\n                        }\n                        this.stats_context.closePath();\n                        this.stats_context.fill();\n                        this.stats_context.stroke();\n                        this.stats_context.restore();\n                    }\n                    else {\n                        const x = 25 + (STAT_WIDTH / max_stat) * i;\n                        const y = stats_canvas_height - 50 - (STAT_HEIGHT + 3) * POSITION - 12;\n                        const width = STAT_WIDTH / max_stat;\n                        const height = STAT_HEIGHT;\n                        // draw rect\n                        this.stats_context.save();\n                        this.stats_context.fillStyle = stat_color.css; // i > stat means its preloaded.\n                        this.stats_context.strokeStyle = stat_color.clone().blend_with(0.5, color_1.default.BLACK).css;\n                        this.stats_context.lineWidth = 2;\n                        this.stats_context.fillRect(x, y, width, height);\n                        this.stats_context.strokeRect(x, y, width, height);\n                        this.stats_context.restore();\n                    }\n                    this.stats_context.restore();\n                }\n                // Render the "add stat" button.\n                this.stats_context.save();\n                if (button === null || button === void 0 ? void 0 : button.disabled) {\n                    this.stats_context.fillStyle = "#9D9D9D";\n                    this.stats_context.strokeStyle = "#000000";\n                }\n                else {\n                    this.stats_context.fillStyle = stat_color.clone().blend_with((button === null || button === void 0 ? void 0 : button.clicked) ? 0.25 : ((button === null || button === void 0 ? void 0 : button.hovered) ? 0.1 : 0), color_1.default.BLACK).css;\n                    this.stats_context.strokeStyle = stat_color.clone().blend_with(0.5, color_1.default.BLACK).css;\n                }\n                this.stats_context.lineWidth = 1.25;\n                const radius = 12;\n                const x = STAT_WIDTH + 60;\n                const y = stats_canvas_height - 50 - (STAT_HEIGHT + 3) * POSITION - 18;\n                this.stats_context.beginPath();\n                this.stats_context.arc(radius - 20, y + 16, radius, 0, functions_1.TAU);\n                this.stats_context.fill();\n                this.stats_context.stroke();\n                this.write_text(`[${i + 1}]`, radius - 50, y + 21, 14, "#FFFFFF", 3, "#000000", true, this.stats_context);\n                const ui_scale = parseFloat(getComputedStyle(document.documentElement).getPropertyValue("--ui-scale"));\n                this.stats_buttons[i] =\n                    {\n                        /** @ts-ignore */\n                        x: (47) * ui_scale, y: (y - 25 - (-5.5 * i)) * ui_scale,\n                        width: radius * ui_scale * 2 * scalar, height: radius * ui_scale * 2 * scalar,\n                        clicked: (button === null || button === void 0 ? void 0 : button.clicked) || false,\n                        hovered: (button === null || button === void 0 ? void 0 : button.hovered) || false,\n                        click: (button === null || button === void 0 ? void 0 : button.click) || (() => {\n                            this.client.polyfight_connection.packet_handler.write_stat(i);\n                        }).bind(this),\n                        disabled: (button === null || button === void 0 ? void 0 : button.disabled) == undefined ? (stat == max_stat || this.stats.available_stat_points == 0) : button.disabled\n                    };\n                this.stats_context.restore();\n                let name = enums_1.UpgradeStats[i].replace(/([A-Z])/g, \' $1\').trim();\n                if (name == "Projectile Reload" && this.client.entity.identity_id == enums_1.EntityIdentityIds.Necromancer)\n                    name = "Drone Count";\n                if (name == "Fov")\n                    name = "Field of View";\n                this.write_text("+", radius - 20, y + 22, 18, "#FFFFFF", 3, "#000000", true, this.stats_context);\n                this.write_text(name, 20 + STAT_WIDTH, stats_canvas_height - 46 - (STAT_HEIGHT + 3) * POSITION, 14, "#FFFFFF", 3, "#000000", false, this.stats_context, "right");\n                this.write_text(stat, 30, stats_canvas_height - 46 - (STAT_HEIGHT + 3) * POSITION, 14, "#FFFFFF", 3, "#000000", false, this.stats_context, "left");\n            }\n            if (this.stats.available_stat_points != 0)\n                /** @ts-ignore */\n                this.write_text(`x${this.stats.available_stat_points}`, stats_canvas_width - 140, stats_canvas_height - 300, 18, "#FFFFFF", 4, "#000000", false, this.stats_context);\n        }\n        this.stats_context.restore();\n        // for (let i = 0; i < this.stats_buttons.length; ++i) {\n        //     this.client.polyfight_canvas.stats_context.save();\n        //     // reset canvas transform\n        //     this.client.polyfight_canvas.stats_context.setTransform(1, 0, 0, 1, 0, 0);\n        //     this.client.polyfight_canvas.stats_context.fillStyle = "#F00";\n        //     this.client.polyfight_canvas.stats_context.beginPath();\n        //     this.client.polyfight_canvas.stats_context.arc(this.stats_buttons[i].x + this.stats_buttons[i].width / 2, this.stats_buttons[i].y + this.stats_buttons[i].height / 2, 12, 0, Math.PI * 2);\n        //     this.client.polyfight_canvas.stats_context.fill();\n        //     this.client.polyfight_canvas.stats_context.restore();\n        // }\n    }\n    render_scoreboard(dt) {\n        this.scoreboard_context.save();\n        const scale = Math.min(this.scoreboard_canvas.width / 300, this.scoreboard_canvas.height / 350);\n        const scoreboard_canvas_width = this.scoreboard_canvas.width / scale;\n        const scoreboard_canvas_height = this.scoreboard_canvas.height / scale;\n        this.scoreboard_context.scale(scale, scale);\n        let height = 50 + (25 * this.scoreboard.length) + 30;\n        this.scoreboard_context.fillStyle = "rgba(0, 0, 0, 0.4)";\n        this.scoreboard_context.beginPath();\n        this.scoreboard_context.roundRect(0, 0, 300, height, 5);\n        this.scoreboard_context.fill();\n        //     background: rgba(0, 0, 0, 0.4);\n        // border-radius: 5px;\n        this.write_text("Leaderboard", scoreboard_canvas_width / 2, 30, 25, "#FFFFFF", 5, "#000000", true, this.scoreboard_context);\n        for (let i = 0; i < this.scoreboard.length; ++i) {\n            const player = this.scoreboard[i];\n            const y = 50 + (25 * i);\n            const score_width = 250;\n            const score_height = 20;\n            const true_width = Math.max(score_width - score_height, 1);\n            const offset = -true_width / 2;\n            this.scoreboard_context.save();\n            this.scoreboard_context.translate(scoreboard_canvas_width / 2, y);\n            /** Render the background of the xp bar. */\n            this.scoreboard_context.lineCap = "round";\n            this.scoreboard_context.lineWidth = score_height;\n            this.scoreboard_context.strokeStyle = consts_1.THEME_CONFIG.SCORE_BAR_BACKGROUND.css;\n            this.scoreboard_context.beginPath();\n            this.scoreboard_context.moveTo(offset + 0.5, 0.5);\n            this.scoreboard_context.lineTo(offset + 0.5 + true_width, 0.5);\n            this.scoreboard_context.stroke();\n            /** Render the foreground of the score bar. */\n            this.scoreboard_context.lineWidth = score_height * 0.75;\n            this.scoreboard_context.strokeStyle = consts_1.THEME_CONFIG.SCORE_BAR_FILL.css;\n            this.scoreboard_context.beginPath();\n            this.scoreboard_context.moveTo(offset + 0.5, 0.5);\n            this.scoreboard_context.lineTo(offset + 0.5 + true_width * (player.score / this.scoreboard[0].score), 0.5);\n            this.scoreboard_context.stroke();\n            this.scoreboard_context.translate(offset, 0);\n            this.render_tank(tankdefs_1.TANK_DEFS[player.identity], 10, this.scoreboard_context, false);\n            this.scoreboard_context.restore();\n            this.write_text(`${player.name} — ${(0, consts_1.prettify)(player.score)}`, scoreboard_canvas_width / 2, y + 5, 14, "#FFFFFF", 3, "#000000", true, this.scoreboard_context);\n        }\n        // write at bottom of scoreboard\n        // this.write_text(`${this.player_count.server} Players / ${this.player_count.global} Total`, scoreboard_canvas_width / 2, scoreboard_canvas_height - 40 - (25 * (10 - this.scoreboard.length)), 14, "#FFFFFF", 3, "#000000", true, this.scoreboard_context);\n        this.write_text(`${this.player_count.server} Players`, scoreboard_canvas_width / 2, scoreboard_canvas_height - 40 - (25 * (10 - this.scoreboard.length)), 14, "#FFFFFF", 3, "#000000", true, this.scoreboard_context);\n        this.scoreboard_context.restore();\n    }\n    render_score(dt) {\n        var _a;\n        let clan_name = (_a = this.client.entity.clan_info) === null || _a === void 0 ? void 0 : _a.name;\n        this.score_context.save();\n        const scale = Math.min(this.score_canvas.width / 500, this.score_canvas.height / 200);\n        const score_canvas_width = this.score_canvas.width / scale;\n        const score_canvas_height = this.score_canvas.height / scale;\n        const card_width = 350;\n        const card_height = 110;\n        this.score_context.scale(scale, scale);\n        this.score_context.fillStyle = "rgba(0, 0, 0, 0.4)";\n        this.score_context.beginPath();\n        this.score_context.roundRect(25, 70, card_width, card_height, 5);\n        this.score_context.fill();\n        const metric = this.write_text(this.client.entity.name, 40, score_canvas_height - 95, 24, "#FFFFFF", 4, "#000000", false, this.score_context, "left");\n        this.write_text(`[${clan_name || "No Clan"}]`, 40 + metric.width + 10, score_canvas_height - 95, 24, consts_1.THEME_CONFIG.CLAN_FILL.css, 4, "#000000", false, this.score_context, "left");\n        const score_width = 224;\n        const score_height = 20;\n        const true_width = Math.max(score_width - score_height, 1);\n        const offset = -true_width / 2;\n        this.score_context.save();\n        this.score_context.translate(150, score_canvas_height - 65);\n        /** Render the background of the xp bar. */\n        this.score_context.lineCap = "round";\n        this.score_context.lineWidth = score_height;\n        this.score_context.strokeStyle = consts_1.THEME_CONFIG.SCORE_BAR_BACKGROUND.css;\n        this.score_context.beginPath();\n        this.score_context.moveTo(offset + 0.5, 0.5);\n        this.score_context.lineTo(offset + 0.5 + true_width, 0.5);\n        this.score_context.stroke();\n        /** Render the foreground of the xp bar. */\n        this.score_context.lineWidth = score_height * 0.75;\n        this.score_context.strokeStyle = consts_1.THEME_CONFIG.SCORE_BAR_FILL.css;\n        this.score_context.beginPath();\n        this.score_context.moveTo(offset + 0.5, 0.5);\n        this.score_context.lineTo(offset + 0.5 + true_width, 0.5);\n        this.score_context.stroke();\n        this.score_context.restore();\n        this.write_text(`Score: ${(0, consts_1.commaify)(parseInt(this.client.entity.lerp_score(dt).toFixed(0)))}`, 50, score_canvas_height - 60, 14, "#FFFFFF", 3, "#000000", false, this.score_context, "left");\n        /**@ts-ignore */\n        this.write_text(`Kills: ${this.client.entity.kills}`, 200 + 25 + offset + true_width, score_canvas_height - 60, 14, "#FFFFFF", 3, "#000000", false, this.score_context, "right");\n        const xp_width = 324;\n        const xp_height = 20;\n        const true_width_xp = Math.max(xp_width - xp_height, 1);\n        const offset_xp = -true_width_xp / 2;\n        this.score_context.save();\n        this.score_context.translate(200, score_canvas_height - 40);\n        /** Render the background of the score bar. */\n        this.score_context.lineCap = "round";\n        this.score_context.lineWidth = xp_height;\n        this.score_context.strokeStyle = consts_1.THEME_CONFIG.XP_BAR_BACKGROUND.css;\n        this.score_context.beginPath();\n        this.score_context.moveTo(offset_xp + 0.5, 0.5);\n        this.score_context.lineTo(offset_xp + 0.5 + true_width_xp, 0.5);\n        this.score_context.stroke();\n        /** Render the foreground of the score bar. */\n        let percentage = this.client.entity.level >= consts_1.LEVEL_TO_SCORE_TABLE.length ?\n            0.94 : (0, functions_1.constrain)(0, this.client.entity.lerp_level_bar(dt), 0.94);\n        this.score_context.lineWidth = xp_height * 0.75;\n        this.score_context.strokeStyle = consts_1.THEME_CONFIG.XP_BAR_FILL.css;\n        this.score_context.beginPath();\n        this.score_context.moveTo(offset_xp + 0.5, 0.5);\n        this.score_context.lineTo(offset_xp + 0.5 + xp_width * percentage, 0.5);\n        this.score_context.stroke();\n        this.score_context.restore();\n        this.write_text(`Level ${this.client.entity.level} ${this.client.entity.identity.name}`, 50, score_canvas_height - 35, 14, "#FFFFFF", 3, "#000000", false, this.score_context, "left");\n        this.score_context.restore();\n    }\n    render_upgrade_tanks(dt) {\n        var _a, _b, _c, _d, _e;\n        const scale = Math.min(this.upgrade_tanks_canvas.width / 300, this.upgrade_tanks_canvas.height / 365);\n        const upgrade_tanks_canvas_width = this.upgrade_tanks_canvas.width / scale;\n        const upgrade_tanks_canvas_height = this.upgrade_tanks_canvas.height / scale;\n        if (this.upgrade_tanks.dismissed) {\n            this.upgrade_tanks_context.save();\n            this.upgrade_tanks_context.scale(scale, scale);\n            this.upgrade_tanks_context.fillStyle = `rgba(128, 128, 128, ${((_a = this.upgrade_tanks_close_button) === null || _a === void 0 ? void 0 : _a.clicked) ? 0.5 : (((_b = this.upgrade_tanks_close_button) === null || _b === void 0 ? void 0 : _b.hovered) ? 0.6 : 0.8)})`;\n            this.upgrade_tanks_context.beginPath();\n            this.upgrade_tanks_context.roundRect(upgrade_tanks_canvas_width - 50, 0, 50, 50, 5);\n            this.upgrade_tanks_context.drawImage(this.open_box_image, upgrade_tanks_canvas_width - 50, 0, 50, 50);\n            this.upgrade_tanks_context.fill();\n            this.upgrade_tanks_context.restore();\n            const ui_scale = parseFloat(getComputedStyle(document.documentElement).getPropertyValue("--ui-scale"));\n            this.upgrade_tanks_close_button =\n                {\n                    x: (upgrade_tanks_canvas_width - 50) * ui_scale, y: (0) * ui_scale,\n                    width: 50 * ui_scale, height: 50 * ui_scale,\n                    hovered: ((_c = this.upgrade_tanks_close_button) === null || _c === void 0 ? void 0 : _c.hovered) || false,\n                    clicked: ((_d = this.upgrade_tanks_close_button) === null || _d === void 0 ? void 0 : _d.clicked) || false,\n                    click: () => {\n                        this.upgrade_tanks.dismissed = false;\n                    },\n                    disabled: ((_e = this.upgrade_tanks_close_button) === null || _e === void 0 ? void 0 : _e.disabled) || false\n                };\n            return;\n        }\n        if (this.upgrade_tanks.current_upgrades.length == 0)\n            return;\n        this.upgrade_tanks_context.save();\n        this.upgrade_tanks_context.scale(scale, scale);\n        this.upgrade_tanks_context.fillStyle = "rgba(0, 0, 0, 0.4)";\n        this.upgrade_tanks_context.beginPath();\n        this.upgrade_tanks_context.roundRect(0, 0, upgrade_tanks_canvas_width, upgrade_tanks_canvas_height, 5);\n        this.upgrade_tanks_context.fill();\n        for (let i = 0; i < this.upgrade_tanks.current_upgrades.length; ++i) {\n            const button = this.upgrade_tanks_buttons[i];\n            const identity = tankdefs_1.TANK_DEFS[this.upgrade_tanks.current_upgrades[i]];\n            const colour = consts_1.THEME_CONFIG.UPGRADES[(enums_1.UpgradeStats.Sentinel - i) % enums_1.UpgradeStats.Sentinel];\n            /** @ts-ignore */\n            const x = i % 2 == 0 ? 40 : 160;\n            /** @ts-ignore */\n            const y = -75 + (Math.ceil((i + 1) / 2) * 110);\n            const w = 95;\n            const h = 95;\n            this.upgrade_tanks_context.save();\n            this.upgrade_tanks_context.fillStyle = colour.clone().blend_with((button === null || button === void 0 ? void 0 : button.clicked) ? 0.25 : ((button === null || button === void 0 ? void 0 : button.hovered) ? 0.1 : 0), color_1.default.BLACK).css;\n            this.upgrade_tanks_context.strokeStyle = color_1.default.blend_colours(colour, color_1.default.BLACK, consts_1.THEME_CONFIG.STROKE_INTENSITY).css;\n            this.upgrade_tanks_context.lineWidth = 2;\n            this.upgrade_tanks_context.beginPath();\n            this.upgrade_tanks_context.roundRect(x, y, w, h, 5);\n            this.upgrade_tanks_context.fill();\n            this.upgrade_tanks_context.stroke();\n            this.upgrade_tanks_context.restore();\n            this.upgrade_tanks_context.save();\n            this.upgrade_tanks_context.translate(x + w / 2, y + h / 2);\n            this.upgrade_tanks_context.scale(0.5, 0.5);\n            this.render_tank(identity, 30, this.upgrade_tanks_context);\n            this.upgrade_tanks_context.restore();\n            this.write_text(identity.name, x + w / 2, y + h - 10, 14, "#FFFFFF", 3, "#000000", true, this.upgrade_tanks_context);\n            this.upgrade_tanks_buttons[i] = {\n                x: x * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n                y: y * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n                width: w * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n                height: h * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n                click: () => {\n                    if (this.upgrade_tanks.dismissed)\n                        return;\n                    this.client.polyfight_connection.packet_handler.write_upgrade(i);\n                },\n                clicked: (button === null || button === void 0 ? void 0 : button.clicked) || false,\n                hovered: (button === null || button === void 0 ? void 0 : button.hovered) || false,\n                disabled: (button === null || button === void 0 ? void 0 : button.disabled) || false\n            };\n        }\n        this.upgrade_tanks_context.save();\n        this.upgrade_tanks_context.fillStyle = color_1.default.from_rgb(252, 68, 58).blend_with((this.upgrade_tanks_close_button || {}).clicked ? 0.25 : ((this.upgrade_tanks_close_button || {}).hovered ? 0.1 : 0), color_1.default.BLACK).css;\n        this.upgrade_tanks_context.strokeStyle = "#00000070";\n        this.upgrade_tanks_context.lineWidth = 4;\n        this.upgrade_tanks_context.beginPath();\n        /** @ts-ignore */\n        this.upgrade_tanks_context.roundRect(upgrade_tanks_canvas_width - upgrade_tanks_canvas_width + 265, 5, 30, 30, 10);\n        this.upgrade_tanks_context.fill();\n        this.upgrade_tanks_context.stroke();\n        this.upgrade_tanks_context.closePath();\n        /** @ts-ignore */\n        this.write_text("X", upgrade_tanks_canvas_width - upgrade_tanks_canvas_width + 280, 25, 18, "#FFFFFF", 3, "#000000", true, this.upgrade_tanks_context); // todo make this functional\n        this.upgrade_tanks_context.restore();\n        this.upgrade_tanks_close_button = {\n            x: (upgrade_tanks_canvas_width - upgrade_tanks_canvas_width + 265) * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n            y: 5 * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n            width: 30 * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n            height: 30 * parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue("--ui-scale")),\n            click: () => {\n                this.upgrade_tanks.dismissed = true;\n            },\n            clicked: (this.upgrade_tanks_close_button || {}).clicked || false,\n            hovered: (this.upgrade_tanks_close_button || {}).hovered || false,\n            disabled: false\n        };\n        this.upgrade_tanks_context.restore();\n    }\n}\nexports["default"] = Canvas;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/rendering/canvas.ts?')},"./views/ts/rendering/elements.ts":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst consts_1 = __webpack_require__(/*! ../const/consts */ "./views/ts/const/consts.ts");\nconst enums_1 = __webpack_require__(/*! ../const/enums */ "./views/ts/const/enums.ts");\nconst vector_1 = __importDefault(__webpack_require__(/*! ../utils/vector */ "./views/ts/utils/vector.ts"));\nconst default_theme_1 = __importDefault(__webpack_require__(/*! ../const/default_theme */ "./views/ts/const/default_theme.ts"));\nconst firebase_1 = __importDefault(__webpack_require__(/*! ../auth/firebase */ "./views/ts/auth/firebase.ts"));\nconst color_1 = __importDefault(__webpack_require__(/*! ../utils/color */ "./views/ts/utils/color.ts"));\nconst tankdefs_1 = __webpack_require__(/*! ../const/tankdefs */ "./views/ts/const/tankdefs.ts");\nconst stream_1 = __importDefault(__webpack_require__(/*! ../connection/stream */ "./views/ts/connection/stream.ts"));\nconst functions_1 = __webpack_require__(/*! ../utils/functions */ "./views/ts/utils/functions.ts");\nconst { app, auth, provider, GoogleAuthProvider, onAuthStateChanged, signInWithPopup, signOut } = firebase_1.default;\n/** A representation of the HTML elements created. */\nclass Elements {\n    constructor(client) {\n        /** The container containing every homepage element. */\n        this.container = document.querySelector(".container");\n        /** The disconnected elements. */\n        this.disconnect_elements = document.querySelector(".disconnected-elements");\n        /** The connected elements. */\n        this.connect_elements = document.querySelector(".connected-elements");\n        /** The disconnect message. */\n        this.disconnected_message = document.getElementById("disconnected-message");\n        /** The game title. */\n        this.game_title = document.getElementById("game-title");\n        /** The textbox element. */\n        this.textbox = document.getElementById("name");\n        /** The play button element. */\n        this.play_button = document.getElementById("enter");\n        /** The sign in with Google button. */\n        this.google_signin = document.getElementById("google-signin");\n        /** The clan button element. */\n        this.clan_button = document.getElementById("clans");\n        /** The clan modal. */\n        this.clan_modal = document.getElementById("clan-modal");\n        /** The clan modal close button. */\n        this.clan_modal_close = document.getElementById("clan-close");\n        /** The clan textbox. */\n        this.clan_textbox = document.getElementById("clan-name-input");\n        /** The clan create button. */\n        this.clan_create = document.getElementById("create-clan-button");\n        /** The clan list. */\n        this.clan_list = document.getElementById("clan-list");\n        /** The clan modal title. */\n        this.clan_modal_title = document.getElementById("clan-modal-title");\n        /** The settings button. */\n        this.settings_button = document.getElementById("settings");\n        /** The settings close button. */\n        this.settings_close = document.getElementById("settings-close");\n        /** The settings modal. */\n        this.settings_modal = document.getElementById("settings-modal");\n        /** The themes dropdown. */\n        this.themes_dropdown = document.getElementById("themes");\n        /** The theme name. */\n        this.theme_name = document.getElementById("theme-name");\n        /** New theme button. */\n        this.new_theme = document.getElementById("theme-new");\n        /** Delete theme button. */\n        this.delete_theme = document.getElementById("theme-delete");\n        /** Theme colours. */\n        this.theme_colours = document.getElementById("theme-colors");\n        /** Arena config options. */\n        this.arena_config = document.getElementById("config-options");\n        /** Import theme button. */\n        this.import_theme = document.getElementById("theme-import");\n        /** Export theme button. */\n        this.export_theme = document.getElementById("theme-export");\n        this.stats_leaderboard_modal = document.getElementById("stats-leaderboard-modal");\n        this.stats = document.getElementById("stats");\n        this.leaderboard = document.getElementById("leaderboard");\n        /** The changelog button on the homepage. */\n        this.changelog_button = document.getElementById("changelog");\n        /** The info button on the homepage. */\n        this.info_button = document.getElementById("info");\n        /** The game buttons. */\n        this.game_buttons = document.getElementById("game-buttons");\n        /** The modal with all data. */\n        this.modal = document.getElementById("modal");\n        /** The modal header. */\n        this.modal_header = document.getElementById("modal-title");\n        /** The modal body. */\n        this.modal_body = document.getElementById("modal-body");\n        /** The x-mark at the top-right of the modal. */\n        this.modal_x = document.getElementById("close");\n        /** The settings theme content/ */\n        this.settings_theme_content = document.getElementById("settings-theme-content");\n        /** The settings config content. */\n        this.settings_config_content = document.getElementById("settings-config-content");\n        /** The settings theme button. */\n        this.settings_theme = document.getElementById("settings-theme");\n        /** The settings config button. */\n        this.settings_config = document.getElementById("settings-config");\n        this.new_server = document.getElementById("new_server");\n        this.disconnect_server = document.getElementById("disconnect_server");\n        this.copy_link = document.getElementById("copy_link");\n        this.servers = document.getElementById("servers");\n        this.menu_scoring = document.getElementById("scoring-menu");\n        this.menu_1v1 = document.getElementById("1v1-menu");\n        this.set = document.getElementById("set");\n        this.team = document.getElementById("teams");\n        this.team_new = document.getElementById("team-new");\n        this.team_import = document.getElementById("team-import");\n        this.team_export = document.getElementById("team-export");\n        this.teambuilder_modal = document.getElementById("teambuilder-modal");\n        this.teambuilder_close = document.getElementById("teambuilder-close");\n        this.teambuilder_teams = document.getElementById("teambuilder-teams");\n        this.teambuilder_edit = document.getElementById("teambuilder-edit");\n        this.scoring = document.getElementById("scoring");\n        this.ranked = document.getElementById("1v1");\n        this.ranked_region = document.getElementById("ranked-region");\n        this.teambuilder_teams_buttons = document.getElementById("teambuilder-teams-buttons");\n        this.teambuilder_teamedit_buttons = document.getElementById("teambuilder-teamedit-buttons");\n        this.ranked_div = document.getElementById("ready-div");\n        this.ranked_checkbox = document.getElementById("ready-checkbox");\n        this.teamedit_import = document.getElementById("teamedit-import");\n        this.teamedit_export = document.getElementById("teamedit-export");\n        this.stats_leaderboard_close = document.getElementById("stats-leaderboard-close");\n        this.stats_leaderboard_categories = document.getElementById("stats-leaderboard-categories");\n        this.leaderboard_button = document.getElementById("leaderboard");\n        this.trophy_leaderboard_modal = document.getElementById("trophy-leaderboard-modal");\n        this.trophy_leaderboard_close = document.getElementById("trophy-leaderboard-close");\n        this.chat_input = document.getElementById("chat-input");\n        this.joystick = null;\n        this.level_up = document.getElementById("level-up");\n        this.switch_tank = document.getElementById("switch-tank");\n        this.godmode = document.getElementById("godmode");\n        this.suicide = document.getElementById("suicide");\n        this.chat = document.getElementById("chat");\n        this.shooting_mode = document.getElementById("shooting-mode");\n        this.real_shoot_mode = "S";\n        /** The last key used. */\n        this.last_key = "";\n        /** The key being held. */\n        this.key_held = "";\n        this.purge_all_stats = false;\n        this.client = client;\n        document.getElementById("notice").style.display = localStorage.notice === undefined ? "block" : "none";\n        document.getElementById("notice-close").addEventListener("click", () => {\n            document.getElementById("notice").style.display = "none";\n            localStorage.notice = "true";\n        });\n        this.chat_input.setAttribute(\'size\', this.chat_input.getAttribute(\'placeholder\').length.toString());\n        this.chat_input.setAttribute(\'maxlength\', consts_1.MAX_MESSAGE_LENGTH.toString());\n        this.textbox.value = window.localStorage.name || "";\n        this.ranked_region.innerHTML = Object.keys(consts_1.SERVER_URLS).map(x => `<option value="${x}">${consts_1.SERVER_NAMES[x]}</option>`).join("\\n");\n        /** Add event listeners to the elements. */\n        this.stats.addEventListener("click", this.stats_on_click.bind(this));\n        this.changelog_button.addEventListener("click", this.changelog_button_on_click.bind(this));\n        this.info_button.addEventListener("click", this.info_button_on_click.bind(this));\n        this.modal_x.addEventListener("click", this.modal_x_on_click.bind(this));\n        this.settings_button.addEventListener("click", this.settings_button_on_click.bind(this));\n        this.set.addEventListener("click", this.teambuilder_modal_on_click.bind(this));\n        this.leaderboard_button.addEventListener("click", this.trophy_leaderboard_on_click.bind(this));\n        this.clan_button.addEventListener("click", this.clan_button_on_click.bind(this));\n        this.clan_modal_close.addEventListener("click", this.clan_modal_close_on_click.bind(this));\n        this.settings_close.addEventListener("click", this.settings_button_close_on_click.bind(this));\n        this.teambuilder_close.addEventListener("click", this.teambuilder_modal_close_on_click.bind(this));\n        this.stats_leaderboard_close.addEventListener("click", this.stats_leaderboard_modal_close_on_click.bind(this));\n        this.trophy_leaderboard_close.addEventListener("click", this.trophy_leaderboard_close_on_click.bind(this));\n        document.getElementById("discord-modal-close").addEventListener("click", this.discord_button_close_on_click.bind(this));\n        this.settings_modal.addEventListener("mousedown", e => e.stopPropagation());\n        this.settings_modal.addEventListener("mouseup", e => e.stopPropagation());\n        this.clan_modal.addEventListener("mousedown", e => e.stopPropagation());\n        this.clan_modal.addEventListener("mouseup", e => e.stopPropagation());\n        this.clan_button.addEventListener("mousedown", e => e.stopPropagation());\n        this.clan_button.addEventListener("mouseup", e => e.stopPropagation());\n        this.clan_modal_close.addEventListener("mousedown", e => e.stopPropagation());\n        this.clan_modal_close.addEventListener("mouseup", e => e.stopPropagation());\n        this.settings_button.addEventListener("mousedown", e => e.stopPropagation());\n        this.settings_button.addEventListener("mouseup", e => e.stopPropagation());\n        this.suicide.addEventListener("mousedown", e => e.stopPropagation());\n        this.suicide.addEventListener("mouseup", e => e.stopPropagation());\n        this.chat.addEventListener("mousedown", e => e.stopPropagation());\n        this.chat.addEventListener("mouseup", e => e.stopPropagation());\n        this.shooting_mode.addEventListener("mousedown", e => e.stopPropagation());\n        this.shooting_mode.addEventListener("mouseup", e => e.stopPropagation());\n        const events_start = ["mousedown", "touchstart"];\n        const events_end = ["mouseup", "touchend"];\n        for (const event of events_start) {\n            this.level_up.addEventListener(event, e => {\n                this.client.polyfight_canvas.inputs |= enums_1.Inputs.LevelUp;\n                e.stopPropagation();\n            });\n            this.switch_tank.addEventListener(event, e => {\n                this.client.polyfight_canvas.inputs |= enums_1.Inputs.SwitchTank;\n                e.stopPropagation();\n            });\n            this.godmode.addEventListener(event, e => {\n                this.client.polyfight_canvas.inputs |= enums_1.Inputs.GodMode;\n                e.stopPropagation();\n            });\n        }\n        for (const event of events_end) {\n            this.level_up.addEventListener(event, e => {\n                this.client.polyfight_canvas.inputs &= ~enums_1.Inputs.LevelUp;\n                e.stopPropagation();\n            });\n            this.switch_tank.addEventListener(event, e => {\n                this.client.polyfight_canvas.inputs &= ~enums_1.Inputs.SwitchTank;\n                e.stopPropagation();\n            });\n            this.godmode.addEventListener(event, e => {\n                this.client.polyfight_canvas.inputs &= ~enums_1.Inputs.GodMode;\n                e.stopPropagation();\n            });\n        }\n        this.chat.addEventListener("click", e => {\n            this.client.polyfight_canvas.chat_information.force_open = this.client.polyfight_canvas.chat_information.typing = !this.client.polyfight_canvas.chat_information.typing;\n            if (!this.client.polyfight_canvas.chat_information.typing) {\n                if (this.client.polyfight_elements.chat_input.value.length > 0)\n                    this.client.polyfight_connection.packet_handler.write_chat(this.client.polyfight_elements.chat_input.value);\n                else {\n                    this.client.polyfight_connection.packet_handler.write_type();\n                }\n                this.client.polyfight_elements.chat_input.value = "";\n            }\n            else {\n                this.client.polyfight_connection.packet_handler.write_type();\n            }\n            this.chat_input.value = "";\n            this.chat_input.style.display = this.client.polyfight_canvas.chat_information.typing ? "block" : "none";\n            this.chat_input.focus();\n        });\n        this.suicide.addEventListener("click", e => {\n            this.client.polyfight_canvas.inputs |= enums_1.Inputs.Suicide;\n        });\n        this.shooting_mode.addEventListener("click", () => {\n            this.real_shoot_mode = this.shooting_mode.innerText == "S" ? "R" : "S";\n            this.client.polyfight_canvas.add_notification({ message: `Shooting Mode: ${this.real_shoot_mode == "R" ? "Repel" : "Shoot"}`, r: 0, g: 0, b: 0 });\n            this.shooting_mode.innerText = this.real_shoot_mode;\n        });\n        this.teamedit_import.addEventListener("click", () => {\n            const team = prompt("Paste the team data here:");\n            if (!team)\n                return;\n            try {\n                const parsed = JSON.parse(team);\n                if (!Array.isArray(parsed.tanks) || parsed.tanks.length !== 6)\n                    throw new Error("Invalid team data!");\n                /** @ts-ignore */\n                window.teams_state.teams[window.teams_state.team_idx] = parsed;\n                /** @ts-ignore */\n                localStorage.teams = JSON.stringify(window.teams_state);\n                refresh_current_teams();\n            }\n            catch (er) {\n                alert("Invalid team data!");\n            }\n        });\n        this.teamedit_export.addEventListener("click", () => {\n            /** @ts-ignore */\n            const team = window.teams_state.teams[window.teams_state.team_idx];\n            prompt("Copy the text below to export your theme!", JSON.stringify(team));\n        });\n        this.ranked_checkbox.addEventListener("change", () => {\n            const value = this.ranked_checkbox.checked;\n            this.client.polyfight_connection.packet_handler.write_ready(value);\n        });\n        this.team_new.addEventListener("click", () => {\n            refresh_current_teams();\n            /** @ts-ignore */\n            const teams_state = window.teams_state;\n            const team = { name: `Team #${teams_state.teams.length + 1}`, tanks: new Array(6).fill({ name: "Basic Tank", build: "0/0/0/0/0/0/0/0/0" }) };\n            teams_state.team_idx = teams_state.teams.push(team) - 1;\n            localStorage.teams = JSON.stringify(teams_state);\n            this.teambuilder_teams.style.display = "none";\n            this.teambuilder_teams_buttons.style.display = "none";\n            this.teambuilder_edit.style.display = "";\n            this.teambuilder_teamedit_buttons.style.display = "";\n            refresh_current_teams();\n        });\n        this.team_export.addEventListener("click", () => {\n            /** @ts-ignore */\n            const team = window.teams_state;\n            prompt("Copy the text below to export your team!", JSON.stringify(team));\n        });\n        this.team_import.addEventListener("click", () => {\n            const team = prompt("Paste the team data here:");\n            if (!team)\n                return;\n            try {\n                const parsed = JSON.parse(team);\n                if (!Array.isArray(parsed.teams) && parsed.teams.find((team) => team.tanks.length != 6) != undefined)\n                    throw new Error("Invalid team data!");\n                /** @ts-ignore */\n                window.teams_state = parsed;\n                /** @ts-ignore */\n                localStorage.teams = JSON.stringify(window.teams_state);\n                refresh_current_teams();\n            }\n            catch (er) {\n                alert("Invalid team data!");\n            }\n        });\n        this.teambuilder_modal.addEventListener("wheel", (e) => e.stopPropagation());\n        this.settings_theme.addEventListener("click", () => {\n            this.settings_theme.classList.add("selected");\n            this.settings_config.classList.remove("selected");\n            this.settings_theme_content.style.display = "block";\n            this.settings_config_content.style.display = "none";\n            this.settings_config.style.display = this.client.polyfight_connection.is_host ? "block" : "none";\n        });\n        this.settings_config.addEventListener("click", () => {\n            this.settings_theme.classList.remove("selected");\n            this.settings_config.classList.add("selected");\n            this.settings_theme_content.style.display = "none";\n            this.settings_config_content.style.display = "block";\n            this.settings_config.style.display = this.client.polyfight_connection.is_host ? "block" : "none";\n        });\n        this.scoring.addEventListener("click", () => {\n            if (!this.scoring.classList.contains("selected")) {\n                this.disconnect_server.click();\n            }\n            this.play_button.innerText = `Play as ${auth.currentUser.displayName || "guest"}`;\n            this.scoring.classList.add("selected");\n            this.ranked.classList.remove("selected");\n            this.menu_scoring.style.display = "block";\n            this.menu_1v1.style.display = "none";\n        });\n        this.new_server.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {\n            if (this.new_server.classList.contains("disabled"))\n                return;\n            /**\n             * Multiple Options:\n             * - Region Selection\n             * - Public/Private\n             */\n            /** @ts-ignore */\n            const result = yield window.Swal.fire({\n                title: "Server Information",\n                icon: "info",\n                html: `\n                <div style="display: flex; justify-content: center; align-items: center; flex-direction: column;">\n                    <div style="display: flex; justify-content: space-between; align-items: center; width: 100%">\n                        <span>Region:</span>\n                        <select style="color: black;" id="region-selector">\n                            ${Object.keys(consts_1.SERVER_URLS).map(x => `<option value="${x}">${consts_1.SERVER_NAMES[x]}</option>`).join("\\n")}\n                        </select>\n                    </div>\n                    <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">\n                        <span>Unlisted?</span>\n                        <input type="checkbox" id="privacy-checkbox" />\n                    </div>\n                </div>\n                `,\n                confirmButtonText: "OK",\n                showCloseButton: true,\n                showCancelButton: true,\n                cancelButtonText: "Cancel",\n            });\n            if (!result.isConfirmed)\n                return;\n            const region = document.getElementById("region-selector").options[document.getElementById("region-selector").selectedIndex].value;\n            const isPrivate = document.getElementById("privacy-checkbox").checked;\n            /** @ts-ignore */\n            let url = consts_1.SERVER_URLS[region];\n            url = url.replace("wss", "https").replace("ws", "http") + `/create_server?private=${isPrivate}`;\n            const server_info = yield (yield fetch(url, {\n                credentials: "include",\n            })).text();\n            try {\n                const server = JSON.parse(server_info);\n                /** @ts-ignore */\n                window.arena_state["UNLISTED"] = server.private;\n                this.client.polyfight_connection.servers.push(Object.assign(Object.assign({}, server), { region }));\n                window.location.hash = server.id + `?region=${region}`;\n                this.reload_servers();\n                refresh_current_arena();\n                this.client.entity.first_server_spawn = true;\n                this.copy_link.click();\n            }\n            catch (er) {\n                /** @ts-ignore */\n                window.Swal.fire({ icon: "error", title: "Error", text: server_info });\n                return;\n            }\n            // fetch()\n        }));\n        this.disconnect_server.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {\n            window.location.hash = "";\n            yield this.client.polyfight_connection.find_servers();\n            this.reload_servers();\n            this.client.entity.first_server_spawn = true;\n        }));\n        this.copy_link.addEventListener("click", () => {\n            var _a, _b;\n            const id = window.location.hash.slice(1).split("?")[0] || ((_a = this.client.polyfight_connection.polyfight_connection) === null || _a === void 0 ? void 0 : _a.url.split("/")[0].split("?")[0]);\n            if (!id)\n                return;\n            /** @ts-ignore */\n            window.Swal.fire({\n                title: "Copy the link below to share it with your friends!",\n                icon: "info",\n                confirmButtonText: "Copy",\n                showCancelButton: false,\n                showCloseButton: true,\n                input: "text",\n                inputValue: window.location.origin + `/#${id}?region=${(_b = this.client.polyfight_connection.current_server) === null || _b === void 0 ? void 0 : _b.region.toLowerCase()}`,\n                inputAttributes: {\n                    readonly: true,\n                    style: "text-align: center;"\n                }\n            })\n                .then((result) => {\n                var _a;\n                if (result.isConfirmed) {\n                    navigator.clipboard.writeText(window.location.origin + `/#${id}?region=${(_a = this.client.polyfight_connection.current_server) === null || _a === void 0 ? void 0 : _a.region.toLowerCase()}`);\n                    /** @ts-ignore */\n                    window.Swal.fire({ icon: "success", title: "Link copied to clipboard!" });\n                }\n            });\n        });\n        function rgbToHex(r, g, b) {\n            return "#" + r.toString(16).padStart(2, "0") + g.toString(16).padStart(2, "0") + b.toString(16).padStart(2, "0");\n        }\n        function hexToRgb(hex) {\n            var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n            return result ? `rgb(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)})` : null;\n        }\n        function generate_default_theme(name) {\n            const theme = { name };\n            for (const option of consts_1.THEME_CONFIG_OPTIONS) {\n                let value;\n                if (option.default.constructor === Array) {\n                    value = option.default.map((x) => x instanceof color_1.default ? x.css : x);\n                }\n                ;\n                theme[option.name] = value || (option.default instanceof color_1.default ? option.default.css : option.default);\n            }\n            return theme;\n        }\n        ;\n        function parse_diep_style_theme(theme) {\n            /** @ts-ignore */\n            const parsed = generate_default_theme(theme[0].theme.name);\n            for (const colour of theme) {\n                /** @ts-ignore */\n                if (colour.theme)\n                    continue;\n                /**\n                 * net_replace_color 0 0x555555\tSmasher and Dominator Bases\nnet_replace_color 1 0x999999\tBarrels, Spawners, Launchers and Auto Turrets\nnet_replace_color 2 0x00B2E1\tBody (You)\nnet_replace_color 3 0x00B2E1\tBlue Team\nnet_replace_color 4 0xF14E54\tRed Team\nnet_replace_color 5 0xBE7FF5\tPurple Team\nnet_replace_color 5 0xC390D4\tPurple Team (Makes purple team use its original first color)\nnet_replace_color 5 0xE77FF5\tPurple Team (Makes purple team use its original second color)\nnet_replace_color 6 0x00E16E\tGreen Team\nnet_replace_color 6 0xD68165\tGreen Team (Making Green Team Brown, like it was formerly)\nnet_replace_color 7 0x8AFF69\tShiny Polygons (Green Square, Green Triangle, Green Pentagon)\nnet_replace_color 8 0xFFE869\tSquare\nnet_replace_color 9 0xFC7677\tTriangle\nnet_replace_color 10 0x768DFC\tPentagon\nnet_replace_color 11 0xF177DD\tCrashers\nnet_replace_color 12 0xFFE869\tArena Closers/Neutral Dominators/Defender Ammo\nnet_replace_color 12 0xA0A0A0\tNeutral Team (Makes neutral team use its original color)\nnet_replace_color 13 0x43FF91\tScoreboard\nnet_replace_color 14 0xBBBBBB\tMaze Walls\nnet_replace_color 15 0xF14E54\tOthers (FFA)\nnet_replace_color 16 0xFCC376\tSummoned Squares (Necromancer and Summoner)\nnet_replace_color 17 0xC0C0C0\tFallen Bosses, Sleeping Arena Closers\n                 */\n                switch (colour.id) {\n                    // case 0: continue; // not present\n                    case 1:\n                        parsed["TURRET_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case 2:\n                        parsed["PLAYER_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    // case 3: parsed["BLUE_FILL"] = colour.value; break;\n                    // case 4: parsed["RED_FILL"] = colour.value; break;\n                    // case 5: parsed["PURPLE_FILL"] = colour.value; break;\n                    // case 6: parsed["GREEN_FILL"] = colour.value; break;\n                    case 7:\n                        parsed["SHINY_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case 8:\n                        parsed["SQUARE_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case 9:\n                        parsed["TRIANGLE_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case 10:\n                        parsed["PENTAGON_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case 11:\n                        parsed["CRASHER_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    // case 12: parsed["DOMINATOR_FILL"] = colour.value; break;\n                    // case 13: parsed["SCORE_BAR_FILL"] = colour.value; break;\n                    // case 14: parsed["WALL_FILL"] = colour.value; break;\n                    case 15:\n                        parsed["ENEMY_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    // case 16: parsed["SUMMONER_FILL"] = colour.value; break;\n                    // case 17: parsed["BOSS_FILL"] = colour.value; break;\n                }\n                switch (colour.cmd) {\n                    case "ren_xp_bar_fill_color":\n                        parsed["XP_BAR_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case "ren_score_bar_fill_color":\n                        parsed["SCORE_BAR_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case "ren_bar_background_color":\n                        {\n                            parsed["XP_BAR_BACKGROUND"] = parsed["SCORE_BAR_BACKGROUND"] = hexToRgb(`#${colour.value}`);\n                            break;\n                        }\n                    case "stroke_soft_color_intensity":\n                        parsed["STROKE_INTENSITY"] = +colour.value;\n                        break;\n                    case "ren_grid_color":\n                        parsed["GRID"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case "ren_health_background_color":\n                        parsed["HEALTH_BAR_BACKGROUND"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case "ren_health_fill_color":\n                        {\n                            parsed["LOW_HEALTH_BAR"] = parsed["MEDIUM_HEALTH_BAR"] = parsed["HIGH_HEALTH_BAR"] = hexToRgb(`#${colour.value}`);\n                            break;\n                        }\n                    case "ren_background_color":\n                        parsed["INBOUNDS_FILL"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case "ren_border_color":\n                        {\n                            parsed["OUTBOUNDS"] = hexToRgb(`#${colour.value}`);\n                            break;\n                        }\n                    case "border_color_alpha":\n                        parsed["OUTBOUNDS_OPACITY"] = +colour.value;\n                        break;\n                    case "ren_minimap_background_color":\n                        parsed["MINIMAP_BACKGROUND"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case "ren_minimap_border_color":\n                        parsed["MINIMAP_BORDER"] = hexToRgb(`#${colour.value}`);\n                        break;\n                    case "grid_base_alpha":\n                        parsed["GRID_ALPHA"] = +colour.value;\n                        break;\n                    case "ui_replace_colors":\n                        {\n                            const values = colour.value.map((x) => hexToRgb(`#${x}`));\n                            parsed["UPGRADES"] = [...values, hexToRgb("#2C2EDF")];\n                        }\n                }\n            }\n            parsed["INBOUNDS_OUTLINE"] = parsed["OUTBOUNDS"];\n            return parsed;\n        }\n        if (!window.localStorage.getItem("themes")) {\n            // console.log(theme.theme);\n            window.localStorage.setItem("themes", JSON.stringify(default_theme_1.default.theme));\n            window.localStorage.setItem("theme_index", "0");\n        }\n        const themes = JSON.parse(window.localStorage.getItem("themes"));\n        for (let i = 0; i < themes.length; ++i) {\n            const theme = themes[i];\n            const theme_keys = Object.keys(theme);\n            const unknown_keys = consts_1.THEME_CONFIG_OPTIONS.map(x => x.name).filter(x => !theme_keys.includes(x));\n            for (const key of unknown_keys) {\n                let value = consts_1.THEME_CONFIG_OPTIONS.find(x => x.name == key).default;\n                if (value instanceof color_1.default)\n                    theme[key] = value.css;\n                else\n                    theme[key] = value;\n            }\n            const ordered = consts_1.THEME_CONFIG_OPTIONS.map(x => x.name).reduce((obj, key) => {\n                obj[key] = theme[key];\n                return obj;\n            }, {});\n            ordered.name = theme.name;\n            themes[i] = ordered;\n            const option = document.createElement("option");\n            option.style.color = "black";\n            option.value = theme.name;\n            option.text = theme.name;\n            this.themes_dropdown.add(option);\n        }\n        localStorage.setItem("themes", JSON.stringify(themes));\n        this.themes_dropdown.selectedIndex = parseInt(window.localStorage.getItem("theme_index") || "0");\n        /** @ts-ignore */\n        let old_name = this.theme_name.value = this.themes_dropdown.children[this.themes_dropdown.selectedIndex].value;\n        /** @ts-ignore */\n        window.theme_state = themes[this.themes_dropdown.selectedIndex];\n        const refresh_current_theme = () => {\n            this.theme_colours.innerHTML = "";\n            /** @ts-ignore */\n            window.theme_state = JSON.parse(window.localStorage.getItem("themes"))[this.themes_dropdown.selectedIndex];\n            /** @ts-ignore */\n            for (const [key, value] of Object.entries(window.theme_state)) {\n                if (key == "name" || key.endsWith("_STROKE"))\n                    continue;\n                const option = consts_1.THEME_CONFIG_OPTIONS.find(x => x.name == key);\n                const entry = document.createElement("div");\n                entry.id = "color-entry";\n                const span = document.createElement("span");\n                span.classList.add("entry-name");\n                span.innerText = (option === null || option === void 0 ? void 0 : option.prettified_name) || key;\n                entry.appendChild(span);\n                const input = document.createElement("input");\n                if (option.default.constructor === Array) {\n                    for (let i = 0; i < value.length; ++i) {\n                        const element = value[i];\n                        if (element.startsWith("rgb")) {\n                            const cp_wrapper = document.createElement("div");\n                            cp_wrapper.classList.add("cp-wrapper");\n                            const input = document.createElement("input");\n                            input.type = "color";\n                            input.classList.add("color-input");\n                            /** @ts-ignore */\n                            const [r, g, b] = element.match(/\\d+/g).map(Number);\n                            input.value = rgbToHex(r, g, b);\n                            input.addEventListener("focusout", e => {\n                                /** @ts-ignore */\n                                window.theme_state[key][i] = hexToRgb(input.value);\n                                const themes = JSON.parse(window.localStorage.getItem("themes"));\n                                /** @ts-ignore */\n                                themes[this.themes_dropdown.selectedIndex] = window.theme_state;\n                                window.localStorage.setItem("themes", JSON.stringify(themes));\n                                refresh_current_theme();\n                            });\n                            cp_wrapper.appendChild(input);\n                            entry.appendChild(cp_wrapper);\n                        }\n                        else if (option.type == enums_1.ConfigOptionTypes.ConstantText) {\n                            const span = document.createElement("span");\n                            span.innerText = value;\n                            entry.appendChild(span);\n                        }\n                        else if (option.type == enums_1.ConfigOptionTypes.Boolean) {\n                            const input = document.createElement("input");\n                            input.type = "checkbox";\n                            /** @ts-ignore */\n                            input.checked = element;\n                            input.addEventListener("change", () => {\n                                /** @ts-ignore */\n                                window.theme_state[key][i] = input.checked;\n                                const themes = JSON.parse(window.localStorage.getItem("themes"));\n                                /** @ts-ignore */\n                                themes[this.themes_dropdown.selectedIndex] = window.theme_state;\n                                window.localStorage.setItem("themes", JSON.stringify(themes));\n                                refresh_current_theme();\n                            });\n                            entry.appendChild(input);\n                        }\n                        else if (option.type == enums_1.ConfigOptionTypes.Number) {\n                            const input = document.createElement("input");\n                            input.style.width = "150px";\n                            input.type = "range";\n                            /** @ts-ignore */\n                            input.min = option.min;\n                            /** @ts-ignore */\n                            input.max = option.max;\n                            /** @ts-ignore */\n                            input.step = option.step;\n                            /** @ts-ignore */\n                            input.value = element;\n                            span.innerText += ` [${element}]`;\n                            input.addEventListener("change", () => {\n                                /** @ts-ignore */\n                                window.theme_state[key][i] = parseFloat(input.value);\n                                span.innerText = key + ` [${input.value}]`;\n                                const themes = JSON.parse(window.localStorage.getItem("themes"));\n                                /** @ts-ignore */\n                                themes[this.themes_dropdown.selectedIndex] = window.theme_state;\n                                window.localStorage.setItem("themes", JSON.stringify(themes));\n                                refresh_current_theme();\n                            });\n                            entry.appendChild(input);\n                        }\n                    }\n                }\n                else if (option.type == enums_1.ConfigOptionTypes.ConstantText) {\n                    const span = document.createElement("span");\n                    span.innerText = value;\n                    entry.appendChild(span);\n                }\n                else if (option.default instanceof color_1.default) {\n                    const cp_wrapper = document.createElement("div");\n                    cp_wrapper.classList.add("cp-wrapper");\n                    input.type = "color";\n                    input.classList.add("color-input");\n                    /** @ts-ignore */\n                    const [r, g, b] = value.match(/\\d+/g).map(Number);\n                    input.value = rgbToHex(r, g, b);\n                    input.addEventListener("focusout", e => {\n                        /** @ts-ignore */\n                        window.theme_state[key] = hexToRgb(input.value);\n                        const themes = JSON.parse(window.localStorage.getItem("themes"));\n                        /** @ts-ignore */\n                        themes[this.themes_dropdown.selectedIndex] = window.theme_state;\n                        window.localStorage.setItem("themes", JSON.stringify(themes));\n                        refresh_current_theme();\n                    });\n                    cp_wrapper.appendChild(input);\n                    entry.appendChild(cp_wrapper);\n                }\n                else if (option.type == enums_1.ConfigOptionTypes.Boolean || [true, false].includes(option.default)) {\n                    const input = document.createElement("input");\n                    input.type = "checkbox";\n                    /** @ts-ignore */\n                    input.checked = value;\n                    input.addEventListener("change", () => {\n                        /** @ts-ignore */\n                        window.theme_state[key] = input.checked;\n                        const themes = JSON.parse(window.localStorage.getItem("themes"));\n                        /** @ts-ignore */\n                        themes[this.themes_dropdown.selectedIndex] = window.theme_state;\n                        window.localStorage.setItem("themes", JSON.stringify(themes));\n                        refresh_current_theme();\n                    });\n                    entry.appendChild(input);\n                }\n                else if (option.type == enums_1.ConfigOptionTypes.Number) {\n                    input.style.width = "150px";\n                    input.type = "range";\n                    /** @ts-ignore */\n                    input.min = option.min;\n                    /** @ts-ignore */\n                    input.max = option.max;\n                    /** @ts-ignore */\n                    input.step = option.step;\n                    /** @ts-ignore */\n                    input.value = value;\n                    span.innerText += ` [${value}]`;\n                    input.addEventListener("change", () => {\n                        /** @ts-ignore */\n                        window.theme_state[key] = parseFloat(input.value);\n                        span.innerText = key + ` [${input.value}]`;\n                        const themes = JSON.parse(window.localStorage.getItem("themes"));\n                        /** @ts-ignore */\n                        themes[this.themes_dropdown.selectedIndex] = window.theme_state;\n                        window.localStorage.setItem("themes", JSON.stringify(themes));\n                        refresh_current_theme();\n                    });\n                    entry.appendChild(input);\n                }\n                this.theme_colours.appendChild(entry);\n            }\n            /** @ts-ignore */\n            this.theme_name.value = window.theme_state.name;\n            /** @ts-ignore */\n            this.themes_dropdown.children[this.themes_dropdown.selectedIndex].value = window.theme_state.name;\n            /** @ts-ignore */\n            document.body.style.backgroundColor = window.theme_state.INBOUNDS_FILL;\n            (0, consts_1.refresh_config)();\n            this.client.polyfight_canvas.generate_spritesheet();\n        };\n        /** @ts-ignore */\n        window.arena_state = consts_1.ARENA_CONFIG.reduce((obj, x) => { obj[x.name] = x.default; return obj; }, {});\n        const refresh_current_arena = () => {\n            this.client.polyfight_connection.packet_handler.write_arena_update();\n            this.arena_config.innerHTML = "";\n            for (const option of consts_1.ARENA_CONFIG) {\n                if (option.type == enums_1.ConfigOptionTypes.Header || option.type == enums_1.ConfigOptionTypes.Subheader) {\n                    const entry = document.createElement("span");\n                    entry.id = option.type == enums_1.ConfigOptionTypes.Header ? "config-header" : "config-subheader";\n                    entry.innerText = option.prettified_name || option.default;\n                    this.arena_config.appendChild(entry);\n                }\n                else {\n                    const entry = document.createElement("div");\n                    entry.id = "config-entry";\n                    const span = document.createElement("span");\n                    span.classList.add("entry-name");\n                    span.innerText = option.prettified_name;\n                    entry.appendChild(span);\n                    const input = document.createElement("input");\n                    input.style.width = "150px";\n                    if (option.type == enums_1.ConfigOptionTypes.ConstantText) {\n                        const span = document.createElement("span");\n                        span.innerText = option.default;\n                        entry.appendChild(span);\n                    }\n                    else if (option.type == enums_1.ConfigOptionTypes.Colour) {\n                        const cp_wrapper = document.createElement("div");\n                        cp_wrapper.classList.add("cp-wrapper");\n                        input.type = "color";\n                        input.classList.add("color-input");\n                        /** @ts-ignore */\n                        const [r, g, b] = option.default.match(/\\d+/g).map(Number);\n                        input.value = rgbToHex(r, g, b);\n                        input.addEventListener("focusout", e => {\n                            /** @ts-ignore */\n                            window.arena_state[option.name] = hexToRgb(input.value);\n                            refresh_current_arena();\n                        });\n                        cp_wrapper.appendChild(input);\n                        entry.appendChild(cp_wrapper);\n                    }\n                    else if (option.type == enums_1.ConfigOptionTypes.Boolean) {\n                        input.type = "checkbox";\n                        /** @ts-ignore */\n                        input.checked = window.arena_state[option.name];\n                        input.addEventListener("change", () => {\n                            /** @ts-ignore */\n                            window.arena_state[option.name] = input.checked;\n                            refresh_current_arena();\n                        });\n                        entry.appendChild(input);\n                    }\n                    else if (option.type == enums_1.ConfigOptionTypes.Number) {\n                        input.type = "range";\n                        /** @ts-ignore */\n                        input.min = option.min;\n                        /** @ts-ignore */\n                        input.max = option.max;\n                        /** @ts-ignore */\n                        input.step = option.step;\n                        /** @ts-ignore */\n                        input.value = window.arena_state[option.name];\n                        /** @ts-ignore */\n                        span.innerText += ` [${window.arena_state[option.name] = input.value}]`;\n                        input.addEventListener("change", () => {\n                            /** @ts-ignore */\n                            window.arena_state[option.name] = parseFloat(input.value);\n                            span.innerText = option.name + ` [${input.value}]`;\n                            refresh_current_arena();\n                        });\n                        entry.appendChild(input);\n                    }\n                    this.arena_config.appendChild(entry);\n                }\n            }\n        };\n        /** @ts-ignore */\n        window.teams_state = {};\n        /** @ts-ignore */\n        const refresh_current_teams = window.refresh_current_teams = () => {\n            if (!localStorage.teams) {\n                const teams = { name: "Default Team [click to edit]", tanks: new Array(6).fill({ name: "Basic Tank", build: "0/0/0/0/0/0/0/0/0" }) };\n                localStorage.teams = JSON.stringify({ team_idx: 0, teams: [teams] });\n            }\n            /** @ts-ignore */\n            const teams_state = window.teams_state = JSON.parse(localStorage.teams || "{}");\n            /** @ts-ignore */\n            const spritesheet = window.spritesheet;\n            const selected_team = teams_state.teams[teams_state.team_idx];\n            this.set.innerHTML = `\n            <b>${selected_team.name}</b>\n            <div id="tanks">\n                ${selected_team.tanks.map((t) => `<img src="${spritesheet}#${t.name}" height="60" width="60" />`).join("\\n")}\n            </div>\n            `.trim();\n            const teambox_html = [];\n            for (let i = 0; i < teams_state.teams.length; ++i) {\n                const team = teams_state.teams[i];\n                teambox_html.push(`\n                    <div class="teambox${i == teams_state.team_idx ? (" selected") : ""}" id="teambox-${i}"\n                        onmouseover="document.getElementById(\'teambox-icons-${i}\').style.display = \'flex\';" \n                        onmouseout="document.getElementById(\'teambox-icons-${i}\').style.display = \'none\';"\n                    >\n                        <b>${team.name}</b>\n                        <div class="teambox-icons" id="teambox-icons-${i}">\n                            <button class="teambox-icon" id="teambox-select">\n                                <i class="fa-solid fa-check" style="text-align: center;"></i>\n                            </button>\n                            <button class="teambox-icon" id="teambox-delete">\n                                <i class="fa-solid fa-trash" style="text-align: center;"></i>\n                            </button>\n                            <button class="teambox-icon" id="teambox-edit">\n                                <i class="fa-solid fa-pencil" style="text-align: center;"></i>\n                            </button>\n                        </div>\n                        <div id="tanks">\n                            ${team.tanks.map((t) => `<img src="${spritesheet}#${t.name}" height="60" width="60" />`).join("\\n")}\n                        </div>\n                    </div>\n                `.trim());\n            }\n            this.teambuilder_teams.innerHTML = teambox_html.join("\\n");\n            for (let i = 0; i < this.teambuilder_teams.children.length; ++i) {\n                const team = this.teambuilder_teams.children[i];\n                team.addEventListener("click", () => {\n                    teams_state.team_idx = Array.from(this.teambuilder_teams.children).indexOf(team);\n                    localStorage.teams = JSON.stringify(teams_state);\n                    refresh_current_teams();\n                });\n                const icons = team.children[1];\n                const [select, del, edit] = icons.children;\n                select.addEventListener("click", (event) => {\n                    event.stopPropagation();\n                    teams_state.team_idx = Array.from(this.teambuilder_teams.children).indexOf(team);\n                    localStorage.teams = JSON.stringify(teams_state);\n                    refresh_current_teams();\n                });\n                del.addEventListener("click", (event) => {\n                    event.stopPropagation();\n                    if (teams_state.teams.length == 1)\n                        return alert("You cannot delete your last team.");\n                    const result = confirm("Are you sure you want to delete this team?");\n                    if (!result)\n                        return;\n                    teams_state.teams.splice(Array.from(this.teambuilder_teams.children).indexOf(team), 1);\n                    if (teams_state.team_idx >= teams_state.teams.length)\n                        teams_state.team_idx = teams_state.teams.length - 1;\n                    localStorage.teams = JSON.stringify(teams_state);\n                    refresh_current_teams();\n                });\n                edit.addEventListener("click", (event) => {\n                    event.stopPropagation();\n                    teams_state.team_idx = i;\n                    localStorage.teams = JSON.stringify(teams_state);\n                    this.teambuilder_teams.style.display = "none";\n                    this.teambuilder_teams_buttons.style.display = "none";\n                    this.teambuilder_edit.style.display = "";\n                    this.teambuilder_teamedit_buttons.style.display = "";\n                    refresh_current_teams();\n                });\n                (() => {\n                    const team = teams_state.teams[teams_state.team_idx];\n                    const datalist = `\n                    <datalist id="tank-name-input-list">\n                        ${tankdefs_1.TANK_DEFS.filter((t) => t.category != enums_1.TankCategories.Illegal).map((x) => `<option value="${x.name}" />`).join("\\n")}\n                    </datalist>\n                    `.trim();\n                    const build_entries_html = [];\n                    for (let j = 0; j < team.tanks.length; ++j) {\n                        const tank = team.tanks[j];\n                        const build = tank.build.split("/").map((x) => +x);\n                        const tankdef = tankdefs_1.TANK_DEFS.find((t) => t.name == tank.name);\n                        const used_stats = build.reduce((a, b) => a + b);\n                        build_entries_html.push(`\n                            <div class="build-entry">\n                                <span class="stroke">x${33 - used_stats}</span>\n                                ${tankdef === null || tankdef === void 0 ? void 0 : tankdef.max_stats.map((stat, k) => (stat == 0 ? "" :\n                            `<div class="stat-entry">\n                                        <div class="stat-buttons">\n                                            <button class="remove-stat" onclick="(() => {\n                                                const i = ${teams_state.team_idx};\n                                                const j = ${j};\n                                                const k = ${k};\n                                                \n                                                const build = window.teams_state.teams[i].tanks[j].build.split(\'/\');\n                                                const newDigit = Math.min( Math.max(0, (+build[k] - 1)), ${stat} ).toString();\n                                                build[k] = newDigit;\n\n                                                window.teams_state.teams[i].tanks[j].build = build.join(\'/\');\n                                                localStorage.teams = JSON.stringify(window.teams_state);\n    \n                                                window.refresh_current_teams();\n                                            })();">-</button>\n                                            \n                                            ${(33 - used_stats) > 0 ? `<button class="add-stat" onclick="(() => {\n                                                const i = ${teams_state.team_idx};\n                                                const j = ${j};\n                                                const k = ${k};\n                \n                                                const build = window.teams_state.teams[i].tanks[j].build.split(\'/\');\n\n                                                const newDigit = Math.min( Math.max(0, (+build[k] + 1)), ${stat} ).toString();\n                                                build[k] = newDigit;\n                                                \n                                                window.teams_state.teams[i].tanks[j].build = build.join(\'/\');\n                                                localStorage.teams = JSON.stringify(window.teams_state);\n    \n                                                window.refresh_current_teams();\n                                            })();">+</button>` : ""}\n                                        </div>\n                                        <div class="progress-bar-wrapper">\n                                            <div style="background: ${consts_1.THEME_CONFIG.UPGRADES[k].css}; height: 100%; width: ${build[k] / stat * 100}%; transition: all ease 0.3s;"></div>\n                                            <span class="progress-bar-text stroke">${enums_1.UpgradeStats[k].replace(/([A-Z])/g, \' $1\').trim() + ` [${build[k]}]`}</span>\n                                        </div>\n                                    </div>`)).join("\\n")}\n                            </div>\n                        `.trim());\n                    }\n                    let team_editor = `\n                    <input id="team-name-input" type="text" placeholder="Enter team name..." maxlength="12" value="${team.name}" onfocusout="(() => {\n                        const input = document.getElementById(\'team-name-input\');\n                        window.teams_state.teams[${teams_state.team_idx}].name = input.value;\n                        localStorage.teams = JSON.stringify(window.teams_state);\n                        window.refresh_current_teams();\n                    })()">\n                    \n                    <div class="team-tanks">\n                        ${team.tanks.map((tank, j) => (`<div class="team-tank-entry">\n                                <div style="display: flex; flex-direction: column; justify-content: center; align-items: center;">\n                                    <span style="color: ${consts_1.THEME_CONFIG.UPGRADES[tankdefs_1.TANK_DEFS.find((t) => t.name == tank.name).category].css}"> \n                                        ${enums_1.TankCategories[tankdefs_1.TANK_DEFS.find((t) => t.name == tank.name).category]} Category\n                                    </span>\n                                    ${ /** @ts-ignore */""}\n                                    <img src="${window.spritesheet || "assets/images/spritesheet.svg"}#${tank.name}" height="200" width="200">\n                                    <input id="tni-${j}" class="tank-name-input" list="tank-name-input-list" type="text" placeholder="Enter tank name..." maxlength="12" value="${tank.name}" oninput="((e) => {\n                                        const input = document.getElementById(\'tni-${j}\');\n                                        const tanks = [${tankdefs_1.TANK_DEFS.filter((t) => t.category != enums_1.TankCategories.Illegal).map((x) => x.name).map(x => `\\\'${x}\\\'`).join(", ")}];\n                                        const tank = tanks.find(x => x.trim().toLowerCase() == input.value.trim().toLowerCase());\n                                        if (!tank) return;\n                                    })()" onfocusout="(() => {\n                                        const input = document.getElementById(\'tni-${j}\');\n                                        const tanks = [${tankdefs_1.TANK_DEFS.filter((t) => t.category != enums_1.TankCategories.Illegal).map((x) => x.name).map(x => `\\\'${x}\\\'`).join(", ")}];\n                                        const tank = tanks.find(x => x.trim().toLowerCase() == input.value.trim().toLowerCase());\n                                        if (!tank)\n                                        {\n                                            input.value = window.teams_state.teams[${teams_state.team_idx}].tanks[${j}].name;\n                                            return;\n                                        }\n\n                                        window.teams_state.teams[${teams_state.team_idx}].tanks[${j}].name = tank;\n                                        window.teams_state.teams[${teams_state.team_idx}].tanks[${j}].build = \'0/0/0/0/0/0/0/0/0\';\n                                        localStorage.teams = JSON.stringify(window.teams_state);\n                                        window.refresh_current_teams();\n                                    })()">\n                                    ${datalist}\n                                </div>\n    \n                                ${build_entries_html[j]}\n                            </div>`)).join("\\n")}\n                    </div>\n                    `.trim();\n                    this.teambuilder_edit.innerHTML = team_editor;\n                })();\n            }\n        };\n        refresh_current_theme();\n        refresh_current_arena();\n        refresh_current_teams();\n        this.new_theme.addEventListener("click", () => {\n            const themes = JSON.parse(window.localStorage.getItem("themes"));\n            const theme = generate_default_theme("Theme " + (themes.length + 1));\n            themes.push(theme);\n            const option = document.createElement("option");\n            option.style.color = "black";\n            option.value = option.text = theme.name;\n            this.themes_dropdown.add(option);\n            window.localStorage.setItem("themes", JSON.stringify(themes));\n            this.themes_dropdown.selectedIndex = this.themes_dropdown.length - 1;\n            window.localStorage.setItem("theme_index", this.themes_dropdown.selectedIndex.toString());\n            this.theme_name.value = theme.name;\n            refresh_current_theme();\n        });\n        this.theme_name.addEventListener("keyup", () => {\n            if (this.theme_name.value.length == 0)\n                this.theme_name.value = old_name;\n            const themes = JSON.parse(window.localStorage.getItem("themes"));\n            const theme = themes[this.themes_dropdown.selectedIndex];\n            const option = this.themes_dropdown.children[this.themes_dropdown.selectedIndex];\n            option.value = option.text = theme.name = this.theme_name.value;\n            window.localStorage.setItem("themes", JSON.stringify(themes));\n            old_name = this.theme_name.value;\n        });\n        this.themes_dropdown.addEventListener("change", (event) => {\n            const themes = JSON.parse(window.localStorage.getItem("themes"));\n            const theme = themes[this.themes_dropdown.selectedIndex];\n            this.theme_name.value = theme.name;\n            window.localStorage.setItem("theme_index", this.themes_dropdown.selectedIndex.toString());\n            refresh_current_theme();\n            // for (const option of CONFIG_OPTIONS)\n            // {\n            //     if (option.name == "name") continue;\n            //     const element = document.getElementById(option.name)! as HTMLInputElement;\n            //     if (element.type == "color") element.value = theme[option.name];\n            //     else element.value = theme[option.name];\n            // }\n        });\n        this.export_theme.addEventListener("click", () => {\n            /** @ts-ignore */\n            window.Swal.fire({\n                icon: "info",\n                title: "Export Theme",\n                text: "Copy this theme to your clipboard:",\n                input: "text",\n                /** @ts-ignore */\n                inputValue: JSON.stringify(window.theme_state),\n                showCancelButton: false,\n                confirmButtonText: "Copy",\n                inputAttributes: {\n                    readonly: true,\n                    style: "text-align: center;"\n                }\n            })\n                .then((result) => {\n                if (result.isConfirmed) {\n                    /** @ts-ignore */\n                    navigator.clipboard.writeText(JSON.stringify(window.theme_state));\n                    /** @ts-ignore */\n                    window.Swal.fire("Copied!", "The theme has been copied to your clipboard.", "success");\n                }\n            });\n        });\n        this.import_theme.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            /** @ts-ignore */\n            const { value: theme } = yield window.Swal.fire({\n                icon: "info",\n                title: "Import Theme",\n                text: "Paste the theme you want to import here:",\n                input: "text",\n                showCancelButton: true,\n                confirmButtonText: "Import",\n                inputValidator(value) {\n                    try {\n                        if (JSON.parse(value) == null)\n                            return "Invalid JSON.";\n                    }\n                    catch (error) {\n                        return "Invalid JSON.";\n                    }\n                }\n            });\n            if (theme == null)\n                return;\n            try {\n                const parsed = JSON.parse(theme);\n                if ((_a = parsed[0]) === null || _a === void 0 ? void 0 : _a.theme) {\n                    const themes = JSON.parse(window.localStorage.getItem("themes"));\n                    parsed.name = this.theme_name.value;\n                    themes[this.themes_dropdown.selectedIndex] = parse_diep_style_theme(parsed);\n                    window.localStorage.setItem("themes", JSON.stringify(themes));\n                }\n                else {\n                    const themes = JSON.parse(window.localStorage.getItem("themes"));\n                    themes[this.themes_dropdown.selectedIndex] = parsed;\n                    window.localStorage.setItem("themes", JSON.stringify(themes));\n                }\n                this.theme_name.value = parsed.name;\n                refresh_current_theme();\n            }\n            catch (error) {\n                alert("Invalid theme.");\n            }\n        }));\n        this.delete_theme.addEventListener("click", () => {\n            if (this.themes_dropdown.length == 1)\n                return alert("You cannot delete your last theme.");\n            let result = confirm("Are you sure you want to delete this theme? This action cannot be undone.");\n            if (!result)\n                return;\n            const themes = JSON.parse(window.localStorage.getItem("themes"));\n            themes.splice(this.themes_dropdown.selectedIndex, 1);\n            window.localStorage.setItem("themes", JSON.stringify(themes));\n            this.themes_dropdown.remove(this.themes_dropdown.selectedIndex);\n            this.themes_dropdown.selectedIndex = 0;\n            window.localStorage.setItem("theme_index", "0");\n            old_name = this.theme_name.value = themes[0].name;\n            refresh_current_theme();\n        });\n        this.clan_textbox.addEventListener("keydown", (event) => {\n            if (event.key == "Enter" && this.clan_textbox.value.length > 0) {\n                this.client.polyfight_connection.packet_handler.write_clan(0, this.clan_textbox.value);\n                this.clan_textbox.value = "";\n            }\n            ;\n        });\n        this.clan_create.addEventListener("click", () => {\n            if (this.clan_create.innerText.includes("Create") && this.clan_textbox.value.length > 0) {\n                this.client.polyfight_connection.packet_handler.write_clan(0, this.clan_textbox.value);\n                this.clan_textbox.value = "";\n            }\n            else if (this.clan_create.innerText.includes("Leave")) {\n                this.client.polyfight_connection.packet_handler.write_clan(2);\n            }\n            ;\n        });\n        this.google_signin.addEventListener("click", () => {\n            if (this.google_signin.innerText == "Sign out") {\n                signOut(auth)\n                    .then(() => (this.google_signin.innerText = "Sign in with Google"))\n                    .catch((error) => alert("Uh oh! Something went wrong. " + error.message + ` [${error.code}]`));\n            }\n            else {\n                signInWithPopup(auth, provider)\n                    .catch((error) => alert("Uh oh! Something went wrong. " + error.message + ` [${error.code}]`));\n            }\n        });\n        let initial = false;\n        onAuthStateChanged(auth, (user) => __awaiter(this, void 0, void 0, function* () {\n            if (!initial) {\n                this.reload_servers();\n                initial = true;\n            }\n            if (user) {\n                document.cookie = `token=${yield user.getIdToken()}; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/;`;\n                this.new_server.classList.remove("disabled");\n                // delete this.new_server.dataset.tooltip;\n                this.new_server.onclick = null;\n                this.ranked.onclick = this.ranked_onclick.bind(this, false);\n                this.clan_button.classList.remove("disabled");\n                this.google_signin.innerText = "Sign out";\n                this.play_button.innerText = "Play as " + user.displayName;\n                fetch(`${consts_1.SERVER_URLS[this.client.polyfight_connection.preferred_region].replace("wss", "https").replace("ws", "http")}/is_registered`, {\n                    method: "GET",\n                    credentials: "include"\n                })\n                    .then((r) => __awaiter(this, void 0, void 0, function* () {\n                    if (r.status == 400) {\n                        const message = yield r.text();\n                        /** @ts-ignore */\n                        yield window.Swal.fire({\n                            icon: "error",\n                            title: "Error",\n                            text: message\n                        });\n                    }\n                    else if (r.status == 404) {\n                        yield this.choose_name();\n                    }\n                }));\n            }\n            else {\n                document.cookie = "";\n                this.new_server.classList.add("disabled");\n                // this.new_server.dataset.tooltip = "Log into Google to create a new server.";\n                this.new_server.onclick = this.new_server_on_click.bind(this);\n                this.ranked.onclick = this.ranked_onclick.bind(this, true);\n                this.clan_button.classList.remove("disabled");\n                // this.clan_button.classList.add("disabled");\n                this.google_signin.innerText = "Sign in with Google";\n                this.play_button.innerText = "Play as guest";\n            }\n            ;\n        }));\n        this.client.polyfight_canvas.minimap_canvas.addEventListener("click", () => {\n            this.client.polyfight_connection.packet_handler.write_clan(5);\n        });\n        if (!window.localStorage.getItem("has_visited")) {\n            window.localStorage.setItem("has_visited", "1");\n            this.info_button_on_click();\n        }\n        if (!localStorage.has_seen_trailer) {\n            localStorage.has_seen_trailer = true;\n            this.discord_button_on_click();\n        }\n        window.addEventListener("beforeunload", (e) => {\n            const confirmationMessage = "Are you sure you want to leave? You will lose your progress.";\n            (e || window.event).returnValue = confirmationMessage;\n            return confirmationMessage;\n        });\n        window.addEventListener("contextmenu", (event) => event.preventDefault());\n        window.addEventListener("mousemove", (event) => {\n            let is_zoom = this.client.entity.identity_id == enums_1.EntityIdentityIds.Predator && ((this.client.polyfight_canvas.inputs & enums_1.Inputs.Repel) == enums_1.Inputs.Repel);\n            if (this.client.polyfight_canvas.auto_spin == enums_1.SpinType.None && this.client.entity.identity.rotators === undefined && !this.client.polyfight_canvas.lock_mouse) {\n                this.client.polyfight_canvas.mouse.x = event.clientX * window.devicePixelRatio - (this.client.polyfight_canvas.canvas.width / 2);\n                this.client.polyfight_canvas.mouse.y = event.clientY * window.devicePixelRatio - (this.client.polyfight_canvas.canvas.height / 2);\n                const canvas_transform = this.client.polyfight_canvas.canvas_transform;\n                const absolute_position = new vector_1.default(canvas_transform.a * this.client.entity.position.x + canvas_transform.e, canvas_transform.d * this.client.entity.position.y + canvas_transform.f);\n                if (is_zoom) {\n                    // this.client.canvas.mouse.x -= absolute_position.x;\n                    // this.client.canvas.mouse.y -= absolute_position.y;\n                }\n                const translated_mouse = this.client.polyfight_canvas.mouse.clone.add(new vector_1.default(this.client.polyfight_canvas.canvas.width / 2, this.client.polyfight_canvas.canvas.height / 2));\n                const inverse_transform = this.client.polyfight_canvas.canvas_transform.inverse();\n                const mouse = new vector_1.default(inverse_transform.a * translated_mouse.x + inverse_transform.e, inverse_transform.d * translated_mouse.y + inverse_transform.f);\n                this.client.entity.target_angle = this.client.entity.angle = mouse.angle(this.client.entity.position);\n            }\n            // Stats buttons.\n            let x = event.clientX - this.client.polyfight_canvas.stats_canvas.getBoundingClientRect().left;\n            let y = event.clientY - this.client.polyfight_canvas.stats_canvas.getBoundingClientRect().top;\n            // check if mouse is hovering over the canvas\n            if (x < 0 || x > this.client.polyfight_canvas.stats_canvas.width || y < 0 || y > this.client.polyfight_canvas.stats_canvas.height) {\n                this.client.polyfight_canvas.stats.target_opacity = 1;\n            }\n            else {\n                this.client.polyfight_canvas.stats.target_opacity = 0;\n            }\n            ;\n            const buttons = this.client.polyfight_canvas.stats_buttons;\n            let hovering = false;\n            for (const button of buttons) {\n                if (!button || button.disabled)\n                    continue;\n                let translated_x = x - button.x;\n                let translated_y = y - button.y;\n                if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                    button.hovered = true;\n                    hovering = true;\n                    this.client.polyfight_canvas.stats_canvas.style.cursor = "pointer";\n                    return;\n                }\n                else\n                    button.hovered = false;\n            }\n            // Upgrade tank buttons.\n            if (this.client.polyfight_canvas.upgrade_tanks.current_upgrades.length != 0) {\n                let u_hover = false;\n                let ux = event.clientX - this.client.polyfight_canvas.upgrade_tanks_canvas.getBoundingClientRect().left;\n                let uy = event.clientY - this.client.polyfight_canvas.upgrade_tanks_canvas.getBoundingClientRect().top;\n                const upgrade_buttons = this.client.polyfight_canvas.upgrade_tanks_buttons;\n                for (let i = 0; i < upgrade_buttons.length; ++i) {\n                    let button = upgrade_buttons[i];\n                    if (button.disabled || this.client.polyfight_canvas.upgrade_tanks.current_upgrades[i] === undefined)\n                        continue;\n                    let translated_x = ux - button.x;\n                    let translated_y = uy - button.y;\n                    if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                        u_hover = true;\n                        button.hovered = true;\n                        this.client.polyfight_canvas.upgrade_tanks_canvas.style.cursor = "pointer";\n                        return;\n                    }\n                    else\n                        button.hovered = false;\n                }\n                ;\n                // Dismiss upgrades button.\n                if (this.client.polyfight_canvas.upgrade_tanks.current_upgrades.length != 0 || this.client.polyfight_canvas.upgrade_tanks.dismissed) {\n                    let dismiss_button = this.client.polyfight_canvas.upgrade_tanks_close_button;\n                    if (dismiss_button === null)\n                        return;\n                    let translated_x = ux - dismiss_button.x;\n                    let translated_y = uy - dismiss_button.y;\n                    if (translated_x > 0 && translated_x < dismiss_button.width && translated_y > 0 && translated_y < dismiss_button.height) {\n                        dismiss_button.hovered = true;\n                        this.client.polyfight_canvas.upgrade_tanks_canvas.style.cursor = "pointer";\n                        return;\n                    }\n                    else\n                        dismiss_button.hovered = false;\n                }\n                if (!u_hover)\n                    this.client.polyfight_canvas.upgrade_tanks_canvas.style.cursor = "default";\n            }\n            else\n                this.client.polyfight_canvas.upgrade_tanks_canvas.style.cursor = "default";\n            // Death screen buttons.\n            let dx = event.clientX - this.client.polyfight_canvas.canvas.getBoundingClientRect().left; // todo not compliant with dpr\n            let dy = event.clientY - this.client.polyfight_canvas.canvas.getBoundingClientRect().top;\n            const death_buttons = this.client.polyfight_canvas.death_buttons;\n            if (death_buttons.length == 0) {\n                document.body.style.cursor = this.client.polyfight_canvas.canvas.style.cursor = "default";\n            }\n            for (const button of death_buttons) {\n                if (!button || button.disabled)\n                    continue;\n                let translated_x = dx - button.x;\n                let translated_y = dy - button.y;\n                if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                    button.hovered = true;\n                    hovering = true;\n                    document.body.style.cursor = this.client.polyfight_canvas.canvas.style.cursor = "pointer";\n                    return;\n                }\n                else {\n                    button.hovered = false;\n                    document.body.style.cursor = this.client.polyfight_canvas.canvas.style.cursor = "default";\n                }\n            }\n            if (!hovering)\n                this.client.polyfight_canvas.stats_canvas.style.cursor = "default";\n        });\n        this.client.polyfight_canvas.stats_canvas.addEventListener("mousedown", (event) => {\n            if (event.button != 0)\n                return;\n            let x = event.clientX - this.client.polyfight_canvas.stats_canvas.getBoundingClientRect().left;\n            let y = event.clientY - this.client.polyfight_canvas.stats_canvas.getBoundingClientRect().top;\n            const buttons = this.client.polyfight_canvas.stats_buttons;\n            let button_clicked = false;\n            for (let idx = 0; idx < buttons.length; ++idx) {\n                let button = buttons[idx];\n                if (!button || button.disabled)\n                    continue;\n                let translated_x = x - button.x;\n                let translated_y = y - button.y;\n                if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                    event.stopPropagation();\n                    button.clicked = true;\n                    button_clicked = true;\n                    this.purge_all_stats = false;\n                    if (this.client.polyfight_canvas.stats.available_stat_points == 0) {\n                        if (this.last_key == "KeyM") {\n                            const len = this.client.polyfight_canvas.stats.preloaded_stats.filter(x => x == idx).length;\n                            for (let i = this.client.polyfight_canvas.stats.stats_value[idx] + len; i < this.client.polyfight_canvas.stats.max_stats_value[idx]; ++i) {\n                                if (this.client.polyfight_canvas.stats.max_stat_points < this.client.polyfight_canvas.stats.stats_value.reduce((a, b) => a + b, 0) + this.client.polyfight_canvas.stats.preloaded_stats.length)\n                                    break;\n                                this.client.polyfight_canvas.stats.preloaded_stats.push(idx);\n                            }\n                        }\n                        else if (this.last_key == "KeyU") {\n                            const len = this.client.polyfight_canvas.stats.preloaded_stats.filter(x => x == idx).length;\n                            if (this.client.polyfight_canvas.stats.stats_value[idx] + len < this.client.polyfight_canvas.stats.max_stats_value[idx]) {\n                                if (this.client.polyfight_canvas.stats.max_stat_points < this.client.polyfight_canvas.stats.stats_value.reduce((a, b) => a + b, 0) + this.client.polyfight_canvas.stats.preloaded_stats.length)\n                                    return;\n                                this.client.polyfight_canvas.stats.preloaded_stats.push(idx);\n                            }\n                        }\n                    }\n                    else\n                        button.click();\n                    return;\n                }\n                ;\n            }\n            ;\n        });\n        this.client.polyfight_canvas.upgrade_tanks_canvas.addEventListener("mousedown", (event) => {\n            if (this.client.polyfight_canvas.upgrade_tanks.current_upgrades.length != 0) {\n                if (event.button != 0)\n                    return;\n                // event.stopImmediatePropagation();\n                // Upgrade tank buttons.\n                let ux = event.clientX - this.client.polyfight_canvas.upgrade_tanks_canvas.getBoundingClientRect().left;\n                let uy = event.clientY - this.client.polyfight_canvas.upgrade_tanks_canvas.getBoundingClientRect().top;\n                const upgrade_buttons = this.client.polyfight_canvas.upgrade_tanks_buttons;\n                for (let i = 0; i < upgrade_buttons.length; ++i) {\n                    let button = upgrade_buttons[i];\n                    if (button.disabled || this.client.polyfight_canvas.upgrade_tanks.current_upgrades[i] === undefined)\n                        continue;\n                    let translated_x = ux - button.x;\n                    let translated_y = uy - button.y;\n                    if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                        event.stopPropagation();\n                        button.clicked = true;\n                        button.click();\n                        break;\n                    }\n                    ;\n                }\n                ;\n            }\n            if (this.client.polyfight_canvas.upgrade_tanks.current_upgrades.length != 0 || this.client.polyfight_canvas.upgrade_tanks.dismissed) {\n                if (event.button != 0)\n                    return;\n                // event.stopImmediatePropagation();\n                let ux = event.clientX - this.client.polyfight_canvas.upgrade_tanks_canvas.getBoundingClientRect().left;\n                let uy = event.clientY - this.client.polyfight_canvas.upgrade_tanks_canvas.getBoundingClientRect().top;\n                // Dismiss upgrades button.\n                let dismiss_button = this.client.polyfight_canvas.upgrade_tanks_close_button;\n                if (dismiss_button === null)\n                    return;\n                let translated_x = ux - dismiss_button.x;\n                let translated_y = uy - dismiss_button.y;\n                if (translated_x > 0 && translated_x < dismiss_button.width && translated_y > 0 && translated_y < dismiss_button.height) {\n                    event.stopPropagation();\n                    dismiss_button.clicked = true;\n                    dismiss_button.click();\n                }\n            }\n        });\n        window.addEventListener("mousedown", (event) => {\n            // if (event.button != 0) return;\n            // Death screen buttons.\n            let dx = event.clientX - this.client.polyfight_canvas.canvas.getBoundingClientRect().left;\n            let dy = event.clientY - this.client.polyfight_canvas.canvas.getBoundingClientRect().top;\n            const death_buttons = this.client.polyfight_canvas.death_buttons;\n            for (const button of death_buttons) {\n                if (!button || button.disabled)\n                    continue;\n                let translated_x = dx - button.x;\n                let translated_y = dy - button.y;\n                if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                    button.clicked = true;\n                    button.click();\n                    return;\n                }\n                ;\n            }\n            if (this.client.entity.dying_phase == enums_1.DyingPhase.Alive) {\n                if (event.button == 0)\n                    this.client.polyfight_canvas.inputs |= enums_1.Inputs.Shoot;\n                if (event.button == 2) {\n                    this.client.polyfight_canvas.inputs |= enums_1.Inputs.Repel;\n                    if (this.client.entity.identity_id == enums_1.EntityIdentityIds.Predator) {\n                        this.client.entity.zoom_translation = this.client.entity.angle;\n                        this.client.polyfight_canvas.zoom_pos = this.client.entity.position.clone;\n                    }\n                }\n            }\n        });\n        this.client.polyfight_canvas.stats_canvas.addEventListener("mouseup", (event) => {\n            if (event.button != 0)\n                return;\n            // event.stopImmediatePropagation();\n            // Stats buttons.\n            let x = event.clientX - this.client.polyfight_canvas.stats_canvas.getBoundingClientRect().left;\n            let y = event.clientY - this.client.polyfight_canvas.stats_canvas.getBoundingClientRect().top;\n            const buttons = this.client.polyfight_canvas.stats_buttons;\n            for (const button of buttons) {\n                if (!button || button.disabled)\n                    continue;\n                let translated_x = x - button.x;\n                let translated_y = y - button.y;\n                if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                    event.stopPropagation();\n                    button.clicked = false;\n                    return;\n                }\n                ;\n            }\n            ;\n        });\n        this.client.polyfight_canvas.upgrade_tanks_canvas.addEventListener("mouseup", (event) => {\n            // Upgrade tank buttons.\n            if (this.client.polyfight_canvas.upgrade_tanks.current_upgrades.length != 0) {\n                if (event.button != 0)\n                    return;\n                // event.stopImmediatePropagation();\n                let ux = event.clientX - this.client.polyfight_canvas.upgrade_tanks_canvas.getBoundingClientRect().left;\n                let uy = event.clientY - this.client.polyfight_canvas.upgrade_tanks_canvas.getBoundingClientRect().top;\n                const upgrade_buttons = this.client.polyfight_canvas.upgrade_tanks_buttons;\n                for (let i = 0; i < upgrade_buttons.length; ++i) {\n                    let button = upgrade_buttons[i];\n                    if (button.disabled || this.client.polyfight_canvas.upgrade_tanks.current_upgrades[i] === undefined)\n                        continue;\n                    let translated_x = ux - button.x;\n                    let translated_y = uy - button.y;\n                    if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                        event.stopPropagation();\n                        button.clicked = false;\n                        return;\n                    }\n                    ;\n                }\n                ;\n            }\n        });\n        window.addEventListener("mouseup", (event) => {\n            // Death screen buttons.\n            let dx = event.clientX - this.client.polyfight_canvas.canvas.getBoundingClientRect().left;\n            let dy = event.clientY - this.client.polyfight_canvas.canvas.getBoundingClientRect().top;\n            const death_buttons = this.client.polyfight_canvas.death_buttons;\n            for (const button of death_buttons) {\n                if (!button || button.disabled)\n                    continue;\n                let translated_x = dx - button.x;\n                let translated_y = dy - button.y;\n                if (translated_x > 0 && translated_x < button.width && translated_y > 0 && translated_y < button.height) {\n                    button.clicked = false;\n                    return;\n                }\n                ;\n            }\n            if (event.button == 0)\n                this.client.polyfight_canvas.inputs = this.client.polyfight_canvas.inputs & ~enums_1.Inputs.Shoot;\n            if (event.button == 2) {\n                this.client.polyfight_canvas.inputs = this.client.polyfight_canvas.inputs & ~enums_1.Inputs.Repel;\n                if (this.client.entity.identity_id == enums_1.EntityIdentityIds.Predator) {\n                    // this.client.entity.zoom_translation = 0.0;\n                    this.client.polyfight_canvas.zoom_pos = new vector_1.default(0, 0);\n                }\n            }\n            ;\n        });\n        window.addEventListener("touchstart", (event) => __awaiter(this, void 0, void 0, function* () {\n            this.client.polyfight_canvas.is_mobile = true;\n        }));\n        window.addEventListener("wheel", (event) => {\n            if (this.stats_leaderboard_modal.style.zIndex == "9" || this.trophy_leaderboard_modal.style.zIndex == "9")\n                return;\n            if (this.client.entity.identity_id != enums_1.EntityIdentityIds.Spectator) {\n                this.client.entity.desired_fov = -1;\n                return;\n            }\n            ;\n            if (this.client.entity.desired_fov == -1)\n                this.client.entity.desired_fov = this.client.entity.target_fov;\n            if (event.deltaY < 0)\n                this.client.entity.desired_fov /= 1.1;\n            else if (event.deltaY > 0)\n                this.client.entity.desired_fov *= 1.1;\n        });\n        this.chat_input.addEventListener("keydown", (event) => {\n            if (event.key == "Enter") {\n                this.client.polyfight_canvas.chat_information.force_open = this.client.polyfight_canvas.chat_information.typing = !this.client.polyfight_canvas.chat_information.typing;\n                if (this.client.polyfight_elements.chat_input.value.length > 0)\n                    this.client.polyfight_connection.packet_handler.write_chat(this.client.polyfight_elements.chat_input.value);\n                else {\n                    this.client.polyfight_connection.packet_handler.write_type();\n                }\n                this.chat_input.value = "";\n                this.chat_input.style.display = "none";\n            }\n        });\n        window.addEventListener("keydown", (event) => {\n            if (event.key == "Escape") {\n                this.modal_x_on_click();\n                this.clan_modal_close_on_click();\n                this.settings_button_close_on_click();\n                this.teambuilder_modal_close_on_click();\n                this.stats_leaderboard_modal_close_on_click();\n                this.trophy_leaderboard_close_on_click();\n                this.discord_button_close_on_click();\n                this.client.polyfight_canvas.chat_information.typing = false;\n                this.client.polyfight_canvas.chat_information.force_open = false;\n                if (this.chat_input.style.display == "block") {\n                    this.chat_input.style.display = "none";\n                    this.client.polyfight_connection.packet_handler.write_type();\n                }\n            }\n            if (document.activeElement == this.clan_textbox || document.activeElement == this.chat_input)\n                return;\n            // if (this.client.polyfight_canvas.chat_information.typing)\n            // {\n            //     if (event.key.length == 1)\n            //     {\n            //         this.client.entity.message += event.key;\n            //         return;\n            //     }\n            //     else\n            //     {\n            //         if (event.code == "Space") { this.client.entity.message += " "; return; }\n            //         else if (event.code == "Backspace") { this.client.entity.message = this.client.entity.message.slice(0, -1); return; }\n            //     }\n            // }\n            if (this.settings_modal.style.zIndex == "9")\n                return;\n            if (event.code == "KeyE" && this.client.entity.dying_phase == enums_1.DyingPhase.Alive) {\n                this.client.polyfight_canvas.auto_fire = !this.client.polyfight_canvas.auto_fire;\n                this.client.polyfight_canvas.add_notification({ message: this.client.polyfight_canvas.auto_fire ? "Auto Fire: ON" : "Auto Fire: OFF", r: 0, g: 0, b: 255 });\n            }\n            else if (event.code == "KeyC" && this.client.entity.dying_phase == enums_1.DyingPhase.Alive) {\n                if (this.client.polyfight_canvas.auto_spin == enums_1.SpinType.Normal)\n                    this.client.polyfight_canvas.auto_spin = enums_1.SpinType.None;\n                else\n                    this.client.polyfight_canvas.auto_spin = enums_1.SpinType.Normal;\n                this.client.polyfight_canvas.add_notification({ message: this.client.polyfight_canvas.auto_spin ? "Auto Spin: ON" : "Auto Spin: OFF", r: 0, g: 0, b: 255 });\n            }\n            else if (event.code == "KeyL" && this.client.entity.dying_phase == enums_1.DyingPhase.Alive) {\n                this.client.polyfight_canvas.lock_mouse = !this.client.polyfight_canvas.lock_mouse;\n                this.client.polyfight_canvas.add_notification({ message: this.client.polyfight_canvas.lock_mouse ? "Mouse Lock: ON" : "Mouse Lock: OFF", r: 0, g: 0, b: 255 });\n            }\n            else if (event.code == "KeyT" && this.client.entity.dying_phase == enums_1.DyingPhase.Alive) {\n                if (this.client.polyfight_canvas.auto_spin == enums_1.SpinType.Tbag)\n                    this.client.polyfight_canvas.auto_spin = enums_1.SpinType.None;\n                else\n                    this.client.polyfight_canvas.auto_spin = enums_1.SpinType.Tbag;\n                this.client.polyfight_canvas.add_notification({ message: this.client.polyfight_canvas.auto_spin ? "T-Bag: ON" : "T-Bag: OFF", r: 0, g: 0, b: 255 });\n            }\n            else if (event.key == "Enter") {\n                if (this.client.entity.dying_phase == enums_1.DyingPhase.Dead || this.client.entity.dying_phase == enums_1.DyingPhase.None) {\n                    if (this.container.classList.contains("show") && this.teambuilder_modal.style.zIndex != "9" && this.stats_leaderboard_modal.style.zIndex != "9") {\n                        this.play_button.click();\n                    }\n                    else {\n                        this.client.entity.dying_phase = enums_1.DyingPhase.None;\n                        this.container.classList.add("show");\n                        this.client.polyfight_canvas.minimap_canvas.style.display = "none";\n                        this.client.polyfight_canvas.death_buttons = [];\n                    }\n                }\n                else if (this.client.entity.dying_phase == enums_1.DyingPhase.Alive) {\n                    this.client.polyfight_canvas.chat_information.force_open = this.client.polyfight_canvas.chat_information.typing = !this.client.polyfight_canvas.chat_information.typing;\n                    if (!this.client.polyfight_canvas.chat_information.typing) {\n                        if (this.client.polyfight_elements.chat_input.value.length > 0)\n                            this.client.polyfight_connection.packet_handler.write_chat(this.client.polyfight_elements.chat_input.value);\n                        else {\n                            this.client.polyfight_connection.packet_handler.write_type();\n                        }\n                        this.client.polyfight_elements.chat_input.value = "";\n                    }\n                    else {\n                        this.client.polyfight_connection.packet_handler.write_type();\n                    }\n                    this.chat_input.value = "";\n                    this.chat_input.style.display = this.client.polyfight_canvas.chat_information.typing ? "block" : "none";\n                    this.chat_input.focus();\n                }\n            }\n            else if (event.code == "KeyM" || event.code == "KeyU") {\n                this.client.polyfight_canvas.stats_buttons.forEach(button => {\n                    if (button)\n                        button.disabled = false;\n                });\n                if (event.code == "KeyU" && this.last_key != "KeyU") {\n                    this.purge_all_stats = true;\n                }\n            }\n            if (event.code.includes("Digit")) {\n                this.purge_all_stats = false;\n                const index = parseInt(event.code[event.code.length - 1]) - 1;\n                if (index >= 0 && index < this.client.polyfight_canvas.stats_buttons.length) {\n                    const button = this.client.polyfight_canvas.stats_buttons[index];\n                    if (!(button === null || button === void 0 ? void 0 : button.disabled)) {\n                        if (this.last_key == "KeyM") {\n                            const len = this.client.polyfight_canvas.stats.preloaded_stats.filter(x => x == index).length;\n                            for (let i = this.client.polyfight_canvas.stats.stats_value[index] + len; i < this.client.polyfight_canvas.stats.max_stats_value[index]; ++i) {\n                                if (this.client.polyfight_canvas.stats.available_stat_points > 0)\n                                    button.click();\n                                if (this.client.polyfight_canvas.stats.max_stat_points < this.client.polyfight_canvas.stats.stats_value.reduce((a, b) => a + b, 0) + this.client.polyfight_canvas.stats.preloaded_stats.length)\n                                    break;\n                                else\n                                    this.client.polyfight_canvas.stats.preloaded_stats.push(index);\n                            }\n                        }\n                        else if (this.last_key == "KeyU") {\n                            const len = this.client.polyfight_canvas.stats.preloaded_stats.filter(x => x == index).length;\n                            if (this.client.polyfight_canvas.stats.stats_value[index] + len < this.client.polyfight_canvas.stats.max_stats_value[index]) {\n                                if (this.client.polyfight_canvas.stats.max_stat_points < this.client.polyfight_canvas.stats.stats_value.reduce((a, b) => a + b, 0) + this.client.polyfight_canvas.stats.preloaded_stats.length)\n                                    return;\n                                this.client.polyfight_canvas.stats.preloaded_stats.push(index);\n                            }\n                        }\n                        else\n                            button.click();\n                    }\n                }\n                ;\n            }\n            else\n                this.last_key = this.key_held = event.code;\n            let key_value;\n            if ((key_value = enums_1.InputMap.get(event.code)) != undefined) {\n                this.client.polyfight_canvas.inputs |= key_value;\n                if (key_value == enums_1.Inputs.Repel && this.client.entity.identity_id == enums_1.EntityIdentityIds.Predator) {\n                    this.client.entity.zoom_translation = this.client.entity.angle;\n                    this.client.polyfight_canvas.zoom_pos = this.client.entity.position.clone;\n                }\n            }\n            ;\n        });\n        window.addEventListener("keyup", (event) => {\n            if (["KeyU", "KeyM"].includes(event.code)) {\n                this.client.polyfight_canvas.stats.target_opacity = 1;\n                this.last_key = this.key_held = "";\n                this.client.polyfight_canvas.stats_buttons.forEach(button => {\n                    if (button) {\n                        button.disabled = this.client.polyfight_canvas.stats.available_stat_points == 0;\n                    }\n                });\n                if (this.purge_all_stats) {\n                    this.client.polyfight_canvas.stats.preloaded_stats = [];\n                    this.purge_all_stats = false;\n                }\n            }\n            let key_value;\n            if ((key_value = enums_1.InputMap.get(event.code)) != undefined) {\n                this.client.polyfight_canvas.inputs = this.client.polyfight_canvas.inputs & ~key_value;\n                if (key_value == enums_1.Inputs.Repel && this.client.entity.identity_id == enums_1.EntityIdentityIds.Predator) {\n                    // this.client.entity.zoom_translation = 0.0;\n                    this.client.polyfight_canvas.zoom_pos = new vector_1.default(0, 0);\n                }\n            }\n            ;\n        });\n        this.textbox.addEventListener("keydown", (event) => {\n            if (event.key == "Enter")\n                this.play_button.click();\n        });\n        this.play_button.addEventListener("click", () => {\n            if (this.play_button.classList.contains("disabled"))\n                return;\n            this.ranked_div.style.display = this.get_query_variable(window.location.hash.split("?")[1], "ranked") == "true" ? "block" : "none";\n            if (this.textbox.value.length > 0) {\n                if (this.scoring.classList.contains("selected") || this.team.innerText == "Match found!") {\n                    this.client.polyfight_connection.packet_handler.write_spawn(consts_1.BUILD_ID, this.textbox.value, consts_1.FINGERPRINT);\n                }\n                else {\n                    const region = this.ranked_region.value;\n                    const url = consts_1.SERVER_URLS[region.toLowerCase()] + "/1v1?id=null";\n                    const tanks = [];\n                    /** @ts-ignore */\n                    const current_team = window.teams_state.teams[window.teams_state.team_idx];\n                    for (const tank of current_team.tanks) {\n                        tanks.push({\n                            identity: tankdefs_1.TANK_DEFS.indexOf(tankdefs_1.TANK_DEFS.find(x => x.name == tank.name) || tankdefs_1.TANK_DEFS[0]),\n                            build: tank.build.split("/").map((x) => +x)\n                        });\n                    }\n                    this.client.polyfight_connection.reconnect(url);\n                    localStorage.setItem("name", this.textbox.value);\n                    this.team.innerText = "Finding opponent...";\n                    this.play_button.classList.add("disabled");\n                    this.client.polyfight_connection.polyfight_connection.addEventListener("open", () => {\n                        const stream = new stream_1.default(0);\n                        for (const tank of tanks) {\n                            stream.write_uint8(tank.identity);\n                            for (const build of tank.build)\n                                stream.write_uint8(build);\n                        }\n                        this.client.polyfight_connection.polyfight_connection.send(stream.out());\n                    });\n                }\n                this.textbox.value = window.localStorage.name || "";\n            }\n            ;\n        });\n        /** @ts-ignore */\n        window.choose_name = this.choose_name.bind(this);\n    }\n    ;\n    fire_joystick_events() {\n        if (this.client.polyfight_canvas.is_mobile) {\n            let mouse = new vector_1.default(0, 0);\n            this.joystick.on(\'move\', (evt, data) => {\n                if (this.client.entity.dying_phase != enums_1.DyingPhase.Alive)\n                    return;\n                // const joysticks = this.joystick!.ids.map(id => this.joystick!.get(id)).map(joystick => ({ \n                // id: joystick.identifier, \n                // is_left: joystick.position.x < window.innerWidth / 2 \n                // }));\n                // const left_joysticks = joysticks.filter(joystick => joystick.is_left);\n                // const right_joysticks = joysticks.filter(joystick => !joystick.is_left);\n                if (data.position.x < window.innerWidth / 2) {\n                    let inputFlags = {\n                        Left: false,\n                        Right: false,\n                        Up: false,\n                        Down: false\n                    };\n                    let angle = data.angle.degree;\n                    if (angle >= 22.5 && angle < 67.5) {\n                        inputFlags.Up = true;\n                        inputFlags.Right = true;\n                    }\n                    else if (angle >= 67.5 && angle < 112.5) {\n                        inputFlags.Up = true;\n                    }\n                    else if (angle >= 112.5 && angle < 157.5) {\n                        inputFlags.Up = true;\n                        inputFlags.Left = true;\n                    }\n                    else if (angle >= 157.5 && angle < 202.5) {\n                        inputFlags.Left = true;\n                    }\n                    else if (angle >= 202.5 && angle < 247.5) {\n                        inputFlags.Down = true;\n                        inputFlags.Left = true;\n                    }\n                    else if (angle >= 247.5 && angle < 292.5) {\n                        inputFlags.Down = true;\n                    }\n                    else if (angle >= 292.5 && angle < 337.5) {\n                        inputFlags.Down = true;\n                        inputFlags.Right = true;\n                    }\n                    else {\n                        inputFlags.Right = true;\n                    }\n                    for (const [key, val] of Object.entries(inputFlags)) {\n                        if (val)\n                            this.client.polyfight_canvas.inputs |= enums_1.Inputs[key];\n                        else\n                            this.client.polyfight_canvas.inputs &= ~enums_1.Inputs[key];\n                    }\n                }\n                else {\n                    this.client.polyfight_canvas.inputs |= enums_1.Inputs.Shoot;\n                    if (this.real_shoot_mode == "R") {\n                        this.client.polyfight_canvas.inputs |= enums_1.Inputs.Repel;\n                    }\n                    let angle = data.angle.radian;\n                    if (angle < -Math.PI)\n                        angle += Math.PI * 2;\n                    if (angle > Math.PI)\n                        angle -= Math.PI * 2;\n                    angle *= -1;\n                    this.client.polyfight_canvas.mouse.x = data.raw.distance * 5 * Math.cos(angle);\n                    this.client.polyfight_canvas.mouse.y = data.raw.distance * 5 * Math.sin(angle);\n                    this.client.polyfight_canvas.mouse.add(mouse);\n                    this.client.polyfight_canvas.mouse.x = (0, functions_1.constrain)(-this.client.polyfight_canvas.canvas.width / 2, this.client.polyfight_canvas.mouse.x, this.client.polyfight_canvas.canvas.width / 2);\n                    this.client.polyfight_canvas.mouse.y = (0, functions_1.constrain)(-this.client.polyfight_canvas.canvas.height / 2, this.client.polyfight_canvas.mouse.y, this.client.polyfight_canvas.canvas.height / 2);\n                    this.client.entity.target_angle = this.client.entity.angle = this.client.polyfight_canvas.mouse.angle();\n                }\n            });\n            this.joystick.on(\'end\', (evt, data) => {\n                if (this.client.entity.dying_phase != enums_1.DyingPhase.Alive)\n                    return;\n                if (data.position.x < window.innerWidth / 2) {\n                    this.client.polyfight_canvas.inputs &= ~(enums_1.Inputs.Left | enums_1.Inputs.Right | enums_1.Inputs.Up | enums_1.Inputs.Down);\n                }\n                else {\n                    this.client.polyfight_canvas.inputs &= ~(enums_1.Inputs.Shoot | enums_1.Inputs.Repel);\n                    mouse = this.client.polyfight_canvas.mouse.clone;\n                }\n            });\n        }\n    }\n    ;\n    choose_name(title = "Enter the name you want associated with your 1v1 account. This name may be changed.") {\n        return __awaiter(this, void 0, void 0, function* () {\n            /** @ts-ignore */\n            const name = yield window.Swal.fire({\n                icon: "info",\n                title,\n                input: "text",\n                inputAttributes: {\n                    maxlength: "18"\n                },\n                inputValidator: (value) => {\n                    if (!value)\n                        return "You must enter a name.";\n                }\n            });\n            fetch(`${consts_1.SERVER_URLS[this.client.polyfight_connection.preferred_region].replace("wss", "https").replace("ws", "http")}/register`, {\n                method: "POST",\n                credentials: "include",\n                headers: { "Content-Type": "application/json" },\n                body: JSON.stringify({ name: name.value })\n            })\n                .then((r) => __awaiter(this, void 0, void 0, function* () {\n                if (r.status == 400) {\n                    const message = yield r.text();\n                    /** @ts-ignore */\n                    yield window.Swal.fire({\n                        icon: "error",\n                        title: "Error",\n                        text: message\n                    });\n                }\n                else if (r.status == 409)\n                    yield this.choose_name("That name is already taken. Please choose another.");\n                else if (r.status == 500)\n                    yield this.choose_name("An error occurred. Please try again.");\n                else if (r.status == 200) {\n                    /** @ts-ignore */\n                    yield window.Swal.fire({\n                        icon: "success",\n                        title: "Success",\n                        text: "You have successfully registered."\n                    });\n                }\n            }));\n        });\n    }\n    get_query_variable(query, variable) {\n        if (!query)\n            return "";\n        var vars = query.split(\'&\');\n        for (var i = 0; i < vars.length; i++) {\n            var pair = vars[i].split(\'=\');\n            if (decodeURIComponent(pair[0]) == variable) {\n                return decodeURIComponent(pair[1]);\n            }\n        }\n        return "";\n    }\n    reload_servers() {\n        this.servers.innerHTML = "";\n        const interval = setInterval(() => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            if (!this.client.polyfight_connection.servers_loaded)\n                return;\n            if (window.location.hash) {\n                const id = window.location.hash.slice(1).split("?")[0];\n                const span = document.createElement("span");\n                span.textContent = "Connecting to server...";\n                span.style.fontSize = "1.5rem";\n                span.style.margin = "5px";\n                this.servers.appendChild(span);\n                const region = this.get_query_variable(window.location.hash.slice(1).split("?")[1], "region");\n                /** @ts-ignore */\n                if (!consts_1.SERVER_URLS[region]) {\n                    /** @ts-ignore */\n                    window.Swal.fire({ icon: "error", title: "Invalid region", text: "The region in your link is invalid." });\n                    window.location.hash = "";\n                    this.servers.removeChild(span);\n                    yield this.client.polyfight_connection.find_servers();\n                    this.reload_servers();\n                    this.client.entity.first_server_spawn = true;\n                    return;\n                }\n                /** @ts-ignore */\n                this.client.polyfight_connection.reconnect(consts_1.SERVER_URLS[region] + `/scoring?id=${id}`); // TODO remove hardcoding of SERVER_URLS\n                (_a = this.client.polyfight_connection.polyfight_connection) === null || _a === void 0 ? void 0 : _a.addEventListener("error", () => __awaiter(this, void 0, void 0, function* () {\n                    /** @ts-ignore */\n                    yield window.Swal.fire({ icon: "error", title: "Invalid ID", text: "The ID you entered is invalid, the lobby is full, or you are not allowed to join." });\n                    window.location.hash = "";\n                    this.servers.removeChild(span);\n                    yield this.client.polyfight_connection.find_servers();\n                    this.reload_servers();\n                    this.client.entity.first_server_spawn = true;\n                }));\n                (_b = this.client.polyfight_connection.polyfight_connection) === null || _b === void 0 ? void 0 : _b.addEventListener("open", () => {\n                    if (this.get_query_variable(window.location.hash.slice(1).split("?")[1], "ranked") == "true") {\n                        this.client.polyfight_elements.play_button.innerText = "Play";\n                        this.team.innerText = "Match found!";\n                        this.menu_scoring.style.display = "none";\n                        this.menu_1v1.style.display = "block";\n                        this.scoring.classList.remove("selected");\n                        this.ranked.classList.add("selected");\n                        this.play_button.classList.remove("disabled");\n                        this.clan_button.classList.add("disabled");\n                    }\n                    else\n                        span.textContent = "Connected to server!";\n                });\n                clearInterval(interval);\n            }\n            else {\n                let already_selected = false;\n                for (let i = 0; i < this.client.polyfight_connection.servers.length; i++) {\n                    let server = this.client.polyfight_connection.servers[i];\n                    const entry = document.createElement("div");\n                    entry.id = "server-entry";\n                    const name = document.createElement("span");\n                    name.textContent = server.gamemode;\n                    const players = document.createElement("span");\n                    players.textContent = `${server.player_count} players`;\n                    const region = document.createElement("span");\n                    region.textContent = server.region;\n                    entry.appendChild(name);\n                    entry.appendChild(players);\n                    entry.appendChild(region);\n                    entry.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {\n                        var _c;\n                        const selected = this.client.polyfight_connection.servers[i];\n                        let force_id = "";\n                        if (force_id === "PANIC!")\n                            return;\n                        const previously_selected = this.servers.querySelector("#server-entry.selected");\n                        if (previously_selected)\n                            previously_selected.classList.remove("selected");\n                        entry.classList.add("selected");\n                        this.client.polyfight_connection.reconnect(\n                        /** @ts-ignore */\n                        consts_1.SERVER_URLS[selected.region.toLowerCase()] + `/scoring?id=${force_id || selected.id}`);\n                        (_c = this.client.polyfight_connection.polyfight_connection) === null || _c === void 0 ? void 0 : _c.addEventListener("error", () => __awaiter(this, void 0, void 0, function* () {\n                            /** @ts-ignore */\n                            yield window.Swal.fire({ icon: "error", title: "Invalid ID", text: "The ID you entered is invalid, the lobby is full, or you are not allowed to join." });\n                            window.location.hash = "";\n                            yield this.client.polyfight_connection.find_servers();\n                            this.reload_servers();\n                            this.client.entity.first_server_spawn = true;\n                        }));\n                        window.location.hash = (force_id || selected.id) + "?region=" + selected.region.toLowerCase();\n                        this.client.entity.first_server_spawn = true;\n                    }));\n                    if (!already_selected) {\n                        already_selected = true;\n                        entry.click();\n                    }\n                    this.servers.appendChild(entry);\n                }\n                clearInterval(interval);\n            }\n        }), 100);\n    }\n    stats_on_click() {\n        if (this.trophy_leaderboard_modal.style.zIndex == "9")\n            this.trophy_leaderboard_close_on_click();\n        this.stats_leaderboard_modal.style.zIndex = "9";\n        this.stats_leaderboard_modal.style.opacity = "1";\n        /** @ts-ignore */\n        const fetch_data = window.fetch_data = (identifier = auth.currentUser.uid) => __awaiter(this, void 0, void 0, function* () {\n            this.stats_leaderboard_categories.innerHTML = "<span class=\'stroke\' style=\'font-size: 36px;\'>Loading, please wait...</span>";\n            yield fetch(`${consts_1.SERVER_URLS[this.client.polyfight_connection.preferred_region].replace("wss", "https").replace("ws", "http")}/get_player_info`, {\n                method: "POST",\n                headers: { "Content-Type": "application/json" },\n                body: JSON.stringify({ identifier, category: identifier == auth.currentUser.uid ? "uid" : "name" })\n            })\n                .then(r => {\n                if (r.status == 200)\n                    return r.json();\n                else {\n                    this.stats_leaderboard_modal.innerHTML = `\n                            <span id="stats-leaderboard-close" style="padding-right: 15px;">X</span>\n\n                            <div id="stats-leaderboard-categories">\n                                <span class="stroke" style="font-size: 36px;">Unable to look up user.</span>\n                            </div>\n\n                            <div style="display: flex; flex-direction: column; justify-content: center; align-items: center;">\n                                <div style="display: flex; flex-direction: row; justify-content: center; align-items: center;">\n                                    <input \n                                        type="text"\n                                        id="stats-leaderboard-search" placeholder="Search for a player..." \n                                        style="width: 300px; height: 30px; font-size: 18px; padding: 5px; margin: 10px; border-radius: 5px;"\n                                        onkeydown="if (event.key == \'Enter\') window.fetch_data(document.getElementById(\'stats-leaderboard-search\').value);"\n                                    >\n                                    <button \n                                        id="stats-leaderboard-search-button" \n                                        style="font-size: 18px; padding: 5px; margin: 10px; background-color: #00FF00; border: 3px solid rgba(0, 0, 0, 0.3); border-radius: 5px;"\n                                        onclick="window.fetch_data(document.getElementById(\'stats-leaderboard-search\').value);"\n                                    >\n                                        Search\n                                    </button>\n                                </div>\n                                <span class="stroke" style="font-size: 18px;">Showing results for <span style="color: #3b82f6; text-decoration: underline;">${identifier}</span></span>\n                            </div>\n                        `.trim();\n                }\n            })\n                .then((data) => {\n                // this.stats_leaderboard_categories.innerHTML = `\n                // <div class="stats-leaderboard-category">\n                //     <div style="text-align: center; display: flex; flex-direction: column;">\n                //         <span class="lb-category-header stroke">Drone Category</span>\n                //         <span class="stroke" style="font-size: 18px;">ELO: 1500 ± 350 (volatility 0.06)</span>\n                //     </div>\n                //     <div style="display: flex; justify-content: center; align-items: center;">\n                //         <img src="assets/images/spritesheet.svg#Overlord" height="60" width="60">\n                //         <img src="assets/images/spritesheet.svg#Overseer" height="60" width="60">\n                //     </div>\n                // </div>\n                // `.trim();\n                if (data === undefined)\n                    return;\n                this.stats_leaderboard_modal.innerHTML =\n                    `\n                    <span id="stats-leaderboard-close" style="padding-right: 15px;">X</span>\n    \n                    <div id="stats-leaderboard-categories">\n                        ${data.elo.map(({ rating, deviation, volatility }, i) => {\n                        rating = Math.round(rating);\n                        const category_name = enums_1.TankCategories[i];\n                        const color = consts_1.THEME_CONFIG.UPGRADES[i].css;\n                        const tanks = tankdefs_1.TANK_DEFS.filter(x => x.category == i);\n                        return `\n                            <div class="stats-leaderboard-category" style="background-color: ${color}">\n                                <div style="text-align: center; display: flex; flex-direction: column;">\n                                    <span class="lb-category-header stroke">${category_name} Category</span>\n                                    <span class="stroke" style="font-size: 18px;">ELO: ${rating}</span>\n                                </div>\n    \n                                <div style="display: flex; justify-content: center; align-items: center;">\n                                    ${ /** @ts-ignore */""}\n                                    ${tanks.map(({ name }) => `<img src="${window.spritesheet}#${name}" height="60" width="60" style="flex: 1 1 30%; height: 60px; width: 60px; object-fit: contain;">`).join("\\n")}\n                                </div>\n                            </div>\n                            `.trim();\n                    }).join("\\n")}\n                    </div>\n    \n                    <p style="text-align: center; font-size: 36px;" class="stroke">Average ELO: <span style="color: #22FF00; text-decoration: underline;">${Math.round(data.elo.reduce((sum, item) => sum + item.rating, 0) / data.elo.length)}</span></π>\n    \n                    <div style="display: flex; flex-direction: column; justify-content: center; align-items: center;">\n                        <div style="display: flex; flex-direction: row; justify-content: center; align-items: center;">\n                            <input \n                                type="text"\n                                id="stats-leaderboard-search" placeholder="Search for a player..." \n                                style="width: 300px; height: 30px; font-size: 18px; padding: 5px; margin: 10px; border-radius: 5px;"\n                                onkeydown="if (event.key == \'Enter\') window.fetch_data(document.getElementById(\'stats-leaderboard-search\').value);"\n                            >\n                            <button \n                                id="stats-leaderboard-search-button" \n                                style="font-size: 18px; padding: 5px; margin: 10px; background-color: #00FF00; border: 3px solid rgba(0, 0, 0, 0.3); border-radius: 5px;"\n                                onclick="window.fetch_data(document.getElementById(\'stats-leaderboard-search\').value);"\n                            >\n                                Search\n                            </button>\n                        </div>\n                        <span class="stroke" style="font-size: 18px;">Showing results for <span style="color: #3b82f6; text-decoration: underline;">${data.name}</span></span>\n                        <p>\n                            Want to change your name?\n                            <a href="javascript:void(0);" onclick="window.choose_name();" style="color: #3b82f6; text-decoration: underline;">\n                                Click here\n                            </a>\n                        </p>\n                    </div>\n                    `.trim();\n            });\n            this.stats_leaderboard_close = document.getElementById("stats-leaderboard-close");\n            this.stats_leaderboard_close.addEventListener("click", this.stats_leaderboard_modal_close_on_click.bind(this));\n        });\n        fetch_data();\n    }\n    ;\n    trophy_leaderboard_on_click() {\n        if (this.stats_leaderboard_modal.style.zIndex == "9")\n            this.stats_leaderboard_modal_close_on_click();\n        this.trophy_leaderboard_modal.style.zIndex = "9";\n        this.trophy_leaderboard_modal.style.opacity = "1";\n        fetch(`${consts_1.SERVER_URLS[this.client.polyfight_connection.preferred_region].replace("wss", "https").replace("ws", "http")}/leaderboard`)\n            .then(r => r.json())\n            .then((data) => {\n            this.trophy_leaderboard_modal.innerHTML =\n                `\n                <span id="trophy-leaderboard-close" style="padding-right: 15px;">X</span>\n\n                <div id="trophy-leaderboard-categories">\n                    ${data.map((category, i) => {\n                    const category_name = enums_1.TankCategories[i] == "Illegal" ? "Generalist" : enums_1.TankCategories[i];\n                    const color = consts_1.THEME_CONFIG.UPGRADES[i].css;\n                    return `\n                        <div class="trophy-leaderboard-category" style="background-color: ${color};">\n                            <div style="text-align: center; display: flex; flex-direction: column;">\n                                <p class="lb-category-header stroke" style="text-align: center;">${category_name} Category</p>\n                                <div style="display: flex; flex-direction: column; justify-content: center; align-items: center;">\n                                    ${category.map((d, j) => `<span class="stroke" style="padding: 0 2px 0 2px;">${j + 1}. ${d.name == "" ? "——" : d.name} (${d.name == "" ? "N/A" : Math.round(d.elo)})</span>`).join("\\n")}\n                                </div>\n                            </div>\n                        </div>\n                        `.trim();\n                }).join("\\n")}\n                </div>\n\n                <p class="stroke" style="text-align: center; font-size: 24px;">Please allow up to 5 minutes for the leaderboard to update.</p>\n                `.trim();\n        });\n        this.trophy_leaderboard_close = document.getElementById("trophy-leaderboard-close");\n        this.trophy_leaderboard_close.addEventListener("click", this.trophy_leaderboard_close_on_click.bind(this));\n    }\n    /** The event listener for when the button is clicked. */\n    changelog_button_on_click() {\n        window.localStorage.setItem("changelog_last_build_checked", consts_1.BUILD_ID.toString());\n        this.modal_header.innerHTML = "Changelog";\n        this.modal_body.innerHTML = consts_1.CHANGELOG_CONTENT;\n        if (this.modal.style.zIndex == "-1")\n            this.modal_x_on_click();\n        else {\n            this.modal.style.zIndex = "9";\n            this.modal.style.opacity = "1";\n        }\n        ;\n    }\n    ;\n    discord_button_on_click() {\n        const discord_modal = document.getElementById("discord-modal");\n        if (discord_modal.style.zIndex == "9")\n            discord_modal.style.zIndex = "-1";\n        else {\n            discord_modal.style.zIndex = "9";\n            discord_modal.style.opacity = "1";\n        }\n        ;\n    }\n    ;\n    discord_button_close_on_click() {\n        const discord_modal = document.getElementById("discord-modal");\n        discord_modal.style.opacity = "0";\n        discord_modal.style.zIndex = "-1";\n    }\n    /** The event listener for when the button is clicked. */\n    info_button_on_click() {\n        this.modal_header.innerHTML = "Information";\n        this.modal_body.innerHTML = consts_1.INFORMATION_CONTENT;\n        if (this.modal.style.zIndex == "-1")\n            this.modal_x_on_click();\n        else {\n            this.modal.style.zIndex = "9";\n            this.modal.style.opacity = "1";\n        }\n        ;\n    }\n    ;\n    settings_button_on_click() {\n        this.settings_theme.classList.add("selected");\n        this.settings_config.classList.remove("selected");\n        this.settings_theme_content.style.display = "block";\n        this.settings_config_content.style.display = "none";\n        this.settings_config.style.display = this.client.polyfight_connection.is_host ? "block" : "none";\n        this.settings_modal.style.zIndex = "9";\n        this.settings_modal.style.opacity = "1";\n    }\n    ;\n    clan_button_on_click() {\n        /*const user = auth.currentUser;\n        if (user == null)\n        {\n            this.client.polyfight_canvas.add_notification({ message: "You must be signed in via Google to join a clan.", r: 255, g: 0, b: 0 });\n            return;\n        }\n        else */ if (this.clan_button.classList.contains("disabled")) {\n            this.client.polyfight_canvas.add_notification({ message: "Clans are not available in this gamemode.", r: 255, g: 0, b: 0 });\n            return;\n        }\n        if (this.clan_modal.style.zIndex == "-1")\n            this.clan_modal_close_on_click();\n        else {\n            this.clan_modal.style.zIndex = "9";\n            this.clan_modal.style.opacity = "1";\n        }\n        ;\n    }\n    ;\n    clan_modal_close_on_click() {\n        this.clan_modal.style.opacity = "0";\n        this.clan_modal.style.zIndex = "-2";\n    }\n    ;\n    settings_button_close_on_click() {\n        this.settings_modal.style.opacity = "0";\n        this.settings_modal.style.zIndex = "-2";\n    }\n    ;\n    /** The event listener for when the x-mark is clicked. */\n    modal_x_on_click() {\n        this.modal.style.opacity = "0";\n        this.modal.style.zIndex = "-2";\n    }\n    ;\n    teambuilder_modal_on_click() {\n        var _a;\n        if (this.teambuilder_modal.style.zIndex == "-1")\n            this.teambuilder_modal_close_on_click();\n        else {\n            this.teambuilder_teams.style.display = "";\n            this.teambuilder_teams_buttons.style.display = "";\n            this.teambuilder_edit.style.display = "none";\n            this.teambuilder_teamedit_buttons.style.display = "none";\n            this.teambuilder_modal.style.zIndex = "9";\n            this.teambuilder_modal.style.opacity = "1";\n            /** @ts-ignore */\n            (_a = document.getElementById(`teambox-${window.teams_state.team_idx}`)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: "smooth", block: "center" });\n        }\n        ;\n    }\n    teambuilder_modal_close_on_click() {\n        this.teambuilder_teams.style.display = "";\n        this.teambuilder_teams_buttons.style.display = "";\n        this.teambuilder_edit.style.display = "none";\n        this.teambuilder_teamedit_buttons.style.display = "none";\n        this.teambuilder_modal.style.opacity = "0";\n        this.teambuilder_modal.style.zIndex = "-2";\n    }\n    ;\n    stats_leaderboard_modal_close_on_click() {\n        this.stats_leaderboard_modal.style.opacity = "0";\n        this.stats_leaderboard_modal.style.zIndex = "-2";\n    }\n    trophy_leaderboard_close_on_click() {\n        this.trophy_leaderboard_modal.style.opacity = "0";\n        this.trophy_leaderboard_modal.style.zIndex = "-2";\n    }\n    new_server_on_click() {\n        this.client.polyfight_canvas.add_notification({ message: "Log into Google to create a new server.", r: 255, g: 0, b: 0 });\n    }\n    ;\n    ranked_onclick(disabled) {\n        var _a;\n        if (disabled) {\n            this.client.polyfight_canvas.add_notification({ message: "Log into Google to play in 1v1 modes.", r: 255, g: 0, b: 0 });\n        }\n        else {\n            window.location.hash = "";\n            if (this.client.polyfight_connection.polyfight_connection)\n                this.client.polyfight_connection.polyfight_connection.onclose = null;\n            (_a = this.client.polyfight_connection.polyfight_connection) === null || _a === void 0 ? void 0 : _a.close();\n            this.client.polyfight_canvas.add_notification({ message: "You have been disconnected from the scoring server.", r: 255, g: 0, b: 0 });\n            if (!localStorage.has_1v1ed) {\n                localStorage.has_1v1ed = 1;\n                this.modal_header.innerHTML = "1v1 Rules";\n                this.modal_body.innerHTML = `\n                <b>How to Play</b>\n                <ul>\n                    <li>You will be able to select a team of six tanks with builds by clicking on your team.</li>\n                    <li>You can open the teambuilder menu by pressing on the button on the homescreen.</li>\n                    <li>You can type in a tank you want to use, and fill out a build form.</li>\n                    <li>Press Begin Matchmaking to be matched with an opponent.</li>\n                    <li>You will be matched with a player of similar skill level.</li>\n                    <li>You must press the Ready checkbox to start. Automatic losses will occur if you stall.</li>\n                    <li>When you die, you will move onto the next tank you\'ve chosen in your team. When you run out of tanks, you lose the 1v1.</li>\n                    <li>The leaderboard will show the score in the 1v1. The first player to reach 6 on the leaderboard wins.</li>\n                </ul>\n                <div class="line"></div>\n                <b>Rankings</b>\n                <ul>\n                    <li>Rankings are based on the ELO system.</li>\n                    <li>The ELO system is a method for calculating the relative skill levels of players in two-player games.</li>\n                    <li>Each tank is placed in a tank category.</li>\n                    <li>When dying in a 1v1, you lose ELO. When killing your opponent, you gain ELO. ELO changes are shown on death.</li>\n                    <li>Buttons on the homescreen can show your ELO breakdown and also show a top 10 leaderboard per category.</li>\n                 </ul>\n                `.trim();\n                this.modal.style.zIndex = "9";\n                this.modal.style.opacity = "1";\n            }\n            this.play_button.innerText = "Begin Matchmaking";\n            this.scoring.classList.remove("selected");\n            this.ranked.classList.add("selected");\n            this.menu_scoring.style.display = "none";\n            this.menu_1v1.style.display = "block";\n        }\n    }\n}\nexports["default"] = Elements;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/rendering/elements.ts?')},"./views/ts/utils/color.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nclass Colour {\n    static from_rgb(r, g, b) {\n        return new Colour(r << 16 | g << 8 | b << 0);\n    }\n    static from_hex(hex) {\n        return new Colour(parseInt(hex, 16));\n    }\n    static blend_colours(primary, secondary, factor) {\n        const c = new Colour(primary.int);\n        c.blend_with(factor, secondary);\n        return c;\n    }\n    get int() {\n        return this.r << 16 | this.g << 8 | this.b << 0;\n    }\n    get css() {\n        return `rgb(${this.r}, ${this.g}, ${this.b})`;\n    }\n    get r() { return this._r; }\n    ;\n    set r(v) { this._r = v & 255; }\n    ;\n    get g() { return this._g; }\n    ;\n    set g(v) { this._g = v & 255; }\n    ;\n    get b() { return this._b; }\n    ;\n    set b(v) { this._b = v & 255; }\n    ;\n    constructor(colour) {\n        this._r = 0;\n        this._g = 0;\n        this._b = 0;\n        this.r = (colour >>> 16) & 255;\n        this.g = (colour >>> 8) & 255;\n        this.b = (colour >>> 0) & 255;\n    }\n    blend_with(factor, colour) {\n        this.r = Math.round(colour.r * factor + this.r * (1 - factor));\n        this.g = Math.round(colour.g * factor + this.g * (1 - factor));\n        this.b = Math.round(colour.b * factor + this.b * (1 - factor));\n        return this;\n    }\n    grayscale() {\n        const avg = (this.r + this.g + this.b) / 3;\n        this.r = avg;\n        this.g = avg;\n        this.b = avg;\n        return this;\n    }\n    invert() {\n        this.r = 255 - this.r;\n        this.g = 255 - this.g;\n        this.b = 255 - this.b;\n        return this;\n    }\n    clone() {\n        return new Colour(this.int);\n    }\n}\nColour.BLACK = Colour.from_rgb(0, 0, 0);\nColour.WHITE = Colour.from_rgb(255, 255, 255);\nexports["default"] = Colour;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/utils/color.ts?')},"./views/ts/utils/functions.ts":function(__unused_webpack_module,exports){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.sleep = exports.normalise_angle = exports.aabb = exports.score_format = exports.fuzzy_equals = exports.exponential_decay = exports.timed_exponential_smoothing = exports.exponential_smoothing = exports.lerp_angle = exports.lerp = exports.constrain = exports.TAU = void 0;\n/** 2π */\nexports.TAU = 2 * Math.PI;\n/** Constrains a value such that `value` is in the interval of [min, max]. */\nconst constrain = (min, value, max) => Math.max(Math.min(value, max), min);\nexports.constrain = constrain;\n/** Linearly interpolates within the interval `[a, b]` given an interpolation factor `t`. */\nconst lerp = (a, t, b) => a + (b - a) * t;\nexports.lerp = lerp;\n/** Linearly interpolates (and normalises) an angle within the interval `[a, b]` given an interpolation factor `t`. */\nconst lerp_angle = (a, t, b) => {\n    let value = a + (-((a - b + Math.PI * 3) % (exports.TAU) - Math.PI)) * t;\n    if (value > Math.PI)\n        value -= exports.TAU;\n    if (value < -Math.PI)\n        value += exports.TAU;\n    return value;\n};\nexports.lerp_angle = lerp_angle;\nconst exponential_smoothing = (value, wanted, rate) => (value * (1 - (0, exports.constrain)(0, rate, 1))) + (wanted * (0, exports.constrain)(0, rate, 1));\nexports.exponential_smoothing = exponential_smoothing;\nconst timed_exponential_smoothing = (value, wanted, rate, dt) => (0, exports.exponential_smoothing)(value, wanted, 1 - Math.pow((0, exports.constrain)(0, rate, 1), dt));\nexports.timed_exponential_smoothing = timed_exponential_smoothing;\nconst DECAY_CONSTANT = 16;\nconst exponential_decay = (a, b, dt) => b + (a - b) * Math.exp(-DECAY_CONSTANT * dt);\nexports.exponential_decay = exponential_decay;\n// export const exponential_smoothing = (value: number, wanted: number, rate: number) => (value * (1 - constrain(0, rate, 1))) + (wanted * constrain(0, rate, 1));\n// export const timed_exponential_smoothing = (value: number, wanted: number, rate: number, dt: number, slow_factor: number = 0.6) => {\n//     const adjusted_rate = Math.pow(constrain(0, rate, 1), dt * slow_factor);\n//     return exponential_smoothing(value, wanted, 1 - adjusted_rate);\n// };\nconst fuzzy_equals = (a, b, epsilon = 0.001) => Math.abs(a - b) < epsilon;\nexports.fuzzy_equals = fuzzy_equals;\nfunction score_format(score) {\n    if (score >= 1e9)\n        return (score / 1e9).toFixed(1) + "b";\n    else if (score >= 1e6)\n        return (score / 1e6).toFixed(1) + "m";\n    else if (score >= 1e3)\n        return (score / 1e3).toFixed(1) + "k";\n    else\n        return score.toFixed(0);\n}\nexports.score_format = score_format;\n;\nconst aabb = (a, b) => {\n    return a.x < b.x + b.width && a.x + a.width > b.x && a.y < b.y + b.height && a.y + a.height > b.y;\n};\nexports.aabb = aabb;\nconst normalise_angle = (a) => ((a % exports.TAU) + exports.TAU) % exports.TAU;\nexports.normalise_angle = normalise_angle;\nconst sleep = (ms) => __awaiter(void 0, void 0, void 0, function* () { return new Promise(resolve => setTimeout(resolve, ms)); });\nexports.sleep = sleep;\n// /** Timed exponential interpolation. */\n// export function timed_exponential_smoothing(current: number, wanted: number, rate: number, dt: number): number\n// {\n//     return current * (1 - constrain(0, rate, 1) + wanted * constrain(0, rate, 1));\n// };\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/utils/functions.ts?')},"./views/ts/utils/vector.ts":(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n/** A vector in 2D space, represents a direction and magnitude simultaneously. */\nclass Vector {\n    constructor(x, y) {\n        /** The coordinates of the vector. */\n        this.x = 0;\n        this.y = 0;\n        this.x = x;\n        this.y = y;\n    }\n    /** Converts polar coordinates to Cartesian coordinates. */\n    static toCartesian(r, theta) {\n        return new Vector(r * Math.cos(theta), r * Math.sin(theta));\n    }\n    /** Adds to a vector. */\n    add(vector) {\n        this.x += vector.x;\n        this.y += vector.y;\n        return this;\n    }\n    /** Subtracts from a vector. */\n    subtract(vector) {\n        this.x -= vector.x;\n        this.y -= vector.y;\n        return this;\n    }\n    /** Scales from a vector. */\n    scale(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    /** Normalizes the vector. */\n    normalize() {\n        const magnitude = this.magnitude;\n        if (magnitude === 0)\n            this.x = this.y = 0;\n        else {\n            this.x /= magnitude;\n            this.y /= magnitude;\n        }\n        return this;\n    }\n    /** Gets the distance from another vector. */\n    distance(vector) {\n        return this.clone.subtract(vector).magnitude;\n    }\n    /** Gets the dot product of two vectors. */\n    dot(vector) {\n        return this.x * vector.x + this.y * vector.y;\n    }\n    /** Gets the cross product of two vectors. */\n    cross(vector) {\n        return this.x * vector.y - this.y * vector.x;\n    }\n    /** Gets the projection of the current vector onto another vector. */\n    project(vector) {\n        if (vector.x === 0 && vector.y === 0)\n            return new Vector(0, 0);\n        return vector.clone.scale(this.dot(vector) / vector.magnitudeSq);\n    }\n    ;\n    /** Creates a vector directionally orthogonal to the current vector. */\n    get orthogonal() {\n        return new Vector(-this.y, this.x);\n    }\n    /** Gets the angle of the vector from a reference point. */\n    angle(reference = { x: 0, y: 0 }) {\n        return Math.atan2(this.y - reference.y, this.x - reference.x);\n    }\n    /** Rotates the angle to a new angle. */\n    rotate(angle) {\n        const magnitude = this.magnitude;\n        this.x = magnitude * Math.cos(angle);\n        this.y = magnitude * Math.sin(angle);\n        return this;\n    }\n    /** Gets the magnitude (length) of the vector. */\n    get magnitude() {\n        return Math.sqrt(this.magnitudeSq);\n    }\n    ;\n    /** Sets the magnitude (length) of the vector. */\n    set magnitude(magnitude) {\n        const angle = this.angle();\n        this.x = magnitude * Math.cos(angle);\n        this.y = magnitude * Math.sin(angle);\n    }\n    ;\n    /** Gets the squared magnitude of the vector. */\n    get magnitudeSq() {\n        return this.x * this.x + this.y * this.y;\n    }\n    ;\n    /** Clones the vector. */\n    get clone() {\n        return new Vector(this.x, this.y);\n    }\n}\nexports["default"] = Vector;\n;\n\n\n//# sourceURL=webpack://polyfight.io/./views/ts/utils/vector.ts?')}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];return void 0!==e||(e=__webpack_module_cache__[t]={exports:{}},__webpack_modules__[t].call(e.exports,e,e.exports,__webpack_require__)),e.exports}var __webpack_exports__=__webpack_require__("./views/ts/index.ts")})();